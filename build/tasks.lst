ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB14:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1814 0
  34 0000 50B1     		cbz	r0, .L8
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1817 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1820 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1824 0
  46 0012 73B1     		cbz	r3, .L7
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1807 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB112:
  54              	.LBB113:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 34


   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 35


  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 36


 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 37


 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
  57              		.syntax unified
  58              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE113:
  72              	.LBE112:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  73              		.loc 1 1807 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1826 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1844 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE14:
  97              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvResetNextTaskUnblockTime:
 105              	.LFB44:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 70


3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 71


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 72


3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 73


3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 74


3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 75


3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 106              		.loc 1 3944 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 111              		.loc 1 3947 0
 112 0000 084B     		ldr	r3, .L15
 113 0002 1B68     		ldr	r3, [r3]
 114 0004 1B68     		ldr	r3, [r3]
 115 0006 3BB1     		cbz	r3, .L14
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 116              		.loc 1 3961 0
 117 0008 064B     		ldr	r3, .L15
 118 000a 1B68     		ldr	r3, [r3]
 119 000c DB68     		ldr	r3, [r3, #12]
 120 000e DB68     		ldr	r3, [r3, #12]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 76


 121              	.LVL9:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 122              		.loc 1 3962 0
 123 0010 5A68     		ldr	r2, [r3, #4]
 124 0012 054B     		ldr	r3, .L15+4
 125              	.LVL10:
 126 0014 1A60     		str	r2, [r3]
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 127              		.loc 1 3964 0
 128 0016 7047     		bx	lr
 129              	.L14:
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3953 0
 131 0018 034B     		ldr	r3, .L15+4
 132 001a 4FF0FF32 		mov	r2, #-1
 133 001e 1A60     		str	r2, [r3]
 134 0020 7047     		bx	lr
 135              	.L16:
 136 0022 00BF     		.align	2
 137              	.L15:
 138 0024 00000000 		.word	.LANCHOR2
 139 0028 00000000 		.word	.LANCHOR3
 140              		.cfi_endproc
 141              	.LFE44:
 143              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 144              		.align	1
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu fpv4-sp-d16
 150              	prvInitialiseNewTask:
 151              	.LFB6:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 152              		.loc 1 832 0
 153              		.cfi_startproc
 154              		@ args = 16, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              	.LVL11:
 157 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 32
 160              		.cfi_offset 4, -32
 161              		.cfi_offset 5, -28
 162              		.cfi_offset 6, -24
 163              		.cfi_offset 7, -20
 164              		.cfi_offset 8, -16
 165              		.cfi_offset 9, -12
 166              		.cfi_offset 10, -8
 167              		.cfi_offset 14, -4
 168 0004 8046     		mov	r8, r0
 169 0006 9946     		mov	r9, r3
 170 0008 089D     		ldr	r5, [sp, #32]
 171 000a 099F     		ldr	r7, [sp, #36]
 172 000c 0A9C     		ldr	r4, [sp, #40]
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 173              		.loc 1 864 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 77


 174 000e 266B     		ldr	r6, [r4, #48]
 175 0010 02F18042 		add	r2, r2, #1073741824
 176              	.LVL12:
 177 0014 013A     		subs	r2, r2, #1
 178              	.LVL13:
 179 0016 06EB8206 		add	r6, r6, r2, lsl #2
 180              	.LVL14:
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181              		.loc 1 865 0
 182 001a 26F00706 		bic	r6, r6, #7
 183              	.LVL15:
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 184              		.loc 1 874 0
 185 001e 6664     		str	r6, [r4, #68]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 186              		.loc 1 892 0
 187 0020 A1BB     		cbnz	r1, .L25
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 188              		.loc 1 919 0
 189 0022 0023     		movs	r3, #0
 190              	.LVL16:
 191 0024 84F83430 		strb	r3, [r4, #52]
 192 0028 0BE0     		b	.L22
 193              	.LVL17:
 194              	.L21:
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 195              		.loc 1 896 0
 196 002a D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 197 002c E118     		adds	r1, r4, r3
 198 002e 81F83400 		strb	r0, [r1, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 199              		.loc 1 901 0
 200 0032 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 201 0034 11B1     		cbz	r1, .L20
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 202              		.loc 1 894 0 discriminator 2
 203 0036 0133     		adds	r3, r3, #1
 204              	.LVL18:
 205              	.L18:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 206              		.loc 1 894 0 is_stmt 0 discriminator 1
 207 0038 0F2B     		cmp	r3, #15
 208 003a F6D9     		bls	.L21
 209              	.L20:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 210              		.loc 1 913 0 is_stmt 1
 211 003c 0023     		movs	r3, #0
 212              	.LVL19:
 213 003e 84F84330 		strb	r3, [r4, #67]
 214              	.LVL20:
 215              	.L22:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 216              		.loc 1 924 0
 217 0042 062D     		cmp	r5, #6
 218 0044 00D9     		bls	.L23
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 219              		.loc 1 926 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 78


 220 0046 0625     		movs	r5, #6
 221              	.L23:
 222              	.LVL21:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 223              		.loc 1 933 0
 224 0048 E562     		str	r5, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 225              		.loc 1 936 0
 226 004a A564     		str	r5, [r4, #72]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 227              		.loc 1 937 0
 228 004c 4FF0000A 		mov	r10, #0
 229 0050 C4F84CA0 		str	r10, [r4, #76]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 230              		.loc 1 941 0
 231 0054 201D     		adds	r0, r4, #4
 232 0056 FFF7FEFF 		bl	vListInitialiseItem
 233              	.LVL22:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 234              		.loc 1 942 0
 235 005a 04F11800 		add	r0, r4, #24
 236 005e FFF7FEFF 		bl	vListInitialiseItem
 237              	.LVL23:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 238              		.loc 1 946 0
 239 0062 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 240              		.loc 1 949 0
 241 0064 C5F10705 		rsb	r5, r5, #7
 242              	.LVL24:
 243 0068 A561     		str	r5, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 244              		.loc 1 950 0
 245 006a 6462     		str	r4, [r4, #36]
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 246              		.loc 1 960 0
 247 006c C4F850A0 		str	r10, [r4, #80]
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 248              		.loc 1 992 0
 249 0070 C4F854A0 		str	r10, [r4, #84]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 250              		.loc 1 993 0
 251 0074 84F858A0 		strb	r10, [r4, #88]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 252              		.loc 1 1058 0
 253 0078 4A46     		mov	r2, r9
 254 007a 4146     		mov	r1, r8
 255 007c 3046     		mov	r0, r6
 256 007e FFF7FEFF 		bl	pxPortInitialiseStack
 257              	.LVL25:
 258 0082 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 259              		.loc 1 1064 0
 260 0084 07B1     		cbz	r7, .L17
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 261              		.loc 1 1068 0
 262 0086 3C60     		str	r4, [r7]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 79


 263              	.L17:
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 264              		.loc 1 1074 0
 265 0088 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 266              	.LVL26:
 267              	.L25:
 268 008c 0A46     		mov	r2, r1
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 269              		.loc 1 894 0
 270 008e 0023     		movs	r3, #0
 271              	.LVL27:
 272 0090 D2E7     		b	.L18
 273              		.cfi_endproc
 274              	.LFE6:
 276              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 277              		.align	1
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu fpv4-sp-d16
 283              	prvInitialiseTaskLists:
 284              	.LFB41:
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 285              		.loc 1 3608 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289 0000 38B5     		push	{r3, r4, r5, lr}
 290              	.LCFI1:
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 3, -16
 293              		.cfi_offset 4, -12
 294              		.cfi_offset 5, -8
 295              		.cfi_offset 14, -4
 296              	.LVL28:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 297              		.loc 1 3611 0
 298 0002 0024     		movs	r4, #0
 299              	.LVL29:
 300              	.L30:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 301              		.loc 1 3611 0 is_stmt 0 discriminator 1
 302 0004 062C     		cmp	r4, #6
 303 0006 15D9     		bls	.L31
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 304              		.loc 1 3616 0 is_stmt 1
 305 0008 0E4D     		ldr	r5, .L33
 306 000a 2846     		mov	r0, r5
 307 000c FFF7FEFF 		bl	vListInitialise
 308              	.LVL30:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 309              		.loc 1 3617 0
 310 0010 0D4C     		ldr	r4, .L33+4
 311              	.LVL31:
 312 0012 2046     		mov	r0, r4
 313 0014 FFF7FEFF 		bl	vListInitialise
 314              	.LVL32:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 80


3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315              		.loc 1 3618 0
 316 0018 0C48     		ldr	r0, .L33+8
 317 001a FFF7FEFF 		bl	vListInitialise
 318              	.LVL33:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 319              		.loc 1 3622 0
 320 001e 0C48     		ldr	r0, .L33+12
 321 0020 FFF7FEFF 		bl	vListInitialise
 322              	.LVL34:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 323              		.loc 1 3628 0
 324 0024 0B48     		ldr	r0, .L33+16
 325 0026 FFF7FEFF 		bl	vListInitialise
 326              	.LVL35:
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 327              		.loc 1 3634 0
 328 002a 0B4B     		ldr	r3, .L33+20
 329 002c 1D60     		str	r5, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 330              		.loc 1 3635 0
 331 002e 0B4B     		ldr	r3, .L33+24
 332 0030 1C60     		str	r4, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 333              		.loc 1 3636 0
 334 0032 38BD     		pop	{r3, r4, r5, pc}
 335              	.LVL36:
 336              	.L31:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 337              		.loc 1 3613 0 discriminator 3
 338 0034 0A4B     		ldr	r3, .L33+28
 339 0036 1420     		movs	r0, #20
 340 0038 00FB0430 		mla	r0, r0, r4, r3
 341 003c FFF7FEFF 		bl	vListInitialise
 342              	.LVL37:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 343              		.loc 1 3611 0 discriminator 3
 344 0040 0134     		adds	r4, r4, #1
 345              	.LVL38:
 346 0042 DFE7     		b	.L30
 347              	.L34:
 348              		.align	2
 349              	.L33:
 350 0044 00000000 		.word	.LANCHOR5
 351 0048 00000000 		.word	.LANCHOR6
 352 004c 00000000 		.word	.LANCHOR1
 353 0050 00000000 		.word	.LANCHOR7
 354 0054 00000000 		.word	.LANCHOR0
 355 0058 00000000 		.word	.LANCHOR2
 356 005c 00000000 		.word	.LANCHOR8
 357 0060 00000000 		.word	.LANCHOR4
 358              		.cfi_endproc
 359              	.LFE41:
 361              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 362              		.align	1
 363              		.syntax unified
 364              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 81


 365              		.thumb_func
 366              		.fpu fpv4-sp-d16
 368              	prvAddNewTaskToReadyList:
 369              	.LFB7:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 370              		.loc 1 1078 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL39:
 375 0000 10B5     		push	{r4, lr}
 376              	.LCFI2:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 4, -8
 379              		.cfi_offset 14, -4
 380 0002 0446     		mov	r4, r0
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 381              		.loc 1 1081 0
 382 0004 FFF7FEFF 		bl	vPortEnterCritical
 383              	.LVL40:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 384              		.loc 1 1083 0
 385 0008 204A     		ldr	r2, .L40
 386 000a 1368     		ldr	r3, [r2]
 387 000c 0133     		adds	r3, r3, #1
 388 000e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 389              		.loc 1 1084 0
 390 0010 1F4B     		ldr	r3, .L40+4
 391 0012 1B68     		ldr	r3, [r3]
 392 0014 63BB     		cbnz	r3, .L36
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393              		.loc 1 1088 0
 394 0016 1E4B     		ldr	r3, .L40+4
 395 0018 1C60     		str	r4, [r3]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 396              		.loc 1 1090 0
 397 001a 1368     		ldr	r3, [r2]
 398 001c 012B     		cmp	r3, #1
 399 001e 01D1     		bne	.L37
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 400              		.loc 1 1095 0
 401 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 402              	.LVL41:
 403              	.L37:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404              		.loc 1 1124 0
 405 0024 1B4A     		ldr	r2, .L40+8
 406 0026 1368     		ldr	r3, [r2]
 407 0028 0133     		adds	r3, r3, #1
 408 002a 1360     		str	r3, [r2]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409              		.loc 1 1134 0
 410 002c E26A     		ldr	r2, [r4, #44]
 411 002e 0123     		movs	r3, #1
 412 0030 9340     		lsls	r3, r3, r2
 413 0032 1949     		ldr	r1, .L40+12
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 82


 414 0034 0868     		ldr	r0, [r1]
 415 0036 0343     		orrs	r3, r3, r0
 416 0038 0B60     		str	r3, [r1]
 417 003a 211D     		adds	r1, r4, #4
 418 003c 174B     		ldr	r3, .L40+16
 419 003e 1420     		movs	r0, #20
 420 0040 00FB0230 		mla	r0, r0, r2, r3
 421 0044 FFF7FEFF 		bl	vListInsertEnd
 422              	.LVL42:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423              		.loc 1 1138 0
 424 0048 FFF7FEFF 		bl	vPortExitCritical
 425              	.LVL43:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 426              		.loc 1 1140 0
 427 004c 144B     		ldr	r3, .L40+20
 428 004e 1B68     		ldr	r3, [r3]
 429 0050 6BB1     		cbz	r3, .L35
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 430              		.loc 1 1144 0
 431 0052 0F4B     		ldr	r3, .L40+4
 432 0054 1B68     		ldr	r3, [r3]
 433 0056 DA6A     		ldr	r2, [r3, #44]
 434 0058 E36A     		ldr	r3, [r4, #44]
 435 005a 9A42     		cmp	r2, r3
 436 005c 07D2     		bcs	.L35
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 437              		.loc 1 1146 0
 438 005e 114B     		ldr	r3, .L40+24
 439 0060 4FF08052 		mov	r2, #268435456
 440 0064 1A60     		str	r2, [r3]
 441              		.syntax unified
 442              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 443 0066 BFF34F8F 		dsb
 444              	@ 0 "" 2
 445              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 446 006a BFF36F8F 		isb
 447              	@ 0 "" 2
 448              		.thumb
 449              		.syntax unified
 450              	.L35:
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 451              		.loc 1 1157 0
 452 006e 10BD     		pop	{r4, pc}
 453              	.LVL44:
 454              	.L36:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 455              		.loc 1 1107 0
 456 0070 0B4B     		ldr	r3, .L40+20
 457 0072 1B68     		ldr	r3, [r3]
 458 0074 002B     		cmp	r3, #0
 459 0076 D5D1     		bne	.L37
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 460              		.loc 1 1109 0
 461 0078 054B     		ldr	r3, .L40+4
 462 007a 1B68     		ldr	r3, [r3]
 463 007c DA6A     		ldr	r2, [r3, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 83


 464 007e E36A     		ldr	r3, [r4, #44]
 465 0080 9A42     		cmp	r2, r3
 466 0082 CFD8     		bhi	.L37
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 467              		.loc 1 1111 0
 468 0084 024B     		ldr	r3, .L40+4
 469 0086 1C60     		str	r4, [r3]
 470 0088 CCE7     		b	.L37
 471              	.L41:
 472 008a 00BF     		.align	2
 473              	.L40:
 474 008c 00000000 		.word	.LANCHOR9
 475 0090 00000000 		.word	.LANCHOR10
 476 0094 00000000 		.word	.LANCHOR12
 477 0098 00000000 		.word	.LANCHOR13
 478 009c 00000000 		.word	.LANCHOR4
 479 00a0 00000000 		.word	.LANCHOR11
 480 00a4 04ED00E0 		.word	-536810236
 481              		.cfi_endproc
 482              	.LFE7:
 484              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 485              		.align	1
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv4-sp-d16
 491              	prvCheckTasksWaitingTermination:
 492              	.LFB42:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493              		.loc 1 3640 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497 0000 08B5     		push	{r3, lr}
 498              	.LCFI3:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 3, -8
 501              		.cfi_offset 14, -4
 502              	.LBB114:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 503              		.loc 1 3650 0
 504 0002 11E0     		b	.L43
 505              	.L44:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 506              		.loc 1 3652 0
 507 0004 FFF7FEFF 		bl	vPortEnterCritical
 508              	.LVL45:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 509              		.loc 1 3654 0
 510 0008 0A4B     		ldr	r3, .L46
 511 000a DB68     		ldr	r3, [r3, #12]
 512 000c D868     		ldr	r0, [r3, #12]
 513              	.LVL46:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 514              		.loc 1 3655 0
 515 000e 0430     		adds	r0, r0, #4
 516              	.LVL47:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 84


 517 0010 FFF7FEFF 		bl	uxListRemove
 518              	.LVL48:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 519              		.loc 1 3656 0
 520 0014 084A     		ldr	r2, .L46+4
 521 0016 1368     		ldr	r3, [r2]
 522 0018 013B     		subs	r3, r3, #1
 523 001a 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 524              		.loc 1 3657 0
 525 001c 074A     		ldr	r2, .L46+8
 526 001e 1368     		ldr	r3, [r2]
 527 0020 013B     		subs	r3, r3, #1
 528 0022 1360     		str	r3, [r2]
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529              		.loc 1 3659 0
 530 0024 FFF7FEFF 		bl	vPortExitCritical
 531              	.LVL49:
 532              	.L43:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 533              		.loc 1 3650 0
 534 0028 044B     		ldr	r3, .L46+8
 535 002a 1B68     		ldr	r3, [r3]
 536 002c 002B     		cmp	r3, #0
 537 002e E9D1     		bne	.L44
 538              	.LBE114:
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 539              		.loc 1 3665 0
 540 0030 08BD     		pop	{r3, pc}
 541              	.L47:
 542 0032 00BF     		.align	2
 543              	.L46:
 544 0034 00000000 		.word	.LANCHOR7
 545 0038 00000000 		.word	.LANCHOR9
 546 003c 00000000 		.word	.LANCHOR14
 547              		.cfi_endproc
 548              	.LFE42:
 550              		.section	.text.prvIdleTask,"ax",%progbits
 551              		.align	1
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	prvIdleTask:
 558              	.LFB40:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 559              		.loc 1 3393 0
 560              		.cfi_startproc
 561              		@ Volatile: function does not return.
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              	.LVL50:
 565 0000 08B5     		push	{r3, lr}
 566              	.LCFI4:
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 3, -8
 569              		.cfi_offset 14, -4
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 85


 570              	.LVL51:
 571              	.L49:
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572              		.loc 1 3409 0
 573 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 574              	.LVL52:
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 575              		.loc 1 3432 0
 576 0006 064B     		ldr	r3, .L52
 577 0008 1B68     		ldr	r3, [r3]
 578 000a 012B     		cmp	r3, #1
 579 000c F9D9     		bls	.L49
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 580              		.loc 1 3434 0
 581 000e 054B     		ldr	r3, .L52+4
 582 0010 4FF08052 		mov	r2, #268435456
 583 0014 1A60     		str	r2, [r3]
 584              		.syntax unified
 585              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 586 0016 BFF34F8F 		dsb
 587              	@ 0 "" 2
 588              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 589 001a BFF36F8F 		isb
 590              	@ 0 "" 2
 591              		.thumb
 592              		.syntax unified
 593 001e F0E7     		b	.L49
 594              	.L53:
 595              		.align	2
 596              	.L52:
 597 0020 00000000 		.word	.LANCHOR4
 598 0024 04ED00E0 		.word	-536810236
 599              		.cfi_endproc
 600              	.LFE40:
 602              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 603              		.align	1
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu fpv4-sp-d16
 609              	prvAddCurrentTaskToDelayedList:
 610              	.LFB59:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 86


3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 87


4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 88


4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 89


4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 90


4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 91


4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 92


4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 93


4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 94


4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 95


4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 96


4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 97


4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 98


4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 99


4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 100


4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 101


4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 102


4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 103


4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 104


5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 105


5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 106


5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 107


5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 611              		.loc 1 5178 0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              	.LVL53:
 616 0000 70B5     		push	{r4, r5, r6, lr}
 617              	.LCFI5:
 618              		.cfi_def_cfa_offset 16
 619              		.cfi_offset 4, -16
 620              		.cfi_offset 5, -12
 621              		.cfi_offset 6, -8
 622              		.cfi_offset 14, -4
 623 0002 0446     		mov	r4, r0
 624 0004 0E46     		mov	r6, r1
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 625              		.loc 1 5180 0
 626 0006 1D4B     		ldr	r3, .L62
 627 0008 1D68     		ldr	r5, [r3]
 628              	.LVL54:
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 629              		.loc 1 5193 0
 630 000a 1D4B     		ldr	r3, .L62+4
 631 000c 1868     		ldr	r0, [r3]
 632              	.LVL55:
 633 000e 0430     		adds	r0, r0, #4
 634 0010 FFF7FEFF 		bl	uxListRemove
 635              	.LVL56:
 636 0014 50B9     		cbnz	r0, .L55
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 637              		.loc 1 5197 0
 638 0016 1A4B     		ldr	r3, .L62+4
 639 0018 1B68     		ldr	r3, [r3]
 640 001a DA6A     		ldr	r2, [r3, #44]
 641 001c 0123     		movs	r3, #1
 642 001e 03FA02F2 		lsl	r2, r3, r2
 643 0022 1849     		ldr	r1, .L62+8
 644 0024 0B68     		ldr	r3, [r1]
 645 0026 23EA0203 		bic	r3, r3, r2
 646 002a 0B60     		str	r3, [r1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 108


 647              	.L55:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 648              		.loc 1 5206 0
 649 002c B4F1FF3F 		cmp	r4, #-1
 650 0030 13D0     		beq	.L60
 651              	.L56:
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 652              		.loc 1 5218 0
 653 0032 2C44     		add	r4, r4, r5
 654              	.LVL57:
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 655              		.loc 1 5221 0
 656 0034 124B     		ldr	r3, .L62+4
 657 0036 1B68     		ldr	r3, [r3]
 658 0038 5C60     		str	r4, [r3, #4]
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 659              		.loc 1 5223 0
 660 003a A542     		cmp	r5, r4
 661 003c 16D8     		bhi	.L61
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 662              		.loc 1 5233 0
 663 003e 124B     		ldr	r3, .L62+12
 664 0040 1868     		ldr	r0, [r3]
 665 0042 0F4B     		ldr	r3, .L62+4
 666 0044 1968     		ldr	r1, [r3]
 667 0046 0431     		adds	r1, r1, #4
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 109


 668 0048 FFF7FEFF 		bl	vListInsert
 669              	.LVL58:
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 670              		.loc 1 5238 0
 671 004c 0F4B     		ldr	r3, .L62+16
 672 004e 1B68     		ldr	r3, [r3]
 673 0050 A342     		cmp	r3, r4
 674 0052 12D9     		bls	.L54
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 675              		.loc 1 5240 0
 676 0054 0D4B     		ldr	r3, .L62+16
 677 0056 1C60     		str	r4, [r3]
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 110


5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 678              		.loc 1 5286 0
 679 0058 0FE0     		b	.L54
 680              	.LVL59:
 681              	.L60:
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 682              		.loc 1 5206 0 discriminator 1
 683 005a 002E     		cmp	r6, #0
 684 005c E9D0     		beq	.L56
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 685              		.loc 1 5211 0
 686 005e 084B     		ldr	r3, .L62+4
 687 0060 1968     		ldr	r1, [r3]
 688 0062 0431     		adds	r1, r1, #4
 689 0064 0A48     		ldr	r0, .L62+20
 690 0066 FFF7FEFF 		bl	vListInsertEnd
 691              	.LVL60:
 692 006a 06E0     		b	.L54
 693              	.LVL61:
 694              	.L61:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 695              		.loc 1 5227 0
 696 006c 094B     		ldr	r3, .L62+24
 697 006e 1868     		ldr	r0, [r3]
 698 0070 034B     		ldr	r3, .L62+4
 699 0072 1968     		ldr	r1, [r3]
 700 0074 0431     		adds	r1, r1, #4
 701 0076 FFF7FEFF 		bl	vListInsert
 702              	.LVL62:
 703              	.L54:
 704              		.loc 1 5286 0
 705 007a 70BD     		pop	{r4, r5, r6, pc}
 706              	.LVL63:
 707              	.L63:
 708              		.align	2
 709              	.L62:
 710 007c 00000000 		.word	.LANCHOR15
 711 0080 00000000 		.word	.LANCHOR10
 712 0084 00000000 		.word	.LANCHOR13
 713 0088 00000000 		.word	.LANCHOR2
 714 008c 00000000 		.word	.LANCHOR3
 715 0090 00000000 		.word	.LANCHOR0
 716 0094 00000000 		.word	.LANCHOR8
 717              		.cfi_endproc
 718              	.LFE59:
 720              		.section	.text.xTaskCreateStatic,"ax",%progbits
 721              		.align	1
 722              		.global	xTaskCreateStatic
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 111


 728              	xTaskCreateStatic:
 729              	.LFB5:
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 730              		.loc 1 588 0
 731              		.cfi_startproc
 732              		@ args = 12, pretend = 0, frame = 8
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              	.LVL64:
 735 0000 70B5     		push	{r4, r5, r6, lr}
 736              	.LCFI6:
 737              		.cfi_def_cfa_offset 16
 738              		.cfi_offset 4, -16
 739              		.cfi_offset 5, -12
 740              		.cfi_offset 6, -8
 741              		.cfi_offset 14, -4
 742 0002 86B0     		sub	sp, sp, #24
 743              	.LCFI7:
 744              		.cfi_def_cfa_offset 40
 745 0004 0B9D     		ldr	r5, [sp, #44]
 746 0006 0C9C     		ldr	r4, [sp, #48]
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 747              		.loc 1 592 0
 748 0008 45B9     		cbnz	r5, .L65
 749              	.LBB115:
 750              	.LBB116:
 751              		.loc 2 195 0
 752              		.syntax unified
 753              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 754 000a 4FF05003 			mov r3, #80												
 755 000e 83F31188 		msr basepri, r3											
 756 0012 BFF36F8F 		isb														
 757 0016 BFF34F8F 		dsb														
 758              	
 759              	@ 0 "" 2
 760              	.LVL65:
 761              		.thumb
 762              		.syntax unified
 763              	.L66:
 764 001a FEE7     		b	.L66
 765              	.LVL66:
 766              	.L65:
 767              	.LBE116:
 768              	.LBE115:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769              		.loc 1 593 0
 770 001c 44B9     		cbnz	r4, .L67
 771              	.LBB117:
 772              	.LBB118:
 773              		.loc 2 195 0
 774              		.syntax unified
 775              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 776 001e 4FF05003 			mov r3, #80												
 777 0022 83F31188 		msr basepri, r3											
 778 0026 BFF36F8F 		isb														
 779 002a BFF34F8F 		dsb														
 780              	
 781              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 112


 782              	.LVL67:
 783              		.thumb
 784              		.syntax unified
 785              	.L68:
 786 002e FEE7     		b	.L68
 787              	.LVL68:
 788              	.L67:
 789              	.LBE118:
 790              	.LBE117:
 791              	.LBB119:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 792              		.loc 1 600 0
 793 0030 6026     		movs	r6, #96
 794 0032 0496     		str	r6, [sp, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 795              		.loc 1 601 0
 796 0034 049E     		ldr	r6, [sp, #16]
 797 0036 602E     		cmp	r6, #96
 798 0038 08D0     		beq	.L69
 799              	.LBB120:
 800              	.LBB121:
 801              		.loc 2 195 0
 802              		.syntax unified
 803              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 804 003a 4FF05003 			mov r3, #80												
 805 003e 83F31188 		msr basepri, r3											
 806 0042 BFF36F8F 		isb														
 807 0046 BFF34F8F 		dsb														
 808              	
 809              	@ 0 "" 2
 810              	.LVL69:
 811              		.thumb
 812              		.syntax unified
 813              	.L70:
 814 004a FEE7     		b	.L70
 815              	.LVL70:
 816              	.L69:
 817              	.LBE121:
 818              	.LBE120:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 819              		.loc 1 602 0
 820 004c 049E     		ldr	r6, [sp, #16]
 821              	.LVL71:
 822              	.LBE119:
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 823              		.loc 1 612 0
 824 004e 2563     		str	r5, [r4, #48]
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 825              		.loc 1 622 0
 826 0050 0025     		movs	r5, #0
 827 0052 0395     		str	r5, [sp, #12]
 828 0054 0294     		str	r4, [sp, #8]
 829 0056 05AD     		add	r5, sp, #20
 830 0058 0195     		str	r5, [sp, #4]
 831 005a 0A9D     		ldr	r5, [sp, #40]
 832 005c 0095     		str	r5, [sp]
 833 005e FFF7FEFF 		bl	prvInitialiseNewTask
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 113


 834              	.LVL72:
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 835              		.loc 1 623 0
 836 0062 2046     		mov	r0, r4
 837 0064 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 838              	.LVL73:
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 839              		.loc 1 631 0
 840 0068 0598     		ldr	r0, [sp, #20]
 841 006a 06B0     		add	sp, sp, #24
 842              	.LCFI8:
 843              		.cfi_def_cfa_offset 16
 844              		@ sp needed
 845 006c 70BD     		pop	{r4, r5, r6, pc}
 846              		.cfi_endproc
 847              	.LFE5:
 849              		.section	.text.vTaskDelete,"ax",%progbits
 850              		.align	1
 851              		.global	vTaskDelete
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 855              		.fpu fpv4-sp-d16
 857              	vTaskDelete:
 858              	.LFB8:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 859              		.loc 1 1163 0
 860              		.cfi_startproc
 861              		@ args = 0, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 863              	.LVL74:
 864 0000 38B5     		push	{r3, r4, r5, lr}
 865              	.LCFI9:
 866              		.cfi_def_cfa_offset 16
 867              		.cfi_offset 3, -16
 868              		.cfi_offset 4, -12
 869              		.cfi_offset 5, -8
 870              		.cfi_offset 14, -4
 871 0002 0446     		mov	r4, r0
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872              		.loc 1 1166 0
 873 0004 FFF7FEFF 		bl	vPortEnterCritical
 874              	.LVL75:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875              		.loc 1 1170 0
 876 0008 002C     		cmp	r4, #0
 877 000a 31D0     		beq	.L82
 878              	.LVL76:
 879              	.L73:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 880              		.loc 1 1173 0 discriminator 4
 881 000c 251D     		adds	r5, r4, #4
 882 000e 2846     		mov	r0, r5
 883 0010 FFF7FEFF 		bl	uxListRemove
 884              	.LVL77:
 885 0014 70B9     		cbnz	r0, .L74
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 114


 886              		.loc 1 1175 0
 887 0016 E26A     		ldr	r2, [r4, #44]
 888 0018 02EB8201 		add	r1, r2, r2, lsl #2
 889 001c 8B00     		lsls	r3, r1, #2
 890 001e 2549     		ldr	r1, .L85
 891 0020 CB58     		ldr	r3, [r1, r3]
 892 0022 3BB9     		cbnz	r3, .L74
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 893              		.loc 1 1175 0 is_stmt 0 discriminator 1
 894 0024 0123     		movs	r3, #1
 895 0026 03FA02F2 		lsl	r2, r3, r2
 896 002a 2349     		ldr	r1, .L85+4
 897 002c 0B68     		ldr	r3, [r1]
 898 002e 23EA0203 		bic	r3, r3, r2
 899 0032 0B60     		str	r3, [r1]
 900              	.L74:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 901              		.loc 1 1183 0 is_stmt 1
 902 0034 A36A     		ldr	r3, [r4, #40]
 903 0036 1BB1     		cbz	r3, .L75
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 904              		.loc 1 1185 0
 905 0038 04F11800 		add	r0, r4, #24
 906 003c FFF7FEFF 		bl	uxListRemove
 907              	.LVL78:
 908              	.L75:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 909              		.loc 1 1196 0
 910 0040 1E4A     		ldr	r2, .L85+8
 911 0042 1368     		ldr	r3, [r2]
 912 0044 0133     		adds	r3, r3, #1
 913 0046 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 914              		.loc 1 1198 0
 915 0048 1D4B     		ldr	r3, .L85+12
 916 004a 1B68     		ldr	r3, [r3]
 917 004c A342     		cmp	r3, r4
 918 004e 12D0     		beq	.L83
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 919              		.loc 1 1225 0
 920 0050 1C4A     		ldr	r2, .L85+16
 921 0052 1368     		ldr	r3, [r2]
 922 0054 013B     		subs	r3, r3, #1
 923 0056 1360     		str	r3, [r2]
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 924              		.loc 1 1231 0
 925 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 926              	.LVL79:
 927              	.L77:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928              		.loc 1 1234 0
 929 005c FFF7FEFF 		bl	vPortExitCritical
 930              	.LVL80:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 931              		.loc 1 1238 0
 932 0060 194B     		ldr	r3, .L85+20
 933 0062 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 115


 934 0064 1BB1     		cbz	r3, .L72
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 935              		.loc 1 1240 0
 936 0066 164B     		ldr	r3, .L85+12
 937 0068 1B68     		ldr	r3, [r3]
 938 006a A342     		cmp	r3, r4
 939 006c 0CD0     		beq	.L84
 940              	.L72:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941              		.loc 1 1250 0
 942 006e 38BD     		pop	{r3, r4, r5, pc}
 943              	.LVL81:
 944              	.L82:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945              		.loc 1 1170 0 discriminator 1
 946 0070 134B     		ldr	r3, .L85+12
 947 0072 1C68     		ldr	r4, [r3]
 948              	.LVL82:
 949 0074 CAE7     		b	.L73
 950              	.LVL83:
 951              	.L83:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952              		.loc 1 1205 0
 953 0076 2946     		mov	r1, r5
 954 0078 1448     		ldr	r0, .L85+24
 955 007a FFF7FEFF 		bl	vListInsertEnd
 956              	.LVL84:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 957              		.loc 1 1210 0
 958 007e 144A     		ldr	r2, .L85+28
 959 0080 1368     		ldr	r3, [r2]
 960 0082 0133     		adds	r3, r3, #1
 961 0084 1360     		str	r3, [r2]
 962 0086 E9E7     		b	.L77
 963              	.L84:
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 964              		.loc 1 1242 0
 965 0088 124B     		ldr	r3, .L85+32
 966 008a 1B68     		ldr	r3, [r3]
 967 008c 43B1     		cbz	r3, .L79
 968              	.LBB122:
 969              	.LBB123:
 970              		.loc 2 195 0
 971              		.syntax unified
 972              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 973 008e 4FF05003 			mov r3, #80												
 974 0092 83F31188 		msr basepri, r3											
 975 0096 BFF36F8F 		isb														
 976 009a BFF34F8F 		dsb														
 977              	
 978              	@ 0 "" 2
 979              	.LVL85:
 980              		.thumb
 981              		.syntax unified
 982              	.L80:
 983 009e FEE7     		b	.L80
 984              	.L79:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 116


 985              	.LBE123:
 986              	.LBE122:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987              		.loc 1 1243 0
 988 00a0 0D4B     		ldr	r3, .L85+36
 989 00a2 4FF08052 		mov	r2, #268435456
 990 00a6 1A60     		str	r2, [r3]
 991              		.syntax unified
 992              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 993 00a8 BFF34F8F 		dsb
 994              	@ 0 "" 2
 995              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 996 00ac BFF36F8F 		isb
 997              	@ 0 "" 2
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 998              		.loc 1 1250 0
 999              		.thumb
 1000              		.syntax unified
 1001 00b0 DDE7     		b	.L72
 1002              	.L86:
 1003 00b2 00BF     		.align	2
 1004              	.L85:
 1005 00b4 00000000 		.word	.LANCHOR4
 1006 00b8 00000000 		.word	.LANCHOR13
 1007 00bc 00000000 		.word	.LANCHOR12
 1008 00c0 00000000 		.word	.LANCHOR10
 1009 00c4 00000000 		.word	.LANCHOR9
 1010 00c8 00000000 		.word	.LANCHOR11
 1011 00cc 00000000 		.word	.LANCHOR7
 1012 00d0 00000000 		.word	.LANCHOR14
 1013 00d4 00000000 		.word	.LANCHOR16
 1014 00d8 04ED00E0 		.word	-536810236
 1015              		.cfi_endproc
 1016              	.LFE8:
 1018              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1019              		.align	1
 1020              		.global	uxTaskPriorityGet
 1021              		.syntax unified
 1022              		.thumb
 1023              		.thumb_func
 1024              		.fpu fpv4-sp-d16
 1026              	uxTaskPriorityGet:
 1027              	.LFB10:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1028              		.loc 1 1479 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 0
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 1032              	.LVL86:
 1033 0000 10B5     		push	{r4, lr}
 1034              	.LCFI10:
 1035              		.cfi_def_cfa_offset 8
 1036              		.cfi_offset 4, -8
 1037              		.cfi_offset 14, -4
 1038 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1039              		.loc 1 1483 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 117


 1040 0004 FFF7FEFF 		bl	vPortEnterCritical
 1041              	.LVL87:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1042              		.loc 1 1487 0
 1043 0008 24B1     		cbz	r4, .L90
 1044              	.LVL88:
 1045              	.L88:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1046              		.loc 1 1488 0 discriminator 4
 1047 000a E46A     		ldr	r4, [r4, #44]
 1048              	.LVL89:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1049              		.loc 1 1490 0 discriminator 4
 1050 000c FFF7FEFF 		bl	vPortExitCritical
 1051              	.LVL90:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1052              		.loc 1 1493 0 discriminator 4
 1053 0010 2046     		mov	r0, r4
 1054 0012 10BD     		pop	{r4, pc}
 1055              	.LVL91:
 1056              	.L90:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1057              		.loc 1 1487 0 discriminator 1
 1058 0014 014B     		ldr	r3, .L91
 1059 0016 1C68     		ldr	r4, [r3]
 1060              	.LVL92:
 1061 0018 F7E7     		b	.L88
 1062              	.L92:
 1063 001a 00BF     		.align	2
 1064              	.L91:
 1065 001c 00000000 		.word	.LANCHOR10
 1066              		.cfi_endproc
 1067              	.LFE10:
 1069              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1070              		.align	1
 1071              		.global	uxTaskPriorityGetFromISR
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv4-sp-d16
 1077              	uxTaskPriorityGetFromISR:
 1078              	.LFB11:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1079              		.loc 1 1501 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL93:
 1084 0000 10B5     		push	{r4, lr}
 1085              	.LCFI11:
 1086              		.cfi_def_cfa_offset 8
 1087              		.cfi_offset 4, -8
 1088              		.cfi_offset 14, -4
 1089 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1090              		.loc 1 1521 0
 1091 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 118


 1092              	.LVL94:
 1093              	.LBB124:
 1094              	.LBB125:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1095              		.loc 2 211 0
 1096              		.syntax unified
 1097              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1098 0008 EFF31183 			mrs r3, basepri											
 1099 000c 4FF05002 		mov r2, #80												
 1100 0010 82F31188 		msr basepri, r2											
 1101 0014 BFF36F8F 		isb														
 1102 0018 BFF34F8F 		dsb														
 1103              	
 1104              	@ 0 "" 2
 1105              		.thumb
 1106              		.syntax unified
 1107              	.LBE125:
 1108              	.LBE124:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1109              		.loc 1 1527 0
 1110 001c 1CB1     		cbz	r4, .L96
 1111              	.LVL95:
 1112              	.L94:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1113              		.loc 1 1528 0 discriminator 4
 1114 001e E06A     		ldr	r0, [r4, #44]
 1115              	.LVL96:
 1116              	.LBB126:
 1117              	.LBB127:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 119


 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1118              		.loc 2 229 0 discriminator 4
 1119              		.syntax unified
 1120              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1121 0020 83F31188 			msr basepri, r3	
 1122              	@ 0 "" 2
 1123              	.LVL97:
 1124              		.thumb
 1125              		.syntax unified
 1126              	.LBE127:
 1127              	.LBE126:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1128              		.loc 1 1533 0 discriminator 4
 1129 0024 10BD     		pop	{r4, pc}
 1130              	.LVL98:
 1131              	.L96:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1132              		.loc 1 1527 0 discriminator 1
 1133 0026 014A     		ldr	r2, .L97
 1134 0028 1468     		ldr	r4, [r2]
 1135              	.LVL99:
 1136 002a F8E7     		b	.L94
 1137              	.L98:
 1138              		.align	2
 1139              	.L97:
 1140 002c 00000000 		.word	.LANCHOR10
 1141              		.cfi_endproc
 1142              	.LFE11:
 1144              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1145              		.align	1
 1146              		.global	vTaskPrioritySet
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv4-sp-d16
 1152              	vTaskPrioritySet:
 1153              	.LFB12:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1154              		.loc 1 1541 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              	.LVL100:
 1159 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1160              	.LCFI12:
 1161              		.cfi_def_cfa_offset 24
 1162              		.cfi_offset 3, -24
 1163              		.cfi_offset 4, -20
 1164              		.cfi_offset 5, -16
 1165              		.cfi_offset 6, -12
 1166              		.cfi_offset 7, -8
 1167              		.cfi_offset 14, -4
 1168              	.LVL101:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 120


1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1169              		.loc 1 1546 0
 1170 0002 0629     		cmp	r1, #6
 1171 0004 08D9     		bls	.L100
 1172              	.LBB128:
 1173              	.LBB129:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1174              		.loc 2 195 0
 1175              		.syntax unified
 1176              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1177 0006 4FF05003 			mov r3, #80												
 1178 000a 83F31188 		msr basepri, r3											
 1179 000e BFF36F8F 		isb														
 1180 0012 BFF34F8F 		dsb														
 1181              	
 1182              	@ 0 "" 2
 1183              	.LVL102:
 1184              		.thumb
 1185              		.syntax unified
 1186              	.L101:
 1187 0016 FEE7     		b	.L101
 1188              	.L100:
 1189 0018 0446     		mov	r4, r0
 1190 001a 0D46     		mov	r5, r1
 1191              	.LVL103:
 1192              	.LBE129:
 1193              	.LBE128:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1194              		.loc 1 1558 0
 1195 001c FFF7FEFF 		bl	vPortEnterCritical
 1196              	.LVL104:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1197              		.loc 1 1562 0
 1198 0020 0CB9     		cbnz	r4, .L102
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1199              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1200 0022 2A4B     		ldr	r3, .L114
 1201 0024 1C68     		ldr	r4, [r3]
 1202              	.LVL105:
 1203              	.L102:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1204              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1205 0026 A36C     		ldr	r3, [r4, #72]
 1206              	.LVL106:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1207              		.loc 1 1576 0 discriminator 4
 1208 0028 9D42     		cmp	r5, r3
 1209 002a 40D0     		beq	.L103
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1210              		.loc 1 1580 0
 1211 002c 42D9     		bls	.L104
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1212              		.loc 1 1582 0
 1213 002e 274A     		ldr	r2, .L114
 1214 0030 1268     		ldr	r2, [r2]
 1215 0032 A242     		cmp	r2, r4
 1216 0034 44D0     		beq	.L110
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 121


1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1217              		.loc 1 1587 0
 1218 0036 254A     		ldr	r2, .L114
 1219 0038 1268     		ldr	r2, [r2]
 1220 003a D26A     		ldr	r2, [r2, #44]
 1221 003c AA42     		cmp	r2, r5
 1222 003e 41D9     		bls	.L111
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1223              		.loc 1 1544 0
 1224 0040 0026     		movs	r6, #0
 1225              	.L105:
 1226              	.LVL107:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1227              		.loc 1 1620 0
 1228 0042 E76A     		ldr	r7, [r4, #44]
 1229              	.LVL108:
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1230              		.loc 1 1626 0
 1231 0044 BB42     		cmp	r3, r7
 1232 0046 00D1     		bne	.L106
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1233              		.loc 1 1628 0
 1234 0048 E562     		str	r5, [r4, #44]
 1235              	.L106:
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1236              		.loc 1 1636 0
 1237 004a A564     		str	r5, [r4, #72]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1238              		.loc 1 1646 0
 1239 004c A369     		ldr	r3, [r4, #24]
 1240              	.LVL109:
 1241 004e 002B     		cmp	r3, #0
 1242 0050 02DB     		blt	.L107
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1243              		.loc 1 1648 0
 1244 0052 C5F10705 		rsb	r5, r5, #7
 1245              	.LVL110:
 1246 0056 A561     		str	r5, [r4, #24]
 1247              	.L107:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1248              		.loc 1 1659 0
 1249 0058 6269     		ldr	r2, [r4, #20]
 1250 005a 1D49     		ldr	r1, .L114+4
 1251 005c 1423     		movs	r3, #20
 1252 005e 03FB0713 		mla	r3, r3, r7, r1
 1253 0062 9A42     		cmp	r2, r3
 1254 0064 1AD1     		bne	.L108
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1255              		.loc 1 1664 0
 1256 0066 251D     		adds	r5, r4, #4
 1257 0068 2846     		mov	r0, r5
 1258 006a FFF7FEFF 		bl	uxListRemove
 1259              	.LVL111:
 1260 006e 38B9     		cbnz	r0, .L109
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1261              		.loc 1 1669 0
 1262 0070 0123     		movs	r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 122


 1263 0072 03FA07F2 		lsl	r2, r3, r7
 1264 0076 1749     		ldr	r1, .L114+8
 1265 0078 0B68     		ldr	r3, [r1]
 1266 007a 23EA0203 		bic	r3, r3, r2
 1267 007e 0B60     		str	r3, [r1]
 1268              	.L109:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1269              		.loc 1 1675 0
 1270 0080 E26A     		ldr	r2, [r4, #44]
 1271 0082 0123     		movs	r3, #1
 1272 0084 9340     		lsls	r3, r3, r2
 1273 0086 1349     		ldr	r1, .L114+8
 1274 0088 0868     		ldr	r0, [r1]
 1275 008a 0343     		orrs	r3, r3, r0
 1276 008c 0B60     		str	r3, [r1]
 1277 008e 2946     		mov	r1, r5
 1278 0090 0F4B     		ldr	r3, .L114+4
 1279 0092 1420     		movs	r0, #20
 1280 0094 00FB0230 		mla	r0, r0, r2, r3
 1281 0098 FFF7FEFF 		bl	vListInsertEnd
 1282              	.LVL112:
 1283              	.L108:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1284              		.loc 1 1682 0
 1285 009c 3EB1     		cbz	r6, .L103
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1286              		.loc 1 1684 0
 1287 009e 0E4B     		ldr	r3, .L114+12
 1288 00a0 4FF08052 		mov	r2, #268435456
 1289 00a4 1A60     		str	r2, [r3]
 1290              		.syntax unified
 1291              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1292 00a6 BFF34F8F 		dsb
 1293              	@ 0 "" 2
 1294              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1295 00aa BFF36F8F 		isb
 1296              	@ 0 "" 2
 1297              	.LVL113:
 1298              		.thumb
 1299              		.syntax unified
 1300              	.L103:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1301              		.loc 1 1696 0
 1302 00ae FFF7FEFF 		bl	vPortExitCritical
 1303              	.LVL114:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1304              		.loc 1 1697 0
 1305 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1306              	.LVL115:
 1307              	.L104:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1308              		.loc 1 1603 0
 1309 00b4 054A     		ldr	r2, .L114
 1310 00b6 1268     		ldr	r2, [r2]
 1311 00b8 A242     		cmp	r2, r4
 1312 00ba 05D0     		beq	.L112
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 123


 1313              		.loc 1 1544 0
 1314 00bc 0026     		movs	r6, #0
 1315 00be C0E7     		b	.L105
 1316              	.L110:
 1317 00c0 0026     		movs	r6, #0
 1318 00c2 BEE7     		b	.L105
 1319              	.L111:
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1320              		.loc 1 1589 0
 1321 00c4 0126     		movs	r6, #1
 1322 00c6 BCE7     		b	.L105
 1323              	.L112:
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1324              		.loc 1 1608 0
 1325 00c8 0126     		movs	r6, #1
 1326 00ca BAE7     		b	.L105
 1327              	.L115:
 1328              		.align	2
 1329              	.L114:
 1330 00cc 00000000 		.word	.LANCHOR10
 1331 00d0 00000000 		.word	.LANCHOR4
 1332 00d4 00000000 		.word	.LANCHOR13
 1333 00d8 04ED00E0 		.word	-536810236
 1334              		.cfi_endproc
 1335              	.LFE12:
 1337              		.section	.text.vTaskResume,"ax",%progbits
 1338              		.align	1
 1339              		.global	vTaskResume
 1340              		.syntax unified
 1341              		.thumb
 1342              		.thumb_func
 1343              		.fpu fpv4-sp-d16
 1345              	vTaskResume:
 1346              	.LFB15:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1347              		.loc 1 1852 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 0
 1350              		@ frame_needed = 0, uses_anonymous_args = 0
 1351              	.LVL116:
 1352 0000 38B5     		push	{r3, r4, r5, lr}
 1353              	.LCFI13:
 1354              		.cfi_def_cfa_offset 16
 1355              		.cfi_offset 3, -16
 1356              		.cfi_offset 4, -12
 1357              		.cfi_offset 5, -8
 1358              		.cfi_offset 14, -4
 1359              	.LVL117:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1360              		.loc 1 1856 0
 1361 0002 68B1     		cbz	r0, .L122
 1362 0004 0446     		mov	r4, r0
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1363              		.loc 1 1860 0
 1364 0006 1B4B     		ldr	r3, .L124
 1365 0008 1B68     		ldr	r3, [r3]
 1366 000a 8342     		cmp	r3, r0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 124


 1367 000c 07D0     		beq	.L116
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1368              		.loc 1 1862 0
 1369 000e FFF7FEFF 		bl	vPortEnterCritical
 1370              	.LVL118:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1371              		.loc 1 1864 0
 1372 0012 2046     		mov	r0, r4
 1373 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1374              	.LVL119:
 1375 0018 58B9     		cbnz	r0, .L123
 1376              	.L120:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1377              		.loc 1 1891 0
 1378 001a FFF7FEFF 		bl	vPortExitCritical
 1379              	.LVL120:
 1380              	.L116:
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1381              		.loc 1 1897 0
 1382 001e 38BD     		pop	{r3, r4, r5, pc}
 1383              	.LVL121:
 1384              	.L122:
 1385              	.LBB130:
 1386              	.LBB131:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1387              		.loc 2 195 0
 1388              		.syntax unified
 1389              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1390 0020 4FF05003 			mov r3, #80												
 1391 0024 83F31188 		msr basepri, r3											
 1392 0028 BFF36F8F 		isb														
 1393 002c BFF34F8F 		dsb														
 1394              	
 1395              	@ 0 "" 2
 1396              	.LVL122:
 1397              		.thumb
 1398              		.syntax unified
 1399              	.L118:
 1400 0030 FEE7     		b	.L118
 1401              	.LVL123:
 1402              	.L123:
 1403              	.LBE131:
 1404              	.LBE130:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1405              		.loc 1 1870 0
 1406 0032 251D     		adds	r5, r4, #4
 1407 0034 2846     		mov	r0, r5
 1408 0036 FFF7FEFF 		bl	uxListRemove
 1409              	.LVL124:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1410              		.loc 1 1871 0
 1411 003a E26A     		ldr	r2, [r4, #44]
 1412 003c 0123     		movs	r3, #1
 1413 003e 9340     		lsls	r3, r3, r2
 1414 0040 0D49     		ldr	r1, .L124+4
 1415 0042 0868     		ldr	r0, [r1]
 1416 0044 0343     		orrs	r3, r3, r0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 125


 1417 0046 0B60     		str	r3, [r1]
 1418 0048 2946     		mov	r1, r5
 1419 004a 0C4B     		ldr	r3, .L124+8
 1420 004c 1420     		movs	r0, #20
 1421 004e 00FB0230 		mla	r0, r0, r2, r3
 1422 0052 FFF7FEFF 		bl	vListInsertEnd
 1423              	.LVL125:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1424              		.loc 1 1874 0
 1425 0056 E26A     		ldr	r2, [r4, #44]
 1426 0058 064B     		ldr	r3, .L124
 1427 005a 1B68     		ldr	r3, [r3]
 1428 005c DB6A     		ldr	r3, [r3, #44]
 1429 005e 9A42     		cmp	r2, r3
 1430 0060 DBD3     		bcc	.L120
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1431              		.loc 1 1879 0
 1432 0062 074B     		ldr	r3, .L124+12
 1433 0064 4FF08052 		mov	r2, #268435456
 1434 0068 1A60     		str	r2, [r3]
 1435              		.syntax unified
 1436              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1437 006a BFF34F8F 		dsb
 1438              	@ 0 "" 2
 1439              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1440 006e BFF36F8F 		isb
 1441              	@ 0 "" 2
 1442              		.thumb
 1443              		.syntax unified
 1444 0072 D2E7     		b	.L120
 1445              	.L125:
 1446              		.align	2
 1447              	.L124:
 1448 0074 00000000 		.word	.LANCHOR10
 1449 0078 00000000 		.word	.LANCHOR13
 1450 007c 00000000 		.word	.LANCHOR4
 1451 0080 04ED00E0 		.word	-536810236
 1452              		.cfi_endproc
 1453              	.LFE15:
 1455              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1456              		.align	1
 1457              		.global	xTaskResumeFromISR
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	xTaskResumeFromISR:
 1464              	.LFB16:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1465              		.loc 1 1906 0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 0
 1468              		@ frame_needed = 0, uses_anonymous_args = 0
 1469              	.LVL126:
 1470 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1471              	.LCFI14:
 1472              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 126


 1473              		.cfi_offset 3, -24
 1474              		.cfi_offset 4, -20
 1475              		.cfi_offset 5, -16
 1476              		.cfi_offset 6, -12
 1477              		.cfi_offset 7, -8
 1478              		.cfi_offset 14, -4
 1479              	.LVL127:
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1480              		.loc 1 1911 0
 1481 0002 40B9     		cbnz	r0, .L127
 1482              	.LBB132:
 1483              	.LBB133:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1484              		.loc 2 195 0
 1485              		.syntax unified
 1486              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1487 0004 4FF05003 			mov r3, #80												
 1488 0008 83F31188 		msr basepri, r3											
 1489 000c BFF36F8F 		isb														
 1490 0010 BFF34F8F 		dsb														
 1491              	
 1492              	@ 0 "" 2
 1493              	.LVL128:
 1494              		.thumb
 1495              		.syntax unified
 1496              	.L128:
 1497 0014 FEE7     		b	.L128
 1498              	.L127:
 1499 0016 0446     		mov	r4, r0
 1500              	.LBE133:
 1501              	.LBE132:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1502              		.loc 1 1929 0
 1503 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1504              	.LVL129:
 1505              	.LBB134:
 1506              	.LBB135:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1507              		.loc 2 211 0
 1508              		.syntax unified
 1509              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1510 001c EFF31187 			mrs r7, basepri											
 1511 0020 4FF05003 		mov r3, #80												
 1512 0024 83F31188 		msr basepri, r3											
 1513 0028 BFF36F8F 		isb														
 1514 002c BFF34F8F 		dsb														
 1515              	
 1516              	@ 0 "" 2
 1517              		.thumb
 1518              		.syntax unified
 1519              	.LBE135:
 1520              	.LBE134:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1521              		.loc 1 1933 0
 1522 0030 2046     		mov	r0, r4
 1523 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1524              	.LVL130:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 127


 1525 0036 40B3     		cbz	r0, .L132
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1526              		.loc 1 1938 0
 1527 0038 154B     		ldr	r3, .L135
 1528 003a 1B68     		ldr	r3, [r3]
 1529 003c F3B9     		cbnz	r3, .L130
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1530              		.loc 1 1942 0
 1531 003e E26A     		ldr	r2, [r4, #44]
 1532 0040 144B     		ldr	r3, .L135+4
 1533 0042 1B68     		ldr	r3, [r3]
 1534 0044 DB6A     		ldr	r3, [r3, #44]
 1535 0046 9A42     		cmp	r2, r3
 1536 0048 16D2     		bcs	.L133
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1537              		.loc 1 1907 0
 1538 004a 0025     		movs	r5, #0
 1539              	.L131:
 1540              	.LVL131:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1541              		.loc 1 1951 0
 1542 004c 261D     		adds	r6, r4, #4
 1543 004e 3046     		mov	r0, r6
 1544 0050 FFF7FEFF 		bl	uxListRemove
 1545              	.LVL132:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1546              		.loc 1 1952 0
 1547 0054 E26A     		ldr	r2, [r4, #44]
 1548 0056 0123     		movs	r3, #1
 1549 0058 9340     		lsls	r3, r3, r2
 1550 005a 0F49     		ldr	r1, .L135+8
 1551 005c 0868     		ldr	r0, [r1]
 1552 005e 0343     		orrs	r3, r3, r0
 1553 0060 0B60     		str	r3, [r1]
 1554 0062 3146     		mov	r1, r6
 1555 0064 0D4B     		ldr	r3, .L135+12
 1556 0066 1420     		movs	r0, #20
 1557 0068 00FB0230 		mla	r0, r0, r2, r3
 1558 006c FFF7FEFF 		bl	vListInsertEnd
 1559              	.LVL133:
 1560              	.L129:
 1561              	.LBB136:
 1562              	.LBB137:
 1563              		.loc 2 229 0
 1564              		.syntax unified
 1565              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1566 0070 87F31188 			msr basepri, r7	
 1567              	@ 0 "" 2
 1568              	.LVL134:
 1569              		.thumb
 1570              		.syntax unified
 1571              	.LBE137:
 1572              	.LBE136:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1573              		.loc 1 1970 0
 1574 0074 2846     		mov	r0, r5
 1575 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 128


 1576              	.LVL135:
 1577              	.L133:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1578              		.loc 1 1944 0
 1579 0078 0125     		movs	r5, #1
 1580 007a E7E7     		b	.L131
 1581              	.L130:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1582              		.loc 1 1959 0
 1583 007c 04F11801 		add	r1, r4, #24
 1584 0080 0748     		ldr	r0, .L135+16
 1585 0082 FFF7FEFF 		bl	vListInsertEnd
 1586              	.LVL136:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1587              		.loc 1 1907 0
 1588 0086 0025     		movs	r5, #0
 1589 0088 F2E7     		b	.L129
 1590              	.L132:
 1591 008a 0025     		movs	r5, #0
 1592 008c F0E7     		b	.L129
 1593              	.L136:
 1594 008e 00BF     		.align	2
 1595              	.L135:
 1596 0090 00000000 		.word	.LANCHOR16
 1597 0094 00000000 		.word	.LANCHOR10
 1598 0098 00000000 		.word	.LANCHOR13
 1599 009c 00000000 		.word	.LANCHOR4
 1600 00a0 00000000 		.word	.LANCHOR1
 1601              		.cfi_endproc
 1602              	.LFE16:
 1604              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1605              		.align	1
 1606              		.global	vTaskStartScheduler
 1607              		.syntax unified
 1608              		.thumb
 1609              		.thumb_func
 1610              		.fpu fpv4-sp-d16
 1612              	vTaskStartScheduler:
 1613              	.LFB17:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1614              		.loc 1 1976 0
 1615              		.cfi_startproc
 1616              		@ args = 0, pretend = 0, frame = 16
 1617              		@ frame_needed = 0, uses_anonymous_args = 0
 1618 0000 10B5     		push	{r4, lr}
 1619              	.LCFI15:
 1620              		.cfi_def_cfa_offset 8
 1621              		.cfi_offset 4, -8
 1622              		.cfi_offset 14, -4
 1623 0002 88B0     		sub	sp, sp, #32
 1624              	.LCFI16:
 1625              		.cfi_def_cfa_offset 40
 1626              	.LBB138:
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1627              		.loc 1 1982 0
 1628 0004 0024     		movs	r4, #0
 1629 0006 0594     		str	r4, [sp, #20]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 129


1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1630              		.loc 1 1983 0
 1631 0008 0694     		str	r4, [sp, #24]
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1632              		.loc 1 1988 0
 1633 000a 07AA     		add	r2, sp, #28
 1634 000c 06A9     		add	r1, sp, #24
 1635 000e 05A8     		add	r0, sp, #20
 1636 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1637              	.LVL137:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1638              		.loc 1 1989 0
 1639 0014 059B     		ldr	r3, [sp, #20]
 1640 0016 0293     		str	r3, [sp, #8]
 1641 0018 069B     		ldr	r3, [sp, #24]
 1642 001a 0193     		str	r3, [sp, #4]
 1643 001c 0094     		str	r4, [sp]
 1644 001e 2346     		mov	r3, r4
 1645 0020 079A     		ldr	r2, [sp, #28]
 1646 0022 0D49     		ldr	r1, .L142
 1647 0024 0D48     		ldr	r0, .L142+4
 1648 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1649              	.LVL138:
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1650              		.loc 1 1997 0
 1651 002a 08B9     		cbnz	r0, .L141
 1652              	.L137:
 1653              	.LBE138:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1654              		.loc 1 2096 0
 1655 002c 08B0     		add	sp, sp, #32
 1656              	.LCFI17:
 1657              		.cfi_remember_state
 1658              		.cfi_def_cfa_offset 8
 1659              		@ sp needed
 1660 002e 10BD     		pop	{r4, pc}
 1661              	.L141:
 1662              	.LCFI18:
 1663              		.cfi_restore_state
 1664              	.LVL139:
 1665              	.LBB139:
 1666              	.LBB140:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1667              		.loc 2 195 0
 1668              		.syntax unified
 1669              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1670 0030 4FF05003 			mov r3, #80												
 1671 0034 83F31188 		msr basepri, r3											
 1672 0038 BFF36F8F 		isb														
 1673 003c BFF34F8F 		dsb														
 1674              	
 1675              	@ 0 "" 2
 1676              		.thumb
 1677              		.syntax unified
 1678              	.LBE140:
 1679              	.LBE139:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 130


 1680              		.loc 1 2059 0
 1681 0040 074B     		ldr	r3, .L142+8
 1682 0042 4FF0FF32 		mov	r2, #-1
 1683 0046 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1684              		.loc 1 2060 0
 1685 0048 064B     		ldr	r3, .L142+12
 1686 004a 0122     		movs	r2, #1
 1687 004c 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1688              		.loc 1 2061 0
 1689 004e 064B     		ldr	r3, .L142+16
 1690 0050 1C60     		str	r4, [r3]
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1691              		.loc 1 2075 0
 1692 0052 FFF7FEFF 		bl	xPortStartScheduler
 1693              	.LVL140:
 1694 0056 E9E7     		b	.L137
 1695              	.L143:
 1696              		.align	2
 1697              	.L142:
 1698 0058 00000000 		.word	.LC0
 1699 005c 00000000 		.word	prvIdleTask
 1700 0060 00000000 		.word	.LANCHOR3
 1701 0064 00000000 		.word	.LANCHOR11
 1702 0068 00000000 		.word	.LANCHOR15
 1703              		.cfi_endproc
 1704              	.LFE17:
 1706              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1707              		.align	1
 1708              		.global	vTaskEndScheduler
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1712              		.fpu fpv4-sp-d16
 1714              	vTaskEndScheduler:
 1715              	.LFB18:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1716              		.loc 1 2100 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720 0000 08B5     		push	{r3, lr}
 1721              	.LCFI19:
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 3, -8
 1724              		.cfi_offset 14, -4
 1725              	.LBB141:
 1726              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1727              		.loc 2 195 0
 1728              		.syntax unified
 1729              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1730 0002 4FF05003 			mov r3, #80												
 1731 0006 83F31188 		msr basepri, r3											
 1732 000a BFF36F8F 		isb														
 1733 000e BFF34F8F 		dsb														
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 131


 1734              	
 1735              	@ 0 "" 2
 1736              		.thumb
 1737              		.syntax unified
 1738              	.LBE142:
 1739              	.LBE141:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1740              		.loc 1 2105 0
 1741 0012 034B     		ldr	r3, .L146
 1742 0014 0022     		movs	r2, #0
 1743 0016 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1744              		.loc 1 2106 0
 1745 0018 FFF7FEFF 		bl	vPortEndScheduler
 1746              	.LVL141:
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1747              		.loc 1 2107 0
 1748 001c 08BD     		pop	{r3, pc}
 1749              	.L147:
 1750 001e 00BF     		.align	2
 1751              	.L146:
 1752 0020 00000000 		.word	.LANCHOR11
 1753              		.cfi_endproc
 1754              	.LFE18:
 1756              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1757              		.align	1
 1758              		.global	vTaskSuspendAll
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
 1762              		.fpu fpv4-sp-d16
 1764              	vTaskSuspendAll:
 1765              	.LFB19:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1766              		.loc 1 2111 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1771              		.loc 1 2123 0
 1772 0000 024A     		ldr	r2, .L149
 1773 0002 1368     		ldr	r3, [r2]
 1774 0004 0133     		adds	r3, r3, #1
 1775 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1776              		.loc 1 2127 0
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1777              		.loc 1 2128 0
 1778 0008 7047     		bx	lr
 1779              	.L150:
 1780 000a 00BF     		.align	2
 1781              	.L149:
 1782 000c 00000000 		.word	.LANCHOR16
 1783              		.cfi_endproc
 1784              	.LFE19:
 1786              		.section	.text.xTaskGetTickCount,"ax",%progbits
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 132


 1787              		.align	1
 1788              		.global	xTaskGetTickCount
 1789              		.syntax unified
 1790              		.thumb
 1791              		.thumb_func
 1792              		.fpu fpv4-sp-d16
 1794              	xTaskGetTickCount:
 1795              	.LFB21:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1796              		.loc 1 2305 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 0, uses_anonymous_args = 0
 1800              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1801              		.loc 1 2311 0
 1802 0000 014B     		ldr	r3, .L152
 1803 0002 1868     		ldr	r0, [r3]
 1804              	.LVL142:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1805              		.loc 1 2316 0
 1806 0004 7047     		bx	lr
 1807              	.L153:
 1808 0006 00BF     		.align	2
 1809              	.L152:
 1810 0008 00000000 		.word	.LANCHOR15
 1811              		.cfi_endproc
 1812              	.LFE21:
 1814              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1815              		.align	1
 1816              		.global	xTaskGetTickCountFromISR
 1817              		.syntax unified
 1818              		.thumb
 1819              		.thumb_func
 1820              		.fpu fpv4-sp-d16
 1822              	xTaskGetTickCountFromISR:
 1823              	.LFB22:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1824              		.loc 1 2320 0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 1828 0000 08B5     		push	{r3, lr}
 1829              	.LCFI20:
 1830              		.cfi_def_cfa_offset 8
 1831              		.cfi_offset 3, -8
 1832              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1833              		.loc 1 2338 0
 1834 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1835              	.LVL143:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1836              		.loc 1 2342 0
 1837 0006 014B     		ldr	r3, .L156
 1838 0008 1868     		ldr	r0, [r3]
 1839              	.LVL144:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 133


 1840              		.loc 1 2347 0
 1841 000a 08BD     		pop	{r3, pc}
 1842              	.L157:
 1843              		.align	2
 1844              	.L156:
 1845 000c 00000000 		.word	.LANCHOR15
 1846              		.cfi_endproc
 1847              	.LFE22:
 1849              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1850              		.align	1
 1851              		.global	uxTaskGetNumberOfTasks
 1852              		.syntax unified
 1853              		.thumb
 1854              		.thumb_func
 1855              		.fpu fpv4-sp-d16
 1857              	uxTaskGetNumberOfTasks:
 1858              	.LFB23:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1859              		.loc 1 2351 0
 1860              		.cfi_startproc
 1861              		@ args = 0, pretend = 0, frame = 0
 1862              		@ frame_needed = 0, uses_anonymous_args = 0
 1863              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1864              		.loc 1 2354 0
 1865 0000 014B     		ldr	r3, .L159
 1866 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1867              		.loc 1 2355 0
 1868 0004 7047     		bx	lr
 1869              	.L160:
 1870 0006 00BF     		.align	2
 1871              	.L159:
 1872 0008 00000000 		.word	.LANCHOR9
 1873              		.cfi_endproc
 1874              	.LFE23:
 1876              		.section	.text.pcTaskGetName,"ax",%progbits
 1877              		.align	1
 1878              		.global	pcTaskGetName
 1879              		.syntax unified
 1880              		.thumb
 1881              		.thumb_func
 1882              		.fpu fpv4-sp-d16
 1884              	pcTaskGetName:
 1885              	.LFB24:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1886              		.loc 1 2359 0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890              		@ link register save eliminated.
 1891              	.LVL145:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1892              		.loc 1 2364 0
 1893 0000 0346     		mov	r3, r0
 1894 0002 18B1     		cbz	r0, .L165
 1895              	.LVL146:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 134


 1896              	.L162:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1897              		.loc 1 2365 0 discriminator 4
 1898 0004 2BB1     		cbz	r3, .L166
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1899              		.loc 1 2367 0
 1900 0006 03F13400 		add	r0, r3, #52
 1901 000a 7047     		bx	lr
 1902              	.LVL147:
 1903              	.L165:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1904              		.loc 1 2364 0 discriminator 1
 1905 000c 054B     		ldr	r3, .L167
 1906 000e 1B68     		ldr	r3, [r3]
 1907              	.LVL148:
 1908 0010 F8E7     		b	.L162
 1909              	.LVL149:
 1910              	.L166:
 1911              	.LBB143:
 1912              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1913              		.loc 2 195 0
 1914              		.syntax unified
 1915              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1916 0012 4FF05003 			mov r3, #80												
 1917 0016 83F31188 		msr basepri, r3											
 1918 001a BFF36F8F 		isb														
 1919 001e BFF34F8F 		dsb														
 1920              	
 1921              	@ 0 "" 2
 1922              	.LVL150:
 1923              		.thumb
 1924              		.syntax unified
 1925              	.L164:
 1926 0022 FEE7     		b	.L164
 1927              	.L168:
 1928              		.align	2
 1929              	.L167:
 1930 0024 00000000 		.word	.LANCHOR10
 1931              	.LBE144:
 1932              	.LBE143:
 1933              		.cfi_endproc
 1934              	.LFE24:
 1936              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1937              		.align	1
 1938              		.global	xTaskIncrementTick
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	xTaskIncrementTick:
 1945              	.LFB26:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 1946              		.loc 1 2708 0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 135


 1950 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1951              	.LCFI21:
 1952              		.cfi_def_cfa_offset 24
 1953              		.cfi_offset 3, -24
 1954              		.cfi_offset 4, -20
 1955              		.cfi_offset 5, -16
 1956              		.cfi_offset 6, -12
 1957              		.cfi_offset 7, -8
 1958              		.cfi_offset 14, -4
 1959              	.LVL151:
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1960              		.loc 1 2717 0
 1961 0002 3A4B     		ldr	r3, .L190
 1962 0004 1B68     		ldr	r3, [r3]
 1963 0006 002B     		cmp	r3, #0
 1964 0008 69D1     		bne	.L170
 1965              	.LBB145:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1966              		.loc 1 2721 0
 1967 000a 394B     		ldr	r3, .L190+4
 1968 000c 1D68     		ldr	r5, [r3]
 1969 000e 0135     		adds	r5, r5, #1
 1970              	.LVL152:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1971              		.loc 1 2725 0
 1972 0010 1D60     		str	r5, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1973              		.loc 1 2727 0
 1974 0012 C5B9     		cbnz	r5, .L171
 1975              	.LBB146:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1976              		.loc 1 2729 0
 1977 0014 374B     		ldr	r3, .L190+8
 1978 0016 1B68     		ldr	r3, [r3]
 1979 0018 1B68     		ldr	r3, [r3]
 1980 001a 43B1     		cbz	r3, .L172
 1981              	.LBB147:
 1982              	.LBB148:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1983              		.loc 2 195 0
 1984              		.syntax unified
 1985              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1986 001c 4FF05003 			mov r3, #80												
 1987 0020 83F31188 		msr basepri, r3											
 1988 0024 BFF36F8F 		isb														
 1989 0028 BFF34F8F 		dsb														
 1990              	
 1991              	@ 0 "" 2
 1992              	.LVL153:
 1993              		.thumb
 1994              		.syntax unified
 1995              	.L173:
 1996 002c FEE7     		b	.L173
 1997              	.L172:
 1998              	.LBE148:
 1999              	.LBE147:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 136


 2000              		.loc 1 2729 0 discriminator 2
 2001 002e 314A     		ldr	r2, .L190+8
 2002 0030 1168     		ldr	r1, [r2]
 2003              	.LVL154:
 2004 0032 314B     		ldr	r3, .L190+12
 2005 0034 1868     		ldr	r0, [r3]
 2006 0036 1060     		str	r0, [r2]
 2007 0038 1960     		str	r1, [r3]
 2008 003a 304A     		ldr	r2, .L190+16
 2009 003c 1368     		ldr	r3, [r2]
 2010 003e 0133     		adds	r3, r3, #1
 2011 0040 1360     		str	r3, [r2]
 2012 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2013              	.LVL155:
 2014              	.L171:
 2015              	.LBE146:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2016              		.loc 1 2740 0
 2017 0046 2E4B     		ldr	r3, .L190+20
 2018 0048 1B68     		ldr	r3, [r3]
 2019 004a AB42     		cmp	r3, r5
 2020 004c 3DD9     		bls	.L183
 2021              	.LBE145:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2022              		.loc 1 2711 0
 2023 004e 0024     		movs	r4, #0
 2024              	.LVL156:
 2025              	.L175:
 2026              	.LBB149:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2027              		.loc 1 2823 0
 2028 0050 2C4B     		ldr	r3, .L190+24
 2029 0052 1B68     		ldr	r3, [r3]
 2030 0054 DB6A     		ldr	r3, [r3, #44]
 2031 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2032 005a 9A00     		lsls	r2, r3, #2
 2033 005c 2A4B     		ldr	r3, .L190+28
 2034 005e 9B58     		ldr	r3, [r3, r2]
 2035 0060 012B     		cmp	r3, #1
 2036 0062 00D9     		bls	.L181
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2037              		.loc 1 2825 0
 2038 0064 0124     		movs	r4, #1
 2039              	.LVL157:
 2040              	.L181:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2041              		.loc 1 2851 0
 2042 0066 294B     		ldr	r3, .L190+32
 2043 0068 1B68     		ldr	r3, [r3]
 2044 006a 002B     		cmp	r3, #0
 2045 006c 3CD0     		beq	.L169
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2046              		.loc 1 2853 0
 2047 006e 0124     		movs	r4, #1
 2048              	.LVL158:
 2049              	.LBE149:
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 137


 2050              		.loc 1 2875 0
 2051 0070 3AE0     		b	.L169
 2052              	.LVL159:
 2053              	.L184:
 2054              	.LBB150:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2055              		.loc 1 2806 0
 2056 0072 0124     		movs	r4, #1
 2057              	.LVL160:
 2058              	.L174:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2059              		.loc 1 2744 0
 2060 0074 1F4B     		ldr	r3, .L190+8
 2061 0076 1B68     		ldr	r3, [r3]
 2062 0078 1B68     		ldr	r3, [r3]
 2063 007a 43B3     		cbz	r3, .L188
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2064              		.loc 1 2760 0
 2065 007c 1D4B     		ldr	r3, .L190+8
 2066 007e 1B68     		ldr	r3, [r3]
 2067 0080 DB68     		ldr	r3, [r3, #12]
 2068 0082 DE68     		ldr	r6, [r3, #12]
 2069              	.LVL161:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2070              		.loc 1 2761 0
 2071 0084 7368     		ldr	r3, [r6, #4]
 2072              	.LVL162:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2073              		.loc 1 2763 0
 2074 0086 9D42     		cmp	r5, r3
 2075 0088 26D3     		bcc	.L189
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2076              		.loc 1 2779 0
 2077 008a 371D     		adds	r7, r6, #4
 2078 008c 3846     		mov	r0, r7
 2079 008e FFF7FEFF 		bl	uxListRemove
 2080              	.LVL163:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2081              		.loc 1 2783 0
 2082 0092 B36A     		ldr	r3, [r6, #40]
 2083 0094 1BB1     		cbz	r3, .L178
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2084              		.loc 1 2785 0
 2085 0096 06F11800 		add	r0, r6, #24
 2086 009a FFF7FEFF 		bl	uxListRemove
 2087              	.LVL164:
 2088              	.L178:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2089              		.loc 1 2794 0
 2090 009e F36A     		ldr	r3, [r6, #44]
 2091 00a0 0122     		movs	r2, #1
 2092 00a2 9A40     		lsls	r2, r2, r3
 2093 00a4 1A49     		ldr	r1, .L190+36
 2094 00a6 0868     		ldr	r0, [r1]
 2095 00a8 0243     		orrs	r2, r2, r0
 2096 00aa 0A60     		str	r2, [r1]
 2097 00ac 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 138


 2098 00b0 9A00     		lsls	r2, r3, #2
 2099 00b2 3946     		mov	r1, r7
 2100 00b4 1448     		ldr	r0, .L190+28
 2101 00b6 1044     		add	r0, r0, r2
 2102 00b8 FFF7FEFF 		bl	vListInsertEnd
 2103              	.LVL165:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2104              		.loc 1 2804 0
 2105 00bc F26A     		ldr	r2, [r6, #44]
 2106 00be 114B     		ldr	r3, .L190+24
 2107 00c0 1B68     		ldr	r3, [r3]
 2108 00c2 DB6A     		ldr	r3, [r3, #44]
 2109 00c4 9A42     		cmp	r2, r3
 2110 00c6 D4D2     		bcs	.L184
 2111 00c8 D4E7     		b	.L174
 2112              	.LVL166:
 2113              	.L183:
 2114              	.LBE150:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2115              		.loc 1 2711 0
 2116 00ca 0024     		movs	r4, #0
 2117 00cc D2E7     		b	.L174
 2118              	.LVL167:
 2119              	.L188:
 2120              	.LBB151:
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2121              		.loc 1 2751 0
 2122 00ce 0C4B     		ldr	r3, .L190+20
 2123 00d0 4FF0FF32 		mov	r2, #-1
 2124 00d4 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2125              		.loc 1 2752 0
 2126 00d6 BBE7     		b	.L175
 2127              	.LVL168:
 2128              	.L189:
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2129              		.loc 1 2770 0
 2130 00d8 094A     		ldr	r2, .L190+20
 2131 00da 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2132              		.loc 1 2771 0
 2133 00dc B8E7     		b	.L175
 2134              	.LVL169:
 2135              	.L170:
 2136              	.LBE151:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2137              		.loc 1 2864 0
 2138 00de 0D4A     		ldr	r2, .L190+40
 2139 00e0 1368     		ldr	r3, [r2]
 2140 00e2 0133     		adds	r3, r3, #1
 2141 00e4 1360     		str	r3, [r2]
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2142              		.loc 1 2711 0
 2143 00e6 0024     		movs	r4, #0
 2144              	.LVL170:
 2145              	.L169:
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 139


 2146              		.loc 1 2876 0
 2147 00e8 2046     		mov	r0, r4
 2148 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2149              	.L191:
 2150              		.align	2
 2151              	.L190:
 2152 00ec 00000000 		.word	.LANCHOR16
 2153 00f0 00000000 		.word	.LANCHOR15
 2154 00f4 00000000 		.word	.LANCHOR2
 2155 00f8 00000000 		.word	.LANCHOR8
 2156 00fc 00000000 		.word	.LANCHOR17
 2157 0100 00000000 		.word	.LANCHOR3
 2158 0104 00000000 		.word	.LANCHOR10
 2159 0108 00000000 		.word	.LANCHOR4
 2160 010c 00000000 		.word	.LANCHOR18
 2161 0110 00000000 		.word	.LANCHOR13
 2162 0114 00000000 		.word	.LANCHOR19
 2163              		.cfi_endproc
 2164              	.LFE26:
 2166              		.section	.text.xTaskResumeAll,"ax",%progbits
 2167              		.align	1
 2168              		.global	xTaskResumeAll
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu fpv4-sp-d16
 2174              	xTaskResumeAll:
 2175              	.LFB20:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2176              		.loc 1 2195 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180 0000 38B5     		push	{r3, r4, r5, lr}
 2181              	.LCFI22:
 2182              		.cfi_def_cfa_offset 16
 2183              		.cfi_offset 3, -16
 2184              		.cfi_offset 4, -12
 2185              		.cfi_offset 5, -8
 2186              		.cfi_offset 14, -4
 2187              	.LVL171:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2188              		.loc 1 2201 0
 2189 0002 334B     		ldr	r3, .L208
 2190 0004 1B68     		ldr	r3, [r3]
 2191 0006 43B9     		cbnz	r3, .L193
 2192              	.LBB152:
 2193              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2194              		.loc 2 195 0
 2195              		.syntax unified
 2196              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2197 0008 4FF05003 			mov r3, #80												
 2198 000c 83F31188 		msr basepri, r3											
 2199 0010 BFF36F8F 		isb														
 2200 0014 BFF34F8F 		dsb														
 2201              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 140


 2202              	@ 0 "" 2
 2203              	.LVL172:
 2204              		.thumb
 2205              		.syntax unified
 2206              	.L194:
 2207 0018 FEE7     		b	.L194
 2208              	.L193:
 2209              	.LBE153:
 2210              	.LBE152:
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2211              		.loc 1 2208 0
 2212 001a FFF7FEFF 		bl	vPortEnterCritical
 2213              	.LVL173:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2214              		.loc 1 2210 0
 2215 001e 2C4B     		ldr	r3, .L208
 2216 0020 1A68     		ldr	r2, [r3]
 2217 0022 013A     		subs	r2, r2, #1
 2218 0024 1A60     		str	r2, [r3]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2219              		.loc 1 2212 0
 2220 0026 1B68     		ldr	r3, [r3]
 2221 0028 002B     		cmp	r3, #0
 2222 002a 4DD1     		bne	.L203
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2223              		.loc 1 2214 0
 2224 002c 294B     		ldr	r3, .L208+4
 2225 002e 1B68     		ldr	r3, [r3]
 2226 0030 23B9     		cbnz	r3, .L204
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2227              		.loc 1 2197 0
 2228 0032 0024     		movs	r4, #0
 2229              	.LVL174:
 2230              	.L195:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2231              		.loc 1 2298 0
 2232 0034 FFF7FEFF 		bl	vPortExitCritical
 2233              	.LVL175:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2234              		.loc 1 2301 0
 2235 0038 2046     		mov	r0, r4
 2236 003a 38BD     		pop	{r3, r4, r5, pc}
 2237              	.LVL176:
 2238              	.L204:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2239              		.loc 1 2196 0
 2240 003c 0024     		movs	r4, #0
 2241              	.LVL177:
 2242              	.L196:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2243              		.loc 1 2218 0
 2244 003e 264B     		ldr	r3, .L208+8
 2245 0040 1B68     		ldr	r3, [r3]
 2246 0042 1BB3     		cbz	r3, .L207
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2247              		.loc 1 2220 0
 2248 0044 244B     		ldr	r3, .L208+8
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 141


 2249 0046 DB68     		ldr	r3, [r3, #12]
 2250 0048 DC68     		ldr	r4, [r3, #12]
 2251              	.LVL178:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2252              		.loc 1 2221 0
 2253 004a 04F11800 		add	r0, r4, #24
 2254 004e FFF7FEFF 		bl	uxListRemove
 2255              	.LVL179:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2256              		.loc 1 2222 0
 2257 0052 251D     		adds	r5, r4, #4
 2258 0054 2846     		mov	r0, r5
 2259 0056 FFF7FEFF 		bl	uxListRemove
 2260              	.LVL180:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2261              		.loc 1 2223 0
 2262 005a E36A     		ldr	r3, [r4, #44]
 2263 005c 0122     		movs	r2, #1
 2264 005e 9A40     		lsls	r2, r2, r3
 2265 0060 1E49     		ldr	r1, .L208+12
 2266 0062 0868     		ldr	r0, [r1]
 2267 0064 0243     		orrs	r2, r2, r0
 2268 0066 0A60     		str	r2, [r1]
 2269 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2270 006c 9A00     		lsls	r2, r3, #2
 2271 006e 2946     		mov	r1, r5
 2272 0070 1B48     		ldr	r0, .L208+16
 2273 0072 1044     		add	r0, r0, r2
 2274 0074 FFF7FEFF 		bl	vListInsertEnd
 2275              	.LVL181:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2276              		.loc 1 2227 0
 2277 0078 E26A     		ldr	r2, [r4, #44]
 2278 007a 1A4B     		ldr	r3, .L208+20
 2279 007c 1B68     		ldr	r3, [r3]
 2280 007e DB6A     		ldr	r3, [r3, #44]
 2281 0080 9A42     		cmp	r2, r3
 2282 0082 DCD3     		bcc	.L196
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2283              		.loc 1 2229 0
 2284 0084 184B     		ldr	r3, .L208+24
 2285 0086 0122     		movs	r2, #1
 2286 0088 1A60     		str	r2, [r3]
 2287 008a D8E7     		b	.L196
 2288              	.L207:
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2289              		.loc 1 2237 0
 2290 008c 0CB1     		cbz	r4, .L199
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2291              		.loc 1 2245 0
 2292 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2293              	.LVL182:
 2294              	.L199:
 2295              	.LBB154:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2296              		.loc 1 2253 0
 2297 0092 164B     		ldr	r3, .L208+28
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 142


 2298 0094 1C68     		ldr	r4, [r3]
 2299              	.LVL183:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2300              		.loc 1 2255 0
 2301 0096 54B1     		cbz	r4, .L200
 2302              	.L202:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2303              		.loc 1 2259 0
 2304 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2305              	.LVL184:
 2306 009c 10B1     		cbz	r0, .L201
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2307              		.loc 1 2261 0
 2308 009e 124B     		ldr	r3, .L208+24
 2309 00a0 0122     		movs	r2, #1
 2310 00a2 1A60     		str	r2, [r3]
 2311              	.L201:
 2312              	.LVL185:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2313              		.loc 1 2268 0
 2314 00a4 013C     		subs	r4, r4, #1
 2315              	.LVL186:
 2316 00a6 F7D1     		bne	.L202
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2317              		.loc 1 2270 0
 2318 00a8 104B     		ldr	r3, .L208+28
 2319 00aa 0022     		movs	r2, #0
 2320 00ac 1A60     		str	r2, [r3]
 2321              	.L200:
 2322              	.LBE154:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2323              		.loc 1 2278 0
 2324 00ae 0E4B     		ldr	r3, .L208+24
 2325 00b0 1B68     		ldr	r3, [r3]
 2326 00b2 5BB1     		cbz	r3, .L205
 2327              	.LVL187:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2328              		.loc 1 2285 0
 2329 00b4 0E4B     		ldr	r3, .L208+32
 2330 00b6 4FF08052 		mov	r2, #268435456
 2331 00ba 1A60     		str	r2, [r3]
 2332              		.syntax unified
 2333              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2334 00bc BFF34F8F 		dsb
 2335              	@ 0 "" 2
 2336              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2337 00c0 BFF36F8F 		isb
 2338              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2339              		.loc 1 2282 0
 2340              		.thumb
 2341              		.syntax unified
 2342 00c4 0124     		movs	r4, #1
 2343              	.LVL188:
 2344 00c6 B5E7     		b	.L195
 2345              	.LVL189:
 2346              	.L203:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 143


2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2347              		.loc 1 2197 0
 2348 00c8 0024     		movs	r4, #0
 2349 00ca B3E7     		b	.L195
 2350              	.LVL190:
 2351              	.L205:
 2352 00cc 0024     		movs	r4, #0
 2353              	.LVL191:
 2354 00ce B1E7     		b	.L195
 2355              	.L209:
 2356              		.align	2
 2357              	.L208:
 2358 00d0 00000000 		.word	.LANCHOR16
 2359 00d4 00000000 		.word	.LANCHOR9
 2360 00d8 00000000 		.word	.LANCHOR1
 2361 00dc 00000000 		.word	.LANCHOR13
 2362 00e0 00000000 		.word	.LANCHOR4
 2363 00e4 00000000 		.word	.LANCHOR10
 2364 00e8 00000000 		.word	.LANCHOR18
 2365 00ec 00000000 		.word	.LANCHOR19
 2366 00f0 04ED00E0 		.word	-536810236
 2367              		.cfi_endproc
 2368              	.LFE20:
 2370              		.section	.text.vTaskDelay,"ax",%progbits
 2371              		.align	1
 2372              		.global	vTaskDelay
 2373              		.syntax unified
 2374              		.thumb
 2375              		.thumb_func
 2376              		.fpu fpv4-sp-d16
 2378              	vTaskDelay:
 2379              	.LFB9:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2380              		.loc 1 1342 0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              	.LVL192:
 2385 0000 10B5     		push	{r4, lr}
 2386              	.LCFI23:
 2387              		.cfi_def_cfa_offset 8
 2388              		.cfi_offset 4, -8
 2389              		.cfi_offset 14, -4
 2390              	.LVL193:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2391              		.loc 1 1346 0
 2392 0002 A8B1     		cbz	r0, .L211
 2393 0004 0446     		mov	r4, r0
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2394              		.loc 1 1348 0
 2395 0006 0F4B     		ldr	r3, .L216
 2396 0008 1B68     		ldr	r3, [r3]
 2397 000a 43B1     		cbz	r3, .L212
 2398              	.LBB155:
 2399              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2400              		.loc 2 195 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 144


 2401              		.syntax unified
 2402              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2403 000c 4FF05003 			mov r3, #80												
 2404 0010 83F31188 		msr basepri, r3											
 2405 0014 BFF36F8F 		isb														
 2406 0018 BFF34F8F 		dsb														
 2407              	
 2408              	@ 0 "" 2
 2409              	.LVL194:
 2410              		.thumb
 2411              		.syntax unified
 2412              	.L213:
 2413 001c FEE7     		b	.L213
 2414              	.L212:
 2415              	.LBE156:
 2416              	.LBE155:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2417              		.loc 1 1349 0
 2418 001e FFF7FEFF 		bl	vTaskSuspendAll
 2419              	.LVL195:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2420              		.loc 1 1360 0
 2421 0022 0021     		movs	r1, #0
 2422 0024 2046     		mov	r0, r4
 2423 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2424              	.LVL196:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2425              		.loc 1 1362 0
 2426 002a FFF7FEFF 		bl	xTaskResumeAll
 2427              	.LVL197:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2428              		.loc 1 1371 0
 2429 002e 38B9     		cbnz	r0, .L210
 2430              	.LVL198:
 2431              	.L211:
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2432              		.loc 1 1373 0
 2433 0030 054B     		ldr	r3, .L216+4
 2434 0032 4FF08052 		mov	r2, #268435456
 2435 0036 1A60     		str	r2, [r3]
 2436              		.syntax unified
 2437              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2438 0038 BFF34F8F 		dsb
 2439              	@ 0 "" 2
 2440              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2441 003c BFF36F8F 		isb
 2442              	@ 0 "" 2
 2443              		.thumb
 2444              		.syntax unified
 2445              	.L210:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2446              		.loc 1 1379 0
 2447 0040 10BD     		pop	{r4, pc}
 2448              	.L217:
 2449 0042 00BF     		.align	2
 2450              	.L216:
 2451 0044 00000000 		.word	.LANCHOR16
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 145


 2452 0048 04ED00E0 		.word	-536810236
 2453              		.cfi_endproc
 2454              	.LFE9:
 2456              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2457              		.align	1
 2458              		.global	xTaskCatchUpTicks
 2459              		.syntax unified
 2460              		.thumb
 2461              		.thumb_func
 2462              		.fpu fpv4-sp-d16
 2464              	xTaskCatchUpTicks:
 2465              	.LFB25:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2466              		.loc 1 2610 0
 2467              		.cfi_startproc
 2468              		@ args = 0, pretend = 0, frame = 0
 2469              		@ frame_needed = 0, uses_anonymous_args = 0
 2470              	.LVL199:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2471              		.loc 1 2615 0
 2472 0000 0B4B     		ldr	r3, .L223
 2473 0002 1B68     		ldr	r3, [r3]
 2474 0004 43B1     		cbz	r3, .L219
 2475              	.LBB157:
 2476              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2477              		.loc 2 195 0
 2478              		.syntax unified
 2479              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2480 0006 4FF05003 			mov r3, #80												
 2481 000a 83F31188 		msr basepri, r3											
 2482 000e BFF36F8F 		isb														
 2483 0012 BFF34F8F 		dsb														
 2484              	
 2485              	@ 0 "" 2
 2486              	.LVL200:
 2487              		.thumb
 2488              		.syntax unified
 2489              	.L220:
 2490 0016 FEE7     		b	.L220
 2491              	.L219:
 2492              	.LBE158:
 2493              	.LBE157:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2494              		.loc 1 2610 0
 2495 0018 10B5     		push	{r4, lr}
 2496              	.LCFI24:
 2497              		.cfi_def_cfa_offset 8
 2498              		.cfi_offset 4, -8
 2499              		.cfi_offset 14, -4
 2500 001a 0446     		mov	r4, r0
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 2501              		.loc 1 2619 0
 2502 001c FFF7FEFF 		bl	vTaskSuspendAll
 2503              	.LVL201:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 2504              		.loc 1 2620 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 146


 2505 0020 044A     		ldr	r2, .L223+4
 2506 0022 1368     		ldr	r3, [r2]
 2507 0024 2344     		add	r3, r3, r4
 2508 0026 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2509              		.loc 1 2621 0
 2510 0028 FFF7FEFF 		bl	xTaskResumeAll
 2511              	.LVL202:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2512              		.loc 1 2624 0
 2513 002c 10BD     		pop	{r4, pc}
 2514              	.LVL203:
 2515              	.L224:
 2516 002e 00BF     		.align	2
 2517              	.L223:
 2518 0030 00000000 		.word	.LANCHOR16
 2519 0034 00000000 		.word	.LANCHOR19
 2520              		.cfi_endproc
 2521              	.LFE25:
 2523              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2524              		.align	1
 2525              		.global	vTaskSetApplicationTaskTag
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu fpv4-sp-d16
 2531              	vTaskSetApplicationTaskTag:
 2532              	.LFB27:
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2533              		.loc 1 2882 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              	.LVL204:
 2538 0000 38B5     		push	{r3, r4, r5, lr}
 2539              	.LCFI25:
 2540              		.cfi_def_cfa_offset 16
 2541              		.cfi_offset 3, -16
 2542              		.cfi_offset 4, -12
 2543              		.cfi_offset 5, -8
 2544              		.cfi_offset 14, -4
 2545 0002 0D46     		mov	r5, r1
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2546              		.loc 1 2887 0
 2547 0004 0446     		mov	r4, r0
 2548 0006 28B1     		cbz	r0, .L228
 2549              	.LVL205:
 2550              	.L226:
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2551              		.loc 1 2898 0
 2552 0008 FFF7FEFF 		bl	vPortEnterCritical
 2553              	.LVL206:
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2554              		.loc 1 2900 0
 2555 000c 2565     		str	r5, [r4, #80]
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2556              		.loc 1 2902 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 147


 2557 000e FFF7FEFF 		bl	vPortExitCritical
 2558              	.LVL207:
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2559              		.loc 1 2903 0
 2560 0012 38BD     		pop	{r3, r4, r5, pc}
 2561              	.LVL208:
 2562              	.L228:
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2563              		.loc 1 2889 0
 2564 0014 014B     		ldr	r3, .L229
 2565 0016 1C68     		ldr	r4, [r3]
 2566              	.LVL209:
 2567 0018 F6E7     		b	.L226
 2568              	.L230:
 2569 001a 00BF     		.align	2
 2570              	.L229:
 2571 001c 00000000 		.word	.LANCHOR10
 2572              		.cfi_endproc
 2573              	.LFE27:
 2575              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2576              		.align	1
 2577              		.global	xTaskGetApplicationTaskTag
 2578              		.syntax unified
 2579              		.thumb
 2580              		.thumb_func
 2581              		.fpu fpv4-sp-d16
 2583              	xTaskGetApplicationTaskTag:
 2584              	.LFB28:
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2585              		.loc 1 2911 0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 0
 2588              		@ frame_needed = 0, uses_anonymous_args = 0
 2589              	.LVL210:
 2590 0000 10B5     		push	{r4, lr}
 2591              	.LCFI26:
 2592              		.cfi_def_cfa_offset 8
 2593              		.cfi_offset 4, -8
 2594              		.cfi_offset 14, -4
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2595              		.loc 1 2916 0
 2596 0002 0446     		mov	r4, r0
 2597 0004 30B1     		cbz	r0, .L234
 2598              	.LVL211:
 2599              	.L232:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2600              		.loc 1 2920 0 discriminator 4
 2601 0006 FFF7FEFF 		bl	vPortEnterCritical
 2602              	.LVL212:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2603              		.loc 1 2922 0 discriminator 4
 2604 000a 246D     		ldr	r4, [r4, #80]
 2605              	.LVL213:
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2606              		.loc 1 2924 0 discriminator 4
 2607 000c FFF7FEFF 		bl	vPortExitCritical
 2608              	.LVL214:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 148


2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2609              		.loc 1 2927 0 discriminator 4
 2610 0010 2046     		mov	r0, r4
 2611 0012 10BD     		pop	{r4, pc}
 2612              	.LVL215:
 2613              	.L234:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2614              		.loc 1 2916 0 discriminator 1
 2615 0014 014B     		ldr	r3, .L235
 2616 0016 1C68     		ldr	r4, [r3]
 2617              	.LVL216:
 2618 0018 F5E7     		b	.L232
 2619              	.L236:
 2620 001a 00BF     		.align	2
 2621              	.L235:
 2622 001c 00000000 		.word	.LANCHOR10
 2623              		.cfi_endproc
 2624              	.LFE28:
 2626              		.section	.text.xTaskGetApplicationTaskTagFromISR,"ax",%progbits
 2627              		.align	1
 2628              		.global	xTaskGetApplicationTaskTagFromISR
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2632              		.fpu fpv4-sp-d16
 2634              	xTaskGetApplicationTaskTagFromISR:
 2635              	.LFB29:
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2636              		.loc 1 2935 0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 0
 2639              		@ frame_needed = 0, uses_anonymous_args = 0
 2640              		@ link register save eliminated.
 2641              	.LVL217:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2642              		.loc 1 2941 0
 2643 0000 0346     		mov	r3, r0
 2644 0002 68B1     		cbz	r0, .L239
 2645              	.LVL218:
 2646              	.L238:
 2647              	.LBB159:
 2648              	.LBB160:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2649              		.loc 2 211 0 discriminator 4
 2650              		.syntax unified
 2651              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2652 0004 EFF31182 			mrs r2, basepri											
 2653 0008 4FF05001 		mov r1, #80												
 2654 000c 81F31188 		msr basepri, r1											
 2655 0010 BFF36F8F 		isb														
 2656 0014 BFF34F8F 		dsb														
 2657              	
 2658              	@ 0 "" 2
 2659              		.thumb
 2660              		.syntax unified
 2661              	.LBE160:
 2662              	.LBE159:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 149


2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2663              		.loc 1 2947 0 discriminator 4
 2664 0018 186D     		ldr	r0, [r3, #80]
 2665              	.LVL219:
 2666              	.LBB161:
 2667              	.LBB162:
 2668              		.loc 2 229 0 discriminator 4
 2669              		.syntax unified
 2670              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2671 001a 82F31188 			msr basepri, r2	
 2672              	@ 0 "" 2
 2673              		.thumb
 2674              		.syntax unified
 2675              	.LBE162:
 2676              	.LBE161:
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2677              		.loc 1 2952 0 discriminator 4
 2678 001e 7047     		bx	lr
 2679              	.LVL220:
 2680              	.L239:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2681              		.loc 1 2941 0 discriminator 1
 2682 0020 014B     		ldr	r3, .L240
 2683 0022 1B68     		ldr	r3, [r3]
 2684              	.LVL221:
 2685 0024 EEE7     		b	.L238
 2686              	.L241:
 2687 0026 00BF     		.align	2
 2688              	.L240:
 2689 0028 00000000 		.word	.LANCHOR10
 2690              		.cfi_endproc
 2691              	.LFE29:
 2693              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2694              		.align	1
 2695              		.global	xTaskCallApplicationTaskHook
 2696              		.syntax unified
 2697              		.thumb
 2698              		.thumb_func
 2699              		.fpu fpv4-sp-d16
 2701              	xTaskCallApplicationTaskHook:
 2702              	.LFB30:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 2703              		.loc 1 2960 0
 2704              		.cfi_startproc
 2705              		@ args = 0, pretend = 0, frame = 0
 2706              		@ frame_needed = 0, uses_anonymous_args = 0
 2707              	.LVL222:
 2708 0000 08B5     		push	{r3, lr}
 2709              	.LCFI27:
 2710              		.cfi_def_cfa_offset 8
 2711              		.cfi_offset 3, -8
 2712              		.cfi_offset 14, -4
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2713              		.loc 1 2965 0
 2714 0002 0346     		mov	r3, r0
 2715 0004 20B1     		cbz	r0, .L247
 2716              	.LVL223:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 150


 2717              	.L243:
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2718              		.loc 1 2974 0
 2719 0006 1B6D     		ldr	r3, [r3, #80]
 2720              	.LVL224:
 2721 0008 2BB1     		cbz	r3, .L245
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2722              		.loc 1 2976 0
 2723 000a 0846     		mov	r0, r1
 2724 000c 9847     		blx	r3
 2725              	.LVL225:
 2726              	.L242:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2727              		.loc 1 2984 0
 2728 000e 08BD     		pop	{r3, pc}
 2729              	.LVL226:
 2730              	.L247:
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2731              		.loc 1 2967 0
 2732 0010 024B     		ldr	r3, .L248
 2733 0012 1B68     		ldr	r3, [r3]
 2734              	.LVL227:
 2735 0014 F7E7     		b	.L243
 2736              	.LVL228:
 2737              	.L245:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2738              		.loc 1 2980 0
 2739 0016 0020     		movs	r0, #0
 2740              	.LVL229:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2741              		.loc 1 2983 0
 2742 0018 F9E7     		b	.L242
 2743              	.L249:
 2744 001a 00BF     		.align	2
 2745              	.L248:
 2746 001c 00000000 		.word	.LANCHOR10
 2747              		.cfi_endproc
 2748              	.LFE30:
 2750              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2751              		.align	1
 2752              		.global	vTaskSwitchContext
 2753              		.syntax unified
 2754              		.thumb
 2755              		.thumb_func
 2756              		.fpu fpv4-sp-d16
 2758              	vTaskSwitchContext:
 2759              	.LFB31:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2760              		.loc 1 2990 0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 0
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
 2764              		@ link register save eliminated.
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2765              		.loc 1 2991 0
 2766 0000 254B     		ldr	r3, .L260
 2767 0002 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 151


 2768 0004 1BB1     		cbz	r3, .L251
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2769              		.loc 1 2995 0
 2770 0006 254B     		ldr	r3, .L260+4
 2771 0008 0122     		movs	r2, #1
 2772 000a 1A60     		str	r2, [r3]
 2773 000c 7047     		bx	lr
 2774              	.L251:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2775              		.loc 1 2999 0
 2776 000e 234B     		ldr	r3, .L260+4
 2777 0010 0022     		movs	r2, #0
 2778 0012 1A60     		str	r2, [r3]
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2779              		.loc 1 3035 0
 2780 0014 224B     		ldr	r3, .L260+8
 2781 0016 1B68     		ldr	r3, [r3]
 2782 0018 224A     		ldr	r2, .L260+12
 2783 001a 1268     		ldr	r2, [r2]
 2784 001c DA65     		str	r2, [r3, #92]
 2785              	.LBB163:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2786              		.loc 1 3041 0
 2787 001e 224B     		ldr	r3, .L260+16
 2788 0020 1B68     		ldr	r3, [r3]
 2789              	.LVL230:
 2790              	.LBB164:
 2791              	.LBB165:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2792              		.loc 2 134 0
 2793              		.syntax unified
 2794              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2795 0022 B3FA83F3 		clz r3, r3
 2796              	@ 0 "" 2
 2797              	.LVL231:
 2798              		.thumb
 2799              		.syntax unified
 2800 0026 DBB2     		uxtb	r3, r3
 2801              	.LBE165:
 2802              	.LBE164:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2803              		.loc 1 3041 0
 2804 0028 C3F11F03 		rsb	r3, r3, #31
 2805              	.LVL232:
 2806 002c 03EB8301 		add	r1, r3, r3, lsl #2
 2807 0030 8A00     		lsls	r2, r1, #2
 2808 0032 1E49     		ldr	r1, .L260+20
 2809 0034 8A58     		ldr	r2, [r1, r2]
 2810 0036 42B9     		cbnz	r2, .L253
 2811              	.LBB166:
 2812              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2813              		.loc 2 195 0
 2814              		.syntax unified
 2815              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2816 0038 4FF05003 			mov r3, #80												
 2817 003c 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 152


 2818 0040 BFF36F8F 		isb														
 2819 0044 BFF34F8F 		dsb														
 2820              	
 2821              	@ 0 "" 2
 2822              	.LVL233:
 2823              		.thumb
 2824              		.syntax unified
 2825              	.L254:
 2826 0048 FEE7     		b	.L254
 2827              	.LVL234:
 2828              	.L253:
 2829              	.LBE167:
 2830              	.LBE166:
 2831              	.LBE163:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2832              		.loc 1 2990 0 discriminator 2
 2833 004a 10B4     		push	{r4}
 2834              	.LCFI28:
 2835              		.cfi_def_cfa_offset 4
 2836              		.cfi_offset 4, -4
 2837              	.LVL235:
 2838              	.LBB170:
 2839              	.LBB168:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2840              		.loc 1 3041 0 discriminator 2
 2841 004c 1748     		ldr	r0, .L260+20
 2842 004e 9A00     		lsls	r2, r3, #2
 2843 0050 D418     		adds	r4, r2, r3
 2844 0052 A100     		lsls	r1, r4, #2
 2845 0054 0144     		add	r1, r1, r0
 2846 0056 4C68     		ldr	r4, [r1, #4]
 2847 0058 6468     		ldr	r4, [r4, #4]
 2848 005a 4C60     		str	r4, [r1, #4]
 2849 005c 1A44     		add	r2, r2, r3
 2850 005e 9100     		lsls	r1, r2, #2
 2851 0060 0831     		adds	r1, r1, #8
 2852 0062 0844     		add	r0, r0, r1
 2853 0064 8442     		cmp	r4, r0
 2854 0066 0FD0     		beq	.L259
 2855              	.L255:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2856              		.loc 1 3041 0 is_stmt 0 discriminator 5
 2857 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2858              	.LVL236:
 2859 006c 9A00     		lsls	r2, r3, #2
 2860 006e 0F4B     		ldr	r3, .L260+20
 2861 0070 1344     		add	r3, r3, r2
 2862 0072 5B68     		ldr	r3, [r3, #4]
 2863 0074 DA68     		ldr	r2, [r3, #12]
 2864 0076 0A4B     		ldr	r3, .L260+8
 2865 0078 1A60     		str	r2, [r3]
 2866              	.LBE168:
 2867              	.LBE170:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2868              		.loc 1 3047 0 is_stmt 1 discriminator 5
 2869 007a 1B68     		ldr	r3, [r3]
 2870 007c DA6D     		ldr	r2, [r3, #92]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 153


 2871 007e 094B     		ldr	r3, .L260+12
 2872 0080 1A60     		str	r2, [r3]
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2873              		.loc 1 3061 0 discriminator 5
 2874 0082 5DF8044B 		ldr	r4, [sp], #4
 2875              	.LCFI29:
 2876              		.cfi_remember_state
 2877              		.cfi_restore 4
 2878              		.cfi_def_cfa_offset 0
 2879 0086 7047     		bx	lr
 2880              	.LVL237:
 2881              	.L259:
 2882              	.LCFI30:
 2883              		.cfi_restore_state
 2884              	.LBB171:
 2885              	.LBB169:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2886              		.loc 1 3041 0 discriminator 3
 2887 0088 6168     		ldr	r1, [r4, #4]
 2888 008a 0848     		ldr	r0, .L260+20
 2889 008c 1422     		movs	r2, #20
 2890 008e 02FB0302 		mla	r2, r2, r3, r0
 2891 0092 5160     		str	r1, [r2, #4]
 2892 0094 E8E7     		b	.L255
 2893              	.L261:
 2894 0096 00BF     		.align	2
 2895              	.L260:
 2896 0098 00000000 		.word	.LANCHOR16
 2897 009c 00000000 		.word	.LANCHOR18
 2898 00a0 00000000 		.word	.LANCHOR10
 2899 00a4 00000000 		.word	.LANCHOR20
 2900 00a8 00000000 		.word	.LANCHOR13
 2901 00ac 00000000 		.word	.LANCHOR4
 2902              	.LBE169:
 2903              	.LBE171:
 2904              		.cfi_endproc
 2905              	.LFE31:
 2907              		.section	.text.vTaskSuspend,"ax",%progbits
 2908              		.align	1
 2909              		.global	vTaskSuspend
 2910              		.syntax unified
 2911              		.thumb
 2912              		.thumb_func
 2913              		.fpu fpv4-sp-d16
 2915              	vTaskSuspend:
 2916              	.LFB13:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2917              		.loc 1 1705 0
 2918              		.cfi_startproc
 2919              		@ args = 0, pretend = 0, frame = 0
 2920              		@ frame_needed = 0, uses_anonymous_args = 0
 2921              	.LVL238:
 2922 0000 38B5     		push	{r3, r4, r5, lr}
 2923              	.LCFI31:
 2924              		.cfi_def_cfa_offset 16
 2925              		.cfi_offset 3, -16
 2926              		.cfi_offset 4, -12
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 154


 2927              		.cfi_offset 5, -8
 2928              		.cfi_offset 14, -4
 2929 0002 0446     		mov	r4, r0
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2930              		.loc 1 1708 0
 2931 0004 FFF7FEFF 		bl	vPortEnterCritical
 2932              	.LVL239:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2933              		.loc 1 1712 0
 2934 0008 64B3     		cbz	r4, .L274
 2935              	.LVL240:
 2936              	.L263:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2937              		.loc 1 1718 0 discriminator 4
 2938 000a 251D     		adds	r5, r4, #4
 2939 000c 2846     		mov	r0, r5
 2940 000e FFF7FEFF 		bl	uxListRemove
 2941              	.LVL241:
 2942 0012 70B9     		cbnz	r0, .L264
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2943              		.loc 1 1720 0
 2944 0014 E26A     		ldr	r2, [r4, #44]
 2945 0016 02EB8201 		add	r1, r2, r2, lsl #2
 2946 001a 8B00     		lsls	r3, r1, #2
 2947 001c 2B49     		ldr	r1, .L278
 2948 001e CB58     		ldr	r3, [r1, r3]
 2949 0020 3BB9     		cbnz	r3, .L264
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2950              		.loc 1 1720 0 is_stmt 0 discriminator 1
 2951 0022 0123     		movs	r3, #1
 2952 0024 03FA02F2 		lsl	r2, r3, r2
 2953 0028 2949     		ldr	r1, .L278+4
 2954 002a 0B68     		ldr	r3, [r1]
 2955 002c 23EA0203 		bic	r3, r3, r2
 2956 0030 0B60     		str	r3, [r1]
 2957              	.L264:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2958              		.loc 1 1728 0 is_stmt 1
 2959 0032 A36A     		ldr	r3, [r4, #40]
 2960 0034 1BB1     		cbz	r3, .L265
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2961              		.loc 1 1730 0
 2962 0036 04F11800 		add	r0, r4, #24
 2963 003a FFF7FEFF 		bl	uxListRemove
 2964              	.LVL242:
 2965              	.L265:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2966              		.loc 1 1737 0
 2967 003e 2946     		mov	r1, r5
 2968 0040 2448     		ldr	r0, .L278+8
 2969 0042 FFF7FEFF 		bl	vListInsertEnd
 2970              	.LVL243:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2971              		.loc 1 1741 0
 2972 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 2973 004a DBB2     		uxtb	r3, r3
 2974 004c 012B     		cmp	r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 155


 2975 004e 0CD0     		beq	.L275
 2976              	.L266:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2977              		.loc 1 1750 0
 2978 0050 FFF7FEFF 		bl	vPortExitCritical
 2979              	.LVL244:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2980              		.loc 1 1752 0
 2981 0054 204B     		ldr	r3, .L278+12
 2982 0056 1B68     		ldr	r3, [r3]
 2983 0058 5BB9     		cbnz	r3, .L276
 2984              	.L267:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2985              		.loc 1 1767 0
 2986 005a 204B     		ldr	r3, .L278+16
 2987 005c 1B68     		ldr	r3, [r3]
 2988 005e A342     		cmp	r3, r4
 2989 0060 0ED0     		beq	.L277
 2990              	.L262:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2991              		.loc 1 1798 0
 2992 0062 38BD     		pop	{r3, r4, r5, pc}
 2993              	.LVL245:
 2994              	.L274:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2995              		.loc 1 1712 0 discriminator 1
 2996 0064 1D4B     		ldr	r3, .L278+16
 2997 0066 1C68     		ldr	r4, [r3]
 2998              	.LVL246:
 2999 0068 CFE7     		b	.L263
 3000              	.LVL247:
 3001              	.L275:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3002              		.loc 1 1745 0
 3003 006a 0023     		movs	r3, #0
 3004 006c 84F85830 		strb	r3, [r4, #88]
 3005 0070 EEE7     		b	.L266
 3006              	.L276:
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3007              		.loc 1 1756 0
 3008 0072 FFF7FEFF 		bl	vPortEnterCritical
 3009              	.LVL248:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3010              		.loc 1 1758 0
 3011 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3012              	.LVL249:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3013              		.loc 1 1760 0
 3014 007a FFF7FEFF 		bl	vPortExitCritical
 3015              	.LVL250:
 3016 007e ECE7     		b	.L267
 3017              	.L277:
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3018              		.loc 1 1769 0
 3019 0080 154B     		ldr	r3, .L278+12
 3020 0082 1B68     		ldr	r3, [r3]
 3021 0084 A3B1     		cbz	r3, .L269
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 156


1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3022              		.loc 1 1772 0
 3023 0086 164B     		ldr	r3, .L278+20
 3024 0088 1B68     		ldr	r3, [r3]
 3025 008a 43B1     		cbz	r3, .L270
 3026              	.LBB172:
 3027              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3028              		.loc 2 195 0
 3029              		.syntax unified
 3030              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3031 008c 4FF05003 			mov r3, #80												
 3032 0090 83F31188 		msr basepri, r3											
 3033 0094 BFF36F8F 		isb														
 3034 0098 BFF34F8F 		dsb														
 3035              	
 3036              	@ 0 "" 2
 3037              	.LVL251:
 3038              		.thumb
 3039              		.syntax unified
 3040              	.L271:
 3041 009c FEE7     		b	.L271
 3042              	.L270:
 3043              	.LBE173:
 3044              	.LBE172:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3045              		.loc 1 1773 0
 3046 009e 114B     		ldr	r3, .L278+24
 3047 00a0 4FF08052 		mov	r2, #268435456
 3048 00a4 1A60     		str	r2, [r3]
 3049              		.syntax unified
 3050              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3051 00a6 BFF34F8F 		dsb
 3052              	@ 0 "" 2
 3053              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3054 00aa BFF36F8F 		isb
 3055              	@ 0 "" 2
 3056              		.thumb
 3057              		.syntax unified
 3058 00ae D8E7     		b	.L262
 3059              	.L269:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3060              		.loc 1 1780 0
 3061 00b0 084B     		ldr	r3, .L278+8
 3062 00b2 1A68     		ldr	r2, [r3]
 3063 00b4 0C4B     		ldr	r3, .L278+28
 3064 00b6 1B68     		ldr	r3, [r3]
 3065 00b8 9A42     		cmp	r2, r3
 3066 00ba 03D1     		bne	.L272
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3067              		.loc 1 1786 0
 3068 00bc 074B     		ldr	r3, .L278+16
 3069 00be 0022     		movs	r2, #0
 3070 00c0 1A60     		str	r2, [r3]
 3071 00c2 CEE7     		b	.L262
 3072              	.L272:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 157


 3073              		.loc 1 1790 0
 3074 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 3075              	.LVL252:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3076              		.loc 1 1798 0
 3077 00c8 CBE7     		b	.L262
 3078              	.L279:
 3079 00ca 00BF     		.align	2
 3080              	.L278:
 3081 00cc 00000000 		.word	.LANCHOR4
 3082 00d0 00000000 		.word	.LANCHOR13
 3083 00d4 00000000 		.word	.LANCHOR0
 3084 00d8 00000000 		.word	.LANCHOR11
 3085 00dc 00000000 		.word	.LANCHOR10
 3086 00e0 00000000 		.word	.LANCHOR16
 3087 00e4 04ED00E0 		.word	-536810236
 3088 00e8 00000000 		.word	.LANCHOR9
 3089              		.cfi_endproc
 3090              	.LFE13:
 3092              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3093              		.align	1
 3094              		.global	vTaskPlaceOnEventList
 3095              		.syntax unified
 3096              		.thumb
 3097              		.thumb_func
 3098              		.fpu fpv4-sp-d16
 3100              	vTaskPlaceOnEventList:
 3101              	.LFB32:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3102              		.loc 1 3065 0
 3103              		.cfi_startproc
 3104              		@ args = 0, pretend = 0, frame = 0
 3105              		@ frame_needed = 0, uses_anonymous_args = 0
 3106              	.LVL253:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3107              		.loc 1 3066 0
 3108 0000 40B9     		cbnz	r0, .L281
 3109              	.LBB174:
 3110              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3111              		.loc 2 195 0
 3112              		.syntax unified
 3113              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3114 0002 4FF05003 			mov r3, #80												
 3115 0006 83F31188 		msr basepri, r3											
 3116 000a BFF36F8F 		isb														
 3117 000e BFF34F8F 		dsb														
 3118              	
 3119              	@ 0 "" 2
 3120              	.LVL254:
 3121              		.thumb
 3122              		.syntax unified
 3123              	.L282:
 3124 0012 FEE7     		b	.L282
 3125              	.L281:
 3126              	.LBE175:
 3127              	.LBE174:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 158


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3128              		.loc 1 3065 0
 3129 0014 10B5     		push	{r4, lr}
 3130              	.LCFI32:
 3131              		.cfi_def_cfa_offset 8
 3132              		.cfi_offset 4, -8
 3133              		.cfi_offset 14, -4
 3134 0016 0C46     		mov	r4, r1
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3135              		.loc 1 3075 0
 3136 0018 044B     		ldr	r3, .L285
 3137 001a 1968     		ldr	r1, [r3]
 3138              	.LVL255:
 3139 001c 1831     		adds	r1, r1, #24
 3140 001e FFF7FEFF 		bl	vListInsert
 3141              	.LVL256:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3142              		.loc 1 3077 0
 3143 0022 0121     		movs	r1, #1
 3144 0024 2046     		mov	r0, r4
 3145 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3146              	.LVL257:
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3147              		.loc 1 3078 0
 3148 002a 10BD     		pop	{r4, pc}
 3149              	.LVL258:
 3150              	.L286:
 3151              		.align	2
 3152              	.L285:
 3153 002c 00000000 		.word	.LANCHOR10
 3154              		.cfi_endproc
 3155              	.LFE32:
 3157              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3158              		.align	1
 3159              		.global	vTaskPlaceOnUnorderedEventList
 3160              		.syntax unified
 3161              		.thumb
 3162              		.thumb_func
 3163              		.fpu fpv4-sp-d16
 3165              	vTaskPlaceOnUnorderedEventList:
 3166              	.LFB33:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3167              		.loc 1 3082 0
 3168              		.cfi_startproc
 3169              		@ args = 0, pretend = 0, frame = 0
 3170              		@ frame_needed = 0, uses_anonymous_args = 0
 3171              	.LVL259:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3172              		.loc 1 3083 0
 3173 0000 40B9     		cbnz	r0, .L288
 3174              	.LBB176:
 3175              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3176              		.loc 2 195 0
 3177              		.syntax unified
 3178              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3179 0002 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 159


 3180 0006 83F31188 		msr basepri, r3											
 3181 000a BFF36F8F 		isb														
 3182 000e BFF34F8F 		dsb														
 3183              	
 3184              	@ 0 "" 2
 3185              	.LVL260:
 3186              		.thumb
 3187              		.syntax unified
 3188              	.L289:
 3189 0012 FEE7     		b	.L289
 3190              	.L288:
 3191 0014 0346     		mov	r3, r0
 3192              	.LBE177:
 3193              	.LBE176:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3194              		.loc 1 3087 0
 3195 0016 0F48     		ldr	r0, .L294
 3196              	.LVL261:
 3197 0018 0068     		ldr	r0, [r0]
 3198 001a 40B9     		cbnz	r0, .L290
 3199              	.LBB178:
 3200              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3201              		.loc 2 195 0
 3202              		.syntax unified
 3203              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3204 001c 4FF05003 			mov r3, #80												
 3205 0020 83F31188 		msr basepri, r3											
 3206 0024 BFF36F8F 		isb														
 3207 0028 BFF34F8F 		dsb														
 3208              	
 3209              	@ 0 "" 2
 3210              	.LVL262:
 3211              		.thumb
 3212              		.syntax unified
 3213              	.L291:
 3214 002c FEE7     		b	.L291
 3215              	.LVL263:
 3216              	.L290:
 3217              	.LBE179:
 3218              	.LBE178:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3219              		.loc 1 3082 0
 3220 002e 10B5     		push	{r4, lr}
 3221              	.LCFI33:
 3222              		.cfi_def_cfa_offset 8
 3223              		.cfi_offset 4, -8
 3224              		.cfi_offset 14, -4
 3225 0030 1846     		mov	r0, r3
 3226 0032 1446     		mov	r4, r2
 3227 0034 0B46     		mov	r3, r1
 3228              	.LVL264:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3229              		.loc 1 3092 0
 3230 0036 084A     		ldr	r2, .L294+4
 3231              	.LVL265:
 3232 0038 1168     		ldr	r1, [r2]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 160


 3233              	.LVL266:
 3234 003a 43F00043 		orr	r3, r3, #-2147483648
 3235              	.LVL267:
 3236 003e 8B61     		str	r3, [r1, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3237              		.loc 1 3099 0
 3238 0040 1168     		ldr	r1, [r2]
 3239 0042 1831     		adds	r1, r1, #24
 3240 0044 FFF7FEFF 		bl	vListInsertEnd
 3241              	.LVL268:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3242              		.loc 1 3101 0
 3243 0048 0121     		movs	r1, #1
 3244 004a 2046     		mov	r0, r4
 3245 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3246              	.LVL269:
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3247              		.loc 1 3102 0
 3248 0050 10BD     		pop	{r4, pc}
 3249              	.LVL270:
 3250              	.L295:
 3251 0052 00BF     		.align	2
 3252              	.L294:
 3253 0054 00000000 		.word	.LANCHOR16
 3254 0058 00000000 		.word	.LANCHOR10
 3255              		.cfi_endproc
 3256              	.LFE33:
 3258              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3259              		.align	1
 3260              		.global	xTaskRemoveFromEventList
 3261              		.syntax unified
 3262              		.thumb
 3263              		.thumb_func
 3264              		.fpu fpv4-sp-d16
 3266              	xTaskRemoveFromEventList:
 3267              	.LFB34:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3268              		.loc 1 3139 0
 3269              		.cfi_startproc
 3270              		@ args = 0, pretend = 0, frame = 0
 3271              		@ frame_needed = 0, uses_anonymous_args = 0
 3272              	.LVL271:
 3273 0000 38B5     		push	{r3, r4, r5, lr}
 3274              	.LCFI34:
 3275              		.cfi_def_cfa_offset 16
 3276              		.cfi_offset 3, -16
 3277              		.cfi_offset 4, -12
 3278              		.cfi_offset 5, -8
 3279              		.cfi_offset 14, -4
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3280              		.loc 1 3156 0
 3281 0002 C368     		ldr	r3, [r0, #12]
 3282 0004 DC68     		ldr	r4, [r3, #12]
 3283              	.LVL272:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3284              		.loc 1 3157 0
 3285 0006 44B9     		cbnz	r4, .L297
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 161


 3286              	.LBB180:
 3287              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3288              		.loc 2 195 0
 3289              		.syntax unified
 3290              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3291 0008 4FF05003 			mov r3, #80												
 3292 000c 83F31188 		msr basepri, r3											
 3293 0010 BFF36F8F 		isb														
 3294 0014 BFF34F8F 		dsb														
 3295              	
 3296              	@ 0 "" 2
 3297              	.LVL273:
 3298              		.thumb
 3299              		.syntax unified
 3300              	.L298:
 3301 0018 FEE7     		b	.L298
 3302              	.L297:
 3303              	.LBE181:
 3304              	.LBE180:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3305              		.loc 1 3158 0
 3306 001a 04F11805 		add	r5, r4, #24
 3307 001e 2846     		mov	r0, r5
 3308              	.LVL274:
 3309 0020 FFF7FEFF 		bl	uxListRemove
 3310              	.LVL275:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3311              		.loc 1 3160 0
 3312 0024 134B     		ldr	r3, .L304
 3313 0026 1B68     		ldr	r3, [r3]
 3314 0028 E3B9     		cbnz	r3, .L299
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3315              		.loc 1 3162 0
 3316 002a 251D     		adds	r5, r4, #4
 3317 002c 2846     		mov	r0, r5
 3318 002e FFF7FEFF 		bl	uxListRemove
 3319              	.LVL276:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3320              		.loc 1 3163 0
 3321 0032 E36A     		ldr	r3, [r4, #44]
 3322 0034 0122     		movs	r2, #1
 3323 0036 9A40     		lsls	r2, r2, r3
 3324 0038 0F49     		ldr	r1, .L304+4
 3325 003a 0868     		ldr	r0, [r1]
 3326 003c 0243     		orrs	r2, r2, r0
 3327 003e 0A60     		str	r2, [r1]
 3328 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3329 0044 9A00     		lsls	r2, r3, #2
 3330 0046 2946     		mov	r1, r5
 3331 0048 0C48     		ldr	r0, .L304+8
 3332 004a 1044     		add	r0, r0, r2
 3333 004c FFF7FEFF 		bl	vListInsertEnd
 3334              	.LVL277:
 3335              	.L300:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3336              		.loc 1 3186 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 162


 3337 0050 E26A     		ldr	r2, [r4, #44]
 3338 0052 0B4B     		ldr	r3, .L304+12
 3339 0054 1B68     		ldr	r3, [r3]
 3340 0056 DB6A     		ldr	r3, [r3, #44]
 3341 0058 9A42     		cmp	r2, r3
 3342 005a 08D9     		bls	.L302
 3343              	.LVL278:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3344              		.loc 1 3195 0
 3345 005c 0120     		movs	r0, #1
 3346 005e 094B     		ldr	r3, .L304+16
 3347 0060 1860     		str	r0, [r3]
 3348              	.LVL279:
 3349              	.L296:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3350              		.loc 1 3203 0
 3351 0062 38BD     		pop	{r3, r4, r5, pc}
 3352              	.LVL280:
 3353              	.L299:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3354              		.loc 1 3183 0
 3355 0064 2946     		mov	r1, r5
 3356 0066 0848     		ldr	r0, .L304+20
 3357 0068 FFF7FEFF 		bl	vListInsertEnd
 3358              	.LVL281:
 3359 006c F0E7     		b	.L300
 3360              	.L302:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3361              		.loc 1 3199 0
 3362 006e 0020     		movs	r0, #0
 3363              	.LVL282:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3364              		.loc 1 3202 0
 3365 0070 F7E7     		b	.L296
 3366              	.L305:
 3367 0072 00BF     		.align	2
 3368              	.L304:
 3369 0074 00000000 		.word	.LANCHOR16
 3370 0078 00000000 		.word	.LANCHOR13
 3371 007c 00000000 		.word	.LANCHOR4
 3372 0080 00000000 		.word	.LANCHOR10
 3373 0084 00000000 		.word	.LANCHOR18
 3374 0088 00000000 		.word	.LANCHOR1
 3375              		.cfi_endproc
 3376              	.LFE34:
 3378              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3379              		.align	1
 3380              		.global	vTaskRemoveFromUnorderedEventList
 3381              		.syntax unified
 3382              		.thumb
 3383              		.thumb_func
 3384              		.fpu fpv4-sp-d16
 3386              	vTaskRemoveFromUnorderedEventList:
 3387              	.LFB35:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3388              		.loc 1 3207 0
 3389              		.cfi_startproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 163


 3390              		@ args = 0, pretend = 0, frame = 0
 3391              		@ frame_needed = 0, uses_anonymous_args = 0
 3392              	.LVL283:
 3393 0000 38B5     		push	{r3, r4, r5, lr}
 3394              	.LCFI35:
 3395              		.cfi_def_cfa_offset 16
 3396              		.cfi_offset 3, -16
 3397              		.cfi_offset 4, -12
 3398              		.cfi_offset 5, -8
 3399              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3400              		.loc 1 3212 0
 3401 0002 1C4B     		ldr	r3, .L314
 3402 0004 1B68     		ldr	r3, [r3]
 3403 0006 43B9     		cbnz	r3, .L307
 3404              	.LBB182:
 3405              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3406              		.loc 2 195 0
 3407              		.syntax unified
 3408              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3409 0008 4FF05003 			mov r3, #80												
 3410 000c 83F31188 		msr basepri, r3											
 3411 0010 BFF36F8F 		isb														
 3412 0014 BFF34F8F 		dsb														
 3413              	
 3414              	@ 0 "" 2
 3415              	.LVL284:
 3416              		.thumb
 3417              		.syntax unified
 3418              	.L308:
 3419 0018 FEE7     		b	.L308
 3420              	.L307:
 3421              	.LBE183:
 3422              	.LBE182:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3423              		.loc 1 3215 0
 3424 001a 41F00041 		orr	r1, r1, #-2147483648
 3425              	.LVL285:
 3426 001e 0160     		str	r1, [r0]
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3427              		.loc 1 3219 0
 3428 0020 C468     		ldr	r4, [r0, #12]
 3429              	.LVL286:
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3430              		.loc 1 3220 0
 3431 0022 F4B1     		cbz	r4, .L313
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3432              		.loc 1 3221 0
 3433 0024 FFF7FEFF 		bl	uxListRemove
 3434              	.LVL287:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3435              		.loc 1 3240 0
 3436 0028 251D     		adds	r5, r4, #4
 3437 002a 2846     		mov	r0, r5
 3438 002c FFF7FEFF 		bl	uxListRemove
 3439              	.LVL288:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 164


3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3440              		.loc 1 3241 0
 3441 0030 E36A     		ldr	r3, [r4, #44]
 3442 0032 0122     		movs	r2, #1
 3443 0034 9A40     		lsls	r2, r2, r3
 3444 0036 1049     		ldr	r1, .L314+4
 3445 0038 0868     		ldr	r0, [r1]
 3446 003a 0243     		orrs	r2, r2, r0
 3447 003c 0A60     		str	r2, [r1]
 3448 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3449 0042 9A00     		lsls	r2, r3, #2
 3450 0044 2946     		mov	r1, r5
 3451 0046 0D48     		ldr	r0, .L314+8
 3452 0048 1044     		add	r0, r0, r2
 3453 004a FFF7FEFF 		bl	vListInsertEnd
 3454              	.LVL289:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3455              		.loc 1 3243 0
 3456 004e E26A     		ldr	r2, [r4, #44]
 3457 0050 0B4B     		ldr	r3, .L314+12
 3458 0052 1B68     		ldr	r3, [r3]
 3459 0054 DB6A     		ldr	r3, [r3, #44]
 3460 0056 9A42     		cmp	r2, r3
 3461 0058 02D9     		bls	.L306
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3462              		.loc 1 3249 0
 3463 005a 0A4B     		ldr	r3, .L314+16
 3464 005c 0122     		movs	r2, #1
 3465 005e 1A60     		str	r2, [r3]
 3466              	.L306:
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3467              		.loc 1 3251 0
 3468 0060 38BD     		pop	{r3, r4, r5, pc}
 3469              	.LVL290:
 3470              	.L313:
 3471              	.LBB184:
 3472              	.LBB185:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3473              		.loc 2 195 0
 3474              		.syntax unified
 3475              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3476 0062 4FF05003 			mov r3, #80												
 3477 0066 83F31188 		msr basepri, r3											
 3478 006a BFF36F8F 		isb														
 3479 006e BFF34F8F 		dsb														
 3480              	
 3481              	@ 0 "" 2
 3482              	.LVL291:
 3483              		.thumb
 3484              		.syntax unified
 3485              	.L310:
 3486 0072 FEE7     		b	.L310
 3487              	.L315:
 3488              		.align	2
 3489              	.L314:
 3490 0074 00000000 		.word	.LANCHOR16
 3491 0078 00000000 		.word	.LANCHOR13
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 165


 3492 007c 00000000 		.word	.LANCHOR4
 3493 0080 00000000 		.word	.LANCHOR10
 3494 0084 00000000 		.word	.LANCHOR18
 3495              	.LBE185:
 3496              	.LBE184:
 3497              		.cfi_endproc
 3498              	.LFE35:
 3500              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3501              		.align	1
 3502              		.global	vTaskSetTimeOutState
 3503              		.syntax unified
 3504              		.thumb
 3505              		.thumb_func
 3506              		.fpu fpv4-sp-d16
 3508              	vTaskSetTimeOutState:
 3509              	.LFB36:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3510              		.loc 1 3255 0
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 0
 3513              		@ frame_needed = 0, uses_anonymous_args = 0
 3514              	.LVL292:
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3515              		.loc 1 3256 0
 3516 0000 40B9     		cbnz	r0, .L317
 3517              	.LBB186:
 3518              	.LBB187:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3519              		.loc 2 195 0
 3520              		.syntax unified
 3521              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3522 0002 4FF05003 			mov r3, #80												
 3523 0006 83F31188 		msr basepri, r3											
 3524 000a BFF36F8F 		isb														
 3525 000e BFF34F8F 		dsb														
 3526              	
 3527              	@ 0 "" 2
 3528              	.LVL293:
 3529              		.thumb
 3530              		.syntax unified
 3531              	.L318:
 3532 0012 FEE7     		b	.L318
 3533              	.L317:
 3534              	.LBE187:
 3535              	.LBE186:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3536              		.loc 1 3255 0
 3537 0014 10B5     		push	{r4, lr}
 3538              	.LCFI36:
 3539              		.cfi_def_cfa_offset 8
 3540              		.cfi_offset 4, -8
 3541              		.cfi_offset 14, -4
 3542 0016 0446     		mov	r4, r0
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3543              		.loc 1 3257 0
 3544 0018 FFF7FEFF 		bl	vPortEnterCritical
 3545              	.LVL294:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 166


3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3546              		.loc 1 3259 0
 3547 001c 044B     		ldr	r3, .L321
 3548 001e 1B68     		ldr	r3, [r3]
 3549 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3550              		.loc 1 3260 0
 3551 0022 044B     		ldr	r3, .L321+4
 3552 0024 1B68     		ldr	r3, [r3]
 3553 0026 6360     		str	r3, [r4, #4]
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3554              		.loc 1 3262 0
 3555 0028 FFF7FEFF 		bl	vPortExitCritical
 3556              	.LVL295:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3557              		.loc 1 3263 0
 3558 002c 10BD     		pop	{r4, pc}
 3559              	.LVL296:
 3560              	.L322:
 3561 002e 00BF     		.align	2
 3562              	.L321:
 3563 0030 00000000 		.word	.LANCHOR17
 3564 0034 00000000 		.word	.LANCHOR15
 3565              		.cfi_endproc
 3566              	.LFE36:
 3568              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3569              		.align	1
 3570              		.global	vTaskInternalSetTimeOutState
 3571              		.syntax unified
 3572              		.thumb
 3573              		.thumb_func
 3574              		.fpu fpv4-sp-d16
 3576              	vTaskInternalSetTimeOutState:
 3577              	.LFB37:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3578              		.loc 1 3267 0
 3579              		.cfi_startproc
 3580              		@ args = 0, pretend = 0, frame = 0
 3581              		@ frame_needed = 0, uses_anonymous_args = 0
 3582              		@ link register save eliminated.
 3583              	.LVL297:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3584              		.loc 1 3269 0
 3585 0000 034B     		ldr	r3, .L324
 3586 0002 1B68     		ldr	r3, [r3]
 3587 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3588              		.loc 1 3270 0
 3589 0006 034B     		ldr	r3, .L324+4
 3590 0008 1B68     		ldr	r3, [r3]
 3591 000a 4360     		str	r3, [r0, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3592              		.loc 1 3271 0
 3593 000c 7047     		bx	lr
 3594              	.L325:
 3595 000e 00BF     		.align	2
 3596              	.L324:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 167


 3597 0010 00000000 		.word	.LANCHOR17
 3598 0014 00000000 		.word	.LANCHOR15
 3599              		.cfi_endproc
 3600              	.LFE37:
 3602              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3603              		.align	1
 3604              		.global	xTaskCheckForTimeOut
 3605              		.syntax unified
 3606              		.thumb
 3607              		.thumb_func
 3608              		.fpu fpv4-sp-d16
 3610              	xTaskCheckForTimeOut:
 3611              	.LFB38:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3612              		.loc 1 3275 0
 3613              		.cfi_startproc
 3614              		@ args = 0, pretend = 0, frame = 0
 3615              		@ frame_needed = 0, uses_anonymous_args = 0
 3616              	.LVL298:
 3617 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3618              	.LCFI37:
 3619              		.cfi_def_cfa_offset 24
 3620              		.cfi_offset 3, -24
 3621              		.cfi_offset 4, -20
 3622              		.cfi_offset 5, -16
 3623              		.cfi_offset 6, -12
 3624              		.cfi_offset 7, -8
 3625              		.cfi_offset 14, -4
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3626              		.loc 1 3278 0
 3627 0002 50B1     		cbz	r0, .L337
 3628 0004 0546     		mov	r5, r0
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3629              		.loc 1 3279 0
 3630 0006 89B9     		cbnz	r1, .L329
 3631              	.LBB188:
 3632              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3633              		.loc 2 195 0
 3634              		.syntax unified
 3635              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3636 0008 4FF05003 			mov r3, #80												
 3637 000c 83F31188 		msr basepri, r3											
 3638 0010 BFF36F8F 		isb														
 3639 0014 BFF34F8F 		dsb														
 3640              	
 3641              	@ 0 "" 2
 3642              	.LVL299:
 3643              		.thumb
 3644              		.syntax unified
 3645              	.L330:
 3646 0018 FEE7     		b	.L330
 3647              	.L337:
 3648              	.LBE189:
 3649              	.LBE188:
 3650              	.LBB190:
 3651              	.LBB191:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 168


 3652              		.syntax unified
 3653              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3654 001a 4FF05003 			mov r3, #80												
 3655 001e 83F31188 		msr basepri, r3											
 3656 0022 BFF36F8F 		isb														
 3657 0026 BFF34F8F 		dsb														
 3658              	
 3659              	@ 0 "" 2
 3660              	.LVL300:
 3661              		.thumb
 3662              		.syntax unified
 3663              	.L328:
 3664 002a FEE7     		b	.L328
 3665              	.L329:
 3666 002c 0C46     		mov	r4, r1
 3667              	.LBE191:
 3668              	.LBE190:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3669              		.loc 1 3281 0
 3670 002e FFF7FEFF 		bl	vPortEnterCritical
 3671              	.LVL301:
 3672              	.LBB192:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3673              		.loc 1 3284 0
 3674 0032 114B     		ldr	r3, .L339
 3675 0034 1968     		ldr	r1, [r3]
 3676              	.LVL302:
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3677              		.loc 1 3285 0
 3678 0036 6868     		ldr	r0, [r5, #4]
 3679 0038 0A1A     		subs	r2, r1, r0
 3680              	.LVL303:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3681              		.loc 1 3299 0
 3682 003a 2368     		ldr	r3, [r4]
 3683 003c B3F1FF3F 		cmp	r3, #-1
 3684 0040 16D0     		beq	.L334
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3685              		.loc 1 3309 0
 3686 0042 2F68     		ldr	r7, [r5]
 3687 0044 0D4E     		ldr	r6, .L339+4
 3688 0046 3668     		ldr	r6, [r6]
 3689 0048 B742     		cmp	r7, r6
 3690 004a 01D0     		beq	.L332
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3691              		.loc 1 3309 0 is_stmt 0 discriminator 1
 3692 004c 8842     		cmp	r0, r1
 3693 004e 11D9     		bls	.L335
 3694              	.L332:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3695              		.loc 1 3318 0 is_stmt 1
 3696 0050 9342     		cmp	r3, r2
 3697 0052 03D8     		bhi	.L338
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3698              		.loc 1 3327 0
 3699 0054 0023     		movs	r3, #0
 3700 0056 2360     		str	r3, [r4]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 169


 3701              	.LVL304:
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3702              		.loc 1 3328 0
 3703 0058 0124     		movs	r4, #1
 3704              	.LVL305:
 3705 005a 05E0     		b	.L331
 3706              	.LVL306:
 3707              	.L338:
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3708              		.loc 1 3321 0
 3709 005c 9B1A     		subs	r3, r3, r2
 3710 005e 2360     		str	r3, [r4]
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3711              		.loc 1 3322 0
 3712 0060 2846     		mov	r0, r5
 3713 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3714              	.LVL307:
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3715              		.loc 1 3323 0
 3716 0066 0024     		movs	r4, #0
 3717              	.LVL308:
 3718              	.L331:
 3719              	.LBE192:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3720              		.loc 1 3331 0
 3721 0068 FFF7FEFF 		bl	vPortExitCritical
 3722              	.LVL309:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3723              		.loc 1 3334 0
 3724 006c 2046     		mov	r0, r4
 3725 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3726              	.LVL310:
 3727              	.L334:
 3728              	.LBB193:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3729              		.loc 1 3304 0
 3730 0070 0024     		movs	r4, #0
 3731              	.LVL311:
 3732 0072 F9E7     		b	.L331
 3733              	.LVL312:
 3734              	.L335:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3735              		.loc 1 3316 0
 3736 0074 0124     		movs	r4, #1
 3737              	.LVL313:
 3738 0076 F7E7     		b	.L331
 3739              	.L340:
 3740              		.align	2
 3741              	.L339:
 3742 0078 00000000 		.word	.LANCHOR15
 3743 007c 00000000 		.word	.LANCHOR17
 3744              	.LBE193:
 3745              		.cfi_endproc
 3746              	.LFE38:
 3748              		.section	.text.vTaskMissedYield,"ax",%progbits
 3749              		.align	1
 3750              		.global	vTaskMissedYield
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 170


 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3754              		.fpu fpv4-sp-d16
 3756              	vTaskMissedYield:
 3757              	.LFB39:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3758              		.loc 1 3338 0
 3759              		.cfi_startproc
 3760              		@ args = 0, pretend = 0, frame = 0
 3761              		@ frame_needed = 0, uses_anonymous_args = 0
 3762              		@ link register save eliminated.
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3763              		.loc 1 3339 0
 3764 0000 014B     		ldr	r3, .L342
 3765 0002 0122     		movs	r2, #1
 3766 0004 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3767              		.loc 1 3340 0
 3768 0006 7047     		bx	lr
 3769              	.L343:
 3770              		.align	2
 3771              	.L342:
 3772 0008 00000000 		.word	.LANCHOR18
 3773              		.cfi_endproc
 3774              	.LFE39:
 3776              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3777              		.align	1
 3778              		.global	xTaskGetCurrentTaskHandle
 3779              		.syntax unified
 3780              		.thumb
 3781              		.thumb_func
 3782              		.fpu fpv4-sp-d16
 3784              	xTaskGetCurrentTaskHandle:
 3785              	.LFB45:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3786              		.loc 1 3970 0
 3787              		.cfi_startproc
 3788              		@ args = 0, pretend = 0, frame = 0
 3789              		@ frame_needed = 0, uses_anonymous_args = 0
 3790              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3791              		.loc 1 3976 0
 3792 0000 014B     		ldr	r3, .L345
 3793 0002 1868     		ldr	r0, [r3]
 3794              	.LVL314:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3795              		.loc 1 3979 0
 3796 0004 7047     		bx	lr
 3797              	.L346:
 3798 0006 00BF     		.align	2
 3799              	.L345:
 3800 0008 00000000 		.word	.LANCHOR10
 3801              		.cfi_endproc
 3802              	.LFE45:
 3804              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3805              		.align	1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 171


 3806              		.global	xTaskGetSchedulerState
 3807              		.syntax unified
 3808              		.thumb
 3809              		.thumb_func
 3810              		.fpu fpv4-sp-d16
 3812              	xTaskGetSchedulerState:
 3813              	.LFB46:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3814              		.loc 1 3987 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 0
 3817              		@ frame_needed = 0, uses_anonymous_args = 0
 3818              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3819              		.loc 1 3990 0
 3820 0000 054B     		ldr	r3, .L352
 3821 0002 1B68     		ldr	r3, [r3]
 3822 0004 33B1     		cbz	r3, .L349
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3823              		.loc 1 3996 0
 3824 0006 054B     		ldr	r3, .L352+4
 3825 0008 1B68     		ldr	r3, [r3]
 3826 000a 0BB1     		cbz	r3, .L351
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3827              		.loc 1 4002 0
 3828 000c 0020     		movs	r0, #0
 3829              	.LVL315:
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3830              		.loc 1 4007 0
 3831 000e 7047     		bx	lr
 3832              	.LVL316:
 3833              	.L351:
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3834              		.loc 1 3998 0
 3835 0010 0220     		movs	r0, #2
 3836 0012 7047     		bx	lr
 3837              	.L349:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3838              		.loc 1 3992 0
 3839 0014 0120     		movs	r0, #1
 3840 0016 7047     		bx	lr
 3841              	.L353:
 3842              		.align	2
 3843              	.L352:
 3844 0018 00000000 		.word	.LANCHOR11
 3845 001c 00000000 		.word	.LANCHOR16
 3846              		.cfi_endproc
 3847              	.LFE46:
 3849              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3850              		.align	1
 3851              		.global	xTaskPriorityInherit
 3852              		.syntax unified
 3853              		.thumb
 3854              		.thumb_func
 3855              		.fpu fpv4-sp-d16
 3857              	xTaskPriorityInherit:
 3858              	.LFB47:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 172


4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3859              		.loc 1 4015 0
 3860              		.cfi_startproc
 3861              		@ args = 0, pretend = 0, frame = 0
 3862              		@ frame_needed = 0, uses_anonymous_args = 0
 3863              	.LVL317:
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3864              		.loc 1 4022 0
 3865 0000 0028     		cmp	r0, #0
 3866 0002 4BD0     		beq	.L360
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3867              		.loc 1 4015 0
 3868 0004 38B5     		push	{r3, r4, r5, lr}
 3869              	.LCFI38:
 3870              		.cfi_def_cfa_offset 16
 3871              		.cfi_offset 3, -16
 3872              		.cfi_offset 4, -12
 3873              		.cfi_offset 5, -8
 3874              		.cfi_offset 14, -4
 3875 0006 0446     		mov	r4, r0
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3876              		.loc 1 4027 0
 3877 0008 C26A     		ldr	r2, [r0, #44]
 3878 000a 2549     		ldr	r1, .L368
 3879 000c 0968     		ldr	r1, [r1]
 3880 000e C96A     		ldr	r1, [r1, #44]
 3881 0010 8A42     		cmp	r2, r1
 3882 0012 39D2     		bcs	.L356
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3883              		.loc 1 4032 0
 3884 0014 8169     		ldr	r1, [r0, #24]
 3885 0016 0029     		cmp	r1, #0
 3886 0018 05DB     		blt	.L357
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3887              		.loc 1 4034 0
 3888 001a 2149     		ldr	r1, .L368
 3889 001c 0968     		ldr	r1, [r1]
 3890 001e C96A     		ldr	r1, [r1, #44]
 3891 0020 C1F10701 		rsb	r1, r1, #7
 3892 0024 8161     		str	r1, [r0, #24]
 3893              	.L357:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3894              		.loc 1 4043 0
 3895 0026 6069     		ldr	r0, [r4, #20]
 3896              	.LVL318:
 3897 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3898 002c 9100     		lsls	r1, r2, #2
 3899 002e 1D4A     		ldr	r2, .L368+4
 3900 0030 0A44     		add	r2, r2, r1
 3901 0032 9042     		cmp	r0, r2
 3902 0034 05D0     		beq	.L366
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3903              		.loc 1 4064 0
 3904 0036 1A4A     		ldr	r2, .L368
 3905 0038 1268     		ldr	r2, [r2]
 3906 003a D26A     		ldr	r2, [r2, #44]
 3907 003c E262     		str	r2, [r4, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 173


4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3908              		.loc 1 4070 0
 3909 003e 0120     		movs	r0, #1
 3910              	.LVL319:
 3911              	.L354:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3912              		.loc 1 4097 0
 3913 0040 38BD     		pop	{r3, r4, r5, pc}
 3914              	.LVL320:
 3915              	.L366:
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3916              		.loc 1 4045 0
 3917 0042 251D     		adds	r5, r4, #4
 3918 0044 2846     		mov	r0, r5
 3919 0046 FFF7FEFF 		bl	uxListRemove
 3920              	.LVL321:
 3921 004a 40B9     		cbnz	r0, .L359
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3922              		.loc 1 4050 0
 3923 004c E26A     		ldr	r2, [r4, #44]
 3924 004e 0123     		movs	r3, #1
 3925 0050 03FA02F2 		lsl	r2, r3, r2
 3926 0054 1449     		ldr	r1, .L368+8
 3927 0056 0B68     		ldr	r3, [r1]
 3928 0058 23EA0203 		bic	r3, r3, r2
 3929 005c 0B60     		str	r3, [r1]
 3930              	.L359:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3931              		.loc 1 4058 0
 3932 005e 104B     		ldr	r3, .L368
 3933 0060 1B68     		ldr	r3, [r3]
 3934 0062 DB6A     		ldr	r3, [r3, #44]
 3935 0064 E362     		str	r3, [r4, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3936              		.loc 1 4059 0
 3937 0066 0124     		movs	r4, #1
 3938              	.LVL322:
 3939 0068 04FA03F2 		lsl	r2, r4, r3
 3940 006c 0E49     		ldr	r1, .L368+8
 3941 006e 0868     		ldr	r0, [r1]
 3942 0070 0243     		orrs	r2, r2, r0
 3943 0072 0A60     		str	r2, [r1]
 3944 0074 03EB8303 		add	r3, r3, r3, lsl #2
 3945 0078 9A00     		lsls	r2, r3, #2
 3946 007a 2946     		mov	r1, r5
 3947 007c 0948     		ldr	r0, .L368+4
 3948 007e 1044     		add	r0, r0, r2
 3949 0080 FFF7FEFF 		bl	vListInsertEnd
 3950              	.LVL323:
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3951              		.loc 1 4070 0
 3952 0084 2046     		mov	r0, r4
 3953 0086 DBE7     		b	.L354
 3954              	.LVL324:
 3955              	.L356:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3956              		.loc 1 4074 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 174


 3957 0088 826C     		ldr	r2, [r0, #72]
 3958 008a 054B     		ldr	r3, .L368
 3959 008c 1B68     		ldr	r3, [r3]
 3960 008e DB6A     		ldr	r3, [r3, #44]
 3961 0090 9A42     		cmp	r2, r3
 3962 0092 01D2     		bcs	.L367
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3963              		.loc 1 4083 0
 3964 0094 0120     		movs	r0, #1
 3965              	.LVL325:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3966              		.loc 1 4096 0
 3967 0096 D3E7     		b	.L354
 3968              	.LVL326:
 3969              	.L367:
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3970              		.loc 1 4017 0
 3971 0098 0020     		movs	r0, #0
 3972              	.LVL327:
 3973 009a D1E7     		b	.L354
 3974              	.LVL328:
 3975              	.L360:
 3976              	.LCFI39:
 3977              		.cfi_def_cfa_offset 0
 3978              		.cfi_restore 3
 3979              		.cfi_restore 4
 3980              		.cfi_restore 5
 3981              		.cfi_restore 14
 3982 009c 0020     		movs	r0, #0
 3983              	.LVL329:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3984              		.loc 1 4097 0
 3985 009e 7047     		bx	lr
 3986              	.L369:
 3987              		.align	2
 3988              	.L368:
 3989 00a0 00000000 		.word	.LANCHOR10
 3990 00a4 00000000 		.word	.LANCHOR4
 3991 00a8 00000000 		.word	.LANCHOR13
 3992              		.cfi_endproc
 3993              	.LFE47:
 3995              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3996              		.align	1
 3997              		.global	xTaskPriorityDisinherit
 3998              		.syntax unified
 3999              		.thumb
 4000              		.thumb_func
 4001              		.fpu fpv4-sp-d16
 4003              	xTaskPriorityDisinherit:
 4004              	.LFB48:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4005              		.loc 1 4105 0
 4006              		.cfi_startproc
 4007              		@ args = 0, pretend = 0, frame = 0
 4008              		@ frame_needed = 0, uses_anonymous_args = 0
 4009              	.LVL330:
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 175


 4010              		.loc 1 4109 0
 4011 0000 0028     		cmp	r0, #0
 4012 0002 49D0     		beq	.L377
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4013              		.loc 1 4105 0
 4014 0004 38B5     		push	{r3, r4, r5, lr}
 4015              	.LCFI40:
 4016              		.cfi_def_cfa_offset 16
 4017              		.cfi_offset 3, -16
 4018              		.cfi_offset 4, -12
 4019              		.cfi_offset 5, -8
 4020              		.cfi_offset 14, -4
 4021 0006 0446     		mov	r4, r0
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4022              		.loc 1 4115 0
 4023 0008 264A     		ldr	r2, .L384
 4024 000a 1268     		ldr	r2, [r2]
 4025 000c 8242     		cmp	r2, r0
 4026 000e 08D0     		beq	.L372
 4027              	.LBB194:
 4028              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4029              		.loc 2 195 0
 4030              		.syntax unified
 4031              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4032 0010 4FF05003 			mov r3, #80												
 4033 0014 83F31188 		msr basepri, r3											
 4034 0018 BFF36F8F 		isb														
 4035 001c BFF34F8F 		dsb														
 4036              	
 4037              	@ 0 "" 2
 4038              	.LVL331:
 4039              		.thumb
 4040              		.syntax unified
 4041              	.L373:
 4042 0020 FEE7     		b	.L373
 4043              	.L372:
 4044              	.LBE195:
 4045              	.LBE194:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4046              		.loc 1 4116 0
 4047 0022 C26C     		ldr	r2, [r0, #76]
 4048 0024 42B9     		cbnz	r2, .L374
 4049              	.LBB196:
 4050              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4051              		.loc 2 195 0
 4052              		.syntax unified
 4053              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4054 0026 4FF05003 			mov r3, #80												
 4055 002a 83F31188 		msr basepri, r3											
 4056 002e BFF36F8F 		isb														
 4057 0032 BFF34F8F 		dsb														
 4058              	
 4059              	@ 0 "" 2
 4060              	.LVL332:
 4061              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 176


 4062              		.syntax unified
 4063              	.L375:
 4064 0036 FEE7     		b	.L375
 4065              	.L374:
 4066              	.LBE197:
 4067              	.LBE196:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4068              		.loc 1 4117 0
 4069 0038 013A     		subs	r2, r2, #1
 4070 003a C264     		str	r2, [r0, #76]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4071              		.loc 1 4121 0
 4072 003c C06A     		ldr	r0, [r0, #44]
 4073              	.LVL333:
 4074 003e A16C     		ldr	r1, [r4, #72]
 4075 0040 8842     		cmp	r0, r1
 4076 0042 2BD0     		beq	.L378
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4077              		.loc 1 4124 0
 4078 0044 62BB     		cbnz	r2, .L379
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4079              		.loc 1 4131 0
 4080 0046 251D     		adds	r5, r4, #4
 4081 0048 2846     		mov	r0, r5
 4082 004a FFF7FEFF 		bl	uxListRemove
 4083              	.LVL334:
 4084 004e 70B9     		cbnz	r0, .L376
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4085              		.loc 1 4133 0
 4086 0050 E26A     		ldr	r2, [r4, #44]
 4087 0052 1423     		movs	r3, #20
 4088 0054 03FB02F3 		mul	r3, r3, r2
 4089 0058 1349     		ldr	r1, .L384+4
 4090 005a CB58     		ldr	r3, [r1, r3]
 4091 005c 3BB9     		cbnz	r3, .L376
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4092              		.loc 1 4133 0 is_stmt 0 discriminator 1
 4093 005e 0123     		movs	r3, #1
 4094 0060 03FA02F2 		lsl	r2, r3, r2
 4095 0064 1149     		ldr	r1, .L384+8
 4096 0066 0B68     		ldr	r3, [r1]
 4097 0068 23EA0203 		bic	r3, r3, r2
 4098 006c 0B60     		str	r3, [r1]
 4099              	.L376:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4100              		.loc 1 4143 0 is_stmt 1
 4101 006e A36C     		ldr	r3, [r4, #72]
 4102 0070 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4103              		.loc 1 4148 0
 4104 0072 C3F10702 		rsb	r2, r3, #7
 4105 0076 A261     		str	r2, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4106              		.loc 1 4149 0
 4107 0078 0124     		movs	r4, #1
 4108              	.LVL335:
 4109 007a 04FA03F2 		lsl	r2, r4, r3
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 177


 4110 007e 0B49     		ldr	r1, .L384+8
 4111 0080 0868     		ldr	r0, [r1]
 4112 0082 0243     		orrs	r2, r2, r0
 4113 0084 0A60     		str	r2, [r1]
 4114 0086 2946     		mov	r1, r5
 4115 0088 074A     		ldr	r2, .L384+4
 4116 008a 1420     		movs	r0, #20
 4117 008c 00FB0320 		mla	r0, r0, r3, r2
 4118 0090 FFF7FEFF 		bl	vListInsertEnd
 4119              	.LVL336:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4120              		.loc 1 4159 0
 4121 0094 2046     		mov	r0, r4
 4122              	.LVL337:
 4123              	.L370:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 4177 0
 4125 0096 38BD     		pop	{r3, r4, r5, pc}
 4126              	.LVL338:
 4127              	.L377:
 4128              	.LCFI41:
 4129              		.cfi_def_cfa_offset 0
 4130              		.cfi_restore 3
 4131              		.cfi_restore 4
 4132              		.cfi_restore 5
 4133              		.cfi_restore 14
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4134              		.loc 1 4107 0
 4135 0098 0020     		movs	r0, #0
 4136              	.LVL339:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4137              		.loc 1 4177 0
 4138 009a 7047     		bx	lr
 4139              	.LVL340:
 4140              	.L378:
 4141              	.LCFI42:
 4142              		.cfi_def_cfa_offset 16
 4143              		.cfi_offset 3, -16
 4144              		.cfi_offset 4, -12
 4145              		.cfi_offset 5, -8
 4146              		.cfi_offset 14, -4
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4147              		.loc 1 4107 0
 4148 009c 0020     		movs	r0, #0
 4149 009e FAE7     		b	.L370
 4150              	.L379:
 4151 00a0 0020     		movs	r0, #0
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4152              		.loc 1 4176 0
 4153 00a2 F8E7     		b	.L370
 4154              	.L385:
 4155              		.align	2
 4156              	.L384:
 4157 00a4 00000000 		.word	.LANCHOR10
 4158 00a8 00000000 		.word	.LANCHOR4
 4159 00ac 00000000 		.word	.LANCHOR13
 4160              		.cfi_endproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 178


 4161              	.LFE48:
 4163              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4164              		.align	1
 4165              		.global	vTaskPriorityDisinheritAfterTimeout
 4166              		.syntax unified
 4167              		.thumb
 4168              		.thumb_func
 4169              		.fpu fpv4-sp-d16
 4171              	vTaskPriorityDisinheritAfterTimeout:
 4172              	.LFB49:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4173              		.loc 1 4185 0
 4174              		.cfi_startproc
 4175              		@ args = 0, pretend = 0, frame = 0
 4176              		@ frame_needed = 0, uses_anonymous_args = 0
 4177              	.LVL341:
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4178              		.loc 1 4190 0
 4179 0000 0028     		cmp	r0, #0
 4180 0002 4FD0     		beq	.L396
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4181              		.loc 1 4185 0
 4182 0004 38B5     		push	{r3, r4, r5, lr}
 4183              	.LCFI43:
 4184              		.cfi_def_cfa_offset 16
 4185              		.cfi_offset 3, -16
 4186              		.cfi_offset 4, -12
 4187              		.cfi_offset 5, -8
 4188              		.cfi_offset 14, -4
 4189 0006 0346     		mov	r3, r0
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4190              		.loc 1 4194 0
 4191 0008 C06C     		ldr	r0, [r0, #76]
 4192              	.LVL342:
 4193 000a 40B9     		cbnz	r0, .L388
 4194              	.LBB198:
 4195              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4196              		.loc 2 195 0
 4197              		.syntax unified
 4198              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4199 000c 4FF05003 			mov r3, #80												
 4200 0010 83F31188 		msr basepri, r3											
 4201 0014 BFF36F8F 		isb														
 4202 0018 BFF34F8F 		dsb														
 4203              	
 4204              	@ 0 "" 2
 4205              	.LVL343:
 4206              		.thumb
 4207              		.syntax unified
 4208              	.L389:
 4209 001c FEE7     		b	.L389
 4210              	.LVL344:
 4211              	.L388:
 4212              	.LBE199:
 4213              	.LBE198:
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 179


 4214              		.loc 1 4200 0
 4215 001e 9A6C     		ldr	r2, [r3, #72]
 4216 0020 8A42     		cmp	r2, r1
 4217 0022 00D2     		bcs	.L390
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4218              		.loc 1 4202 0
 4219 0024 0A46     		mov	r2, r1
 4220              	.L390:
 4221              	.LVL345:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4222              		.loc 1 4210 0
 4223 0026 D96A     		ldr	r1, [r3, #44]
 4224              	.LVL346:
 4225 0028 9142     		cmp	r1, r2
 4226 002a 01D0     		beq	.L386
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4227              		.loc 1 4216 0
 4228 002c 0128     		cmp	r0, #1
 4229 002e 00D0     		beq	.L399
 4230              	.LVL347:
 4231              	.L386:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4232              		.loc 1 4282 0
 4233 0030 38BD     		pop	{r3, r4, r5, pc}
 4234              	.LVL348:
 4235              	.L399:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4236              		.loc 1 4221 0
 4237 0032 1D48     		ldr	r0, .L400
 4238 0034 0068     		ldr	r0, [r0]
 4239 0036 9842     		cmp	r0, r3
 4240 0038 08D1     		bne	.L391
 4241              	.LBB200:
 4242              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4243              		.loc 2 195 0
 4244              		.syntax unified
 4245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4246 003a 4FF05003 			mov r3, #80												
 4247 003e 83F31188 		msr basepri, r3											
 4248 0042 BFF36F8F 		isb														
 4249 0046 BFF34F8F 		dsb														
 4250              	
 4251              	@ 0 "" 2
 4252              	.LVL349:
 4253              		.thumb
 4254              		.syntax unified
 4255              	.L392:
 4256 004a FEE7     		b	.L392
 4257              	.LVL350:
 4258              	.L391:
 4259              	.LBE201:
 4260              	.LBE200:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4261              		.loc 1 4228 0
 4262 004c DA62     		str	r2, [r3, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 180


 4263              		.loc 1 4232 0
 4264 004e 9869     		ldr	r0, [r3, #24]
 4265 0050 0028     		cmp	r0, #0
 4266 0052 02DB     		blt	.L393
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4267              		.loc 1 4234 0
 4268 0054 C2F10702 		rsb	r2, r2, #7
 4269              	.LVL351:
 4270 0058 9A61     		str	r2, [r3, #24]
 4271              	.L393:
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4272              		.loc 1 4247 0
 4273 005a 5A69     		ldr	r2, [r3, #20]
 4274 005c 1348     		ldr	r0, .L400+4
 4275 005e 1424     		movs	r4, #20
 4276 0060 04FB0101 		mla	r1, r4, r1, r0
 4277              	.LVL352:
 4278 0064 8A42     		cmp	r2, r1
 4279 0066 E3D1     		bne	.L386
 4280 0068 1C46     		mov	r4, r3
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4281              		.loc 1 4249 0
 4282 006a 1D1D     		adds	r5, r3, #4
 4283 006c 2846     		mov	r0, r5
 4284 006e FFF7FEFF 		bl	uxListRemove
 4285              	.LVL353:
 4286 0072 40B9     		cbnz	r0, .L394
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4287              		.loc 1 4254 0
 4288 0074 E26A     		ldr	r2, [r4, #44]
 4289 0076 0123     		movs	r3, #1
 4290 0078 03FA02F2 		lsl	r2, r3, r2
 4291 007c 0C49     		ldr	r1, .L400+8
 4292 007e 0B68     		ldr	r3, [r1]
 4293 0080 23EA0203 		bic	r3, r3, r2
 4294 0084 0B60     		str	r3, [r1]
 4295              	.L394:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4296              		.loc 1 4261 0
 4297 0086 E26A     		ldr	r2, [r4, #44]
 4298 0088 0123     		movs	r3, #1
 4299 008a 9340     		lsls	r3, r3, r2
 4300 008c 0849     		ldr	r1, .L400+8
 4301 008e 0868     		ldr	r0, [r1]
 4302 0090 0343     		orrs	r3, r3, r0
 4303 0092 0B60     		str	r3, [r1]
 4304 0094 2946     		mov	r1, r5
 4305 0096 054B     		ldr	r3, .L400+4
 4306 0098 1420     		movs	r0, #20
 4307 009a 00FB0230 		mla	r0, r0, r2, r3
 4308 009e FFF7FEFF 		bl	vListInsertEnd
 4309              	.LVL354:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4310              		.loc 1 4282 0
 4311 00a2 C5E7     		b	.L386
 4312              	.LVL355:
 4313              	.L396:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 181


 4314              	.LCFI44:
 4315              		.cfi_def_cfa_offset 0
 4316              		.cfi_restore 3
 4317              		.cfi_restore 4
 4318              		.cfi_restore 5
 4319              		.cfi_restore 14
 4320 00a4 7047     		bx	lr
 4321              	.L401:
 4322 00a6 00BF     		.align	2
 4323              	.L400:
 4324 00a8 00000000 		.word	.LANCHOR10
 4325 00ac 00000000 		.word	.LANCHOR4
 4326 00b0 00000000 		.word	.LANCHOR13
 4327              		.cfi_endproc
 4328              	.LFE49:
 4330              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4331              		.align	1
 4332              		.global	uxTaskResetEventItemValue
 4333              		.syntax unified
 4334              		.thumb
 4335              		.thumb_func
 4336              		.fpu fpv4-sp-d16
 4338              	uxTaskResetEventItemValue:
 4339              	.LFB50:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4340              		.loc 1 4603 0
 4341              		.cfi_startproc
 4342              		@ args = 0, pretend = 0, frame = 0
 4343              		@ frame_needed = 0, uses_anonymous_args = 0
 4344              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4345              		.loc 1 4606 0
 4346 0000 044A     		ldr	r2, .L403
 4347 0002 1368     		ldr	r3, [r2]
 4348 0004 9869     		ldr	r0, [r3, #24]
 4349              	.LVL356:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4350              		.loc 1 4610 0
 4351 0006 1368     		ldr	r3, [r2]
 4352 0008 DB6A     		ldr	r3, [r3, #44]
 4353 000a 1268     		ldr	r2, [r2]
 4354 000c C3F10703 		rsb	r3, r3, #7
 4355 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4356              		.loc 1 4613 0
 4357 0012 7047     		bx	lr
 4358              	.L404:
 4359              		.align	2
 4360              	.L403:
 4361 0014 00000000 		.word	.LANCHOR10
 4362              		.cfi_endproc
 4363              	.LFE50:
 4365              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4366              		.align	1
 4367              		.global	pvTaskIncrementMutexHeldCount
 4368              		.syntax unified
 4369              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 182


 4370              		.thumb_func
 4371              		.fpu fpv4-sp-d16
 4373              	pvTaskIncrementMutexHeldCount:
 4374              	.LFB51:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4375              		.loc 1 4619 0
 4376              		.cfi_startproc
 4377              		@ args = 0, pretend = 0, frame = 0
 4378              		@ frame_needed = 0, uses_anonymous_args = 0
 4379              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4380              		.loc 1 4622 0
 4381 0000 054B     		ldr	r3, .L407
 4382 0002 1B68     		ldr	r3, [r3]
 4383 0004 23B1     		cbz	r3, .L406
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4384              		.loc 1 4624 0
 4385 0006 044B     		ldr	r3, .L407
 4386 0008 1A68     		ldr	r2, [r3]
 4387 000a D36C     		ldr	r3, [r2, #76]
 4388 000c 0133     		adds	r3, r3, #1
 4389 000e D364     		str	r3, [r2, #76]
 4390              	.L406:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4391              		.loc 1 4627 0
 4392 0010 014B     		ldr	r3, .L407
 4393 0012 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4394              		.loc 1 4628 0
 4395 0014 7047     		bx	lr
 4396              	.L408:
 4397 0016 00BF     		.align	2
 4398              	.L407:
 4399 0018 00000000 		.word	.LANCHOR10
 4400              		.cfi_endproc
 4401              	.LFE51:
 4403              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4404              		.align	1
 4405              		.global	ulTaskNotifyTake
 4406              		.syntax unified
 4407              		.thumb
 4408              		.thumb_func
 4409              		.fpu fpv4-sp-d16
 4411              	ulTaskNotifyTake:
 4412              	.LFB52:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4413              		.loc 1 4636 0
 4414              		.cfi_startproc
 4415              		@ args = 0, pretend = 0, frame = 0
 4416              		@ frame_needed = 0, uses_anonymous_args = 0
 4417              	.LVL357:
 4418 0000 38B5     		push	{r3, r4, r5, lr}
 4419              	.LCFI45:
 4420              		.cfi_def_cfa_offset 16
 4421              		.cfi_offset 3, -16
 4422              		.cfi_offset 4, -12
 4423              		.cfi_offset 5, -8
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 183


 4424              		.cfi_offset 14, -4
 4425 0002 0546     		mov	r5, r0
 4426 0004 0C46     		mov	r4, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4427              		.loc 1 4639 0
 4428 0006 FFF7FEFF 		bl	vPortEnterCritical
 4429              	.LVL358:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4430              		.loc 1 4642 0
 4431 000a 194B     		ldr	r3, .L416
 4432 000c 1B68     		ldr	r3, [r3]
 4433 000e 5B6D     		ldr	r3, [r3, #84]
 4434 0010 2BB9     		cbnz	r3, .L410
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4435              		.loc 1 4645 0
 4436 0012 174B     		ldr	r3, .L416
 4437 0014 1B68     		ldr	r3, [r3]
 4438 0016 0122     		movs	r2, #1
 4439 0018 83F85820 		strb	r2, [r3, #88]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4440              		.loc 1 4647 0
 4441 001c ACB9     		cbnz	r4, .L414
 4442              	.L410:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4443              		.loc 1 4668 0
 4444 001e FFF7FEFF 		bl	vPortExitCritical
 4445              	.LVL359:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4446              		.loc 1 4670 0
 4447 0022 FFF7FEFF 		bl	vPortEnterCritical
 4448              	.LVL360:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4449              		.loc 1 4673 0
 4450 0026 124B     		ldr	r3, .L416
 4451 0028 1B68     		ldr	r3, [r3]
 4452 002a 5C6D     		ldr	r4, [r3, #84]
 4453              	.LVL361:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4454              		.loc 1 4675 0
 4455 002c 24B1     		cbz	r4, .L411
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4456              		.loc 1 4677 0
 4457 002e CDB9     		cbnz	r5, .L415
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4458              		.loc 1 4683 0
 4459 0030 0F4B     		ldr	r3, .L416
 4460 0032 1B68     		ldr	r3, [r3]
 4461 0034 621E     		subs	r2, r4, #1
 4462 0036 5A65     		str	r2, [r3, #84]
 4463              	.L411:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4464              		.loc 1 4691 0
 4465 0038 0D4B     		ldr	r3, .L416
 4466 003a 1B68     		ldr	r3, [r3]
 4467 003c 0022     		movs	r2, #0
 4468 003e 83F85820 		strb	r2, [r3, #88]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 184


 4469              		.loc 1 4693 0
 4470 0042 FFF7FEFF 		bl	vPortExitCritical
 4471              	.LVL362:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4472              		.loc 1 4696 0
 4473 0046 2046     		mov	r0, r4
 4474 0048 38BD     		pop	{r3, r4, r5, pc}
 4475              	.LVL363:
 4476              	.L414:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4477              		.loc 1 4649 0
 4478 004a 1146     		mov	r1, r2
 4479 004c 2046     		mov	r0, r4
 4480 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4481              	.LVL364:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4482              		.loc 1 4656 0
 4483 0052 084B     		ldr	r3, .L416+4
 4484 0054 4FF08052 		mov	r2, #268435456
 4485 0058 1A60     		str	r2, [r3]
 4486              		.syntax unified
 4487              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4488 005a BFF34F8F 		dsb
 4489              	@ 0 "" 2
 4490              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4491 005e BFF36F8F 		isb
 4492              	@ 0 "" 2
 4493              		.thumb
 4494              		.syntax unified
 4495 0062 DCE7     		b	.L410
 4496              	.LVL365:
 4497              	.L415:
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4498              		.loc 1 4679 0
 4499 0064 024B     		ldr	r3, .L416
 4500 0066 1B68     		ldr	r3, [r3]
 4501 0068 0022     		movs	r2, #0
 4502 006a 5A65     		str	r2, [r3, #84]
 4503 006c E4E7     		b	.L411
 4504              	.L417:
 4505 006e 00BF     		.align	2
 4506              	.L416:
 4507 0070 00000000 		.word	.LANCHOR10
 4508 0074 04ED00E0 		.word	-536810236
 4509              		.cfi_endproc
 4510              	.LFE52:
 4512              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4513              		.align	1
 4514              		.global	xTaskNotifyWait
 4515              		.syntax unified
 4516              		.thumb
 4517              		.thumb_func
 4518              		.fpu fpv4-sp-d16
 4520              	xTaskNotifyWait:
 4521              	.LFB53:
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4522              		.loc 1 4704 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 185


 4523              		.cfi_startproc
 4524              		@ args = 0, pretend = 0, frame = 0
 4525              		@ frame_needed = 0, uses_anonymous_args = 0
 4526              	.LVL366:
 4527 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4528              	.LCFI46:
 4529              		.cfi_def_cfa_offset 24
 4530              		.cfi_offset 3, -24
 4531              		.cfi_offset 4, -20
 4532              		.cfi_offset 5, -16
 4533              		.cfi_offset 6, -12
 4534              		.cfi_offset 7, -8
 4535              		.cfi_offset 14, -4
 4536 0002 0746     		mov	r7, r0
 4537 0004 0D46     		mov	r5, r1
 4538 0006 1446     		mov	r4, r2
 4539 0008 1E46     		mov	r6, r3
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4540              		.loc 1 4707 0
 4541 000a FFF7FEFF 		bl	vPortEnterCritical
 4542              	.LVL367:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4543              		.loc 1 4710 0
 4544 000e 204B     		ldr	r3, .L426
 4545 0010 1B68     		ldr	r3, [r3]
 4546 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4547 0016 DBB2     		uxtb	r3, r3
 4548 0018 022B     		cmp	r3, #2
 4549 001a 0AD0     		beq	.L419
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4550              		.loc 1 4715 0
 4551 001c 1C4B     		ldr	r3, .L426
 4552 001e 1A68     		ldr	r2, [r3]
 4553 0020 506D     		ldr	r0, [r2, #84]
 4554 0022 20EA0700 		bic	r0, r0, r7
 4555 0026 5065     		str	r0, [r2, #84]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4556              		.loc 1 4718 0
 4557 0028 1B68     		ldr	r3, [r3]
 4558 002a 0122     		movs	r2, #1
 4559 002c 83F85820 		strb	r2, [r3, #88]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4560              		.loc 1 4720 0
 4561 0030 CEB9     		cbnz	r6, .L424
 4562              	.L419:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4563              		.loc 1 4741 0
 4564 0032 FFF7FEFF 		bl	vPortExitCritical
 4565              	.LVL368:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4566              		.loc 1 4743 0
 4567 0036 FFF7FEFF 		bl	vPortEnterCritical
 4568              	.LVL369:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4569              		.loc 1 4747 0
 4570 003a 1CB1     		cbz	r4, .L420
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 186


 4571              		.loc 1 4751 0
 4572 003c 144B     		ldr	r3, .L426
 4573 003e 1B68     		ldr	r3, [r3]
 4574 0040 5B6D     		ldr	r3, [r3, #84]
 4575 0042 2360     		str	r3, [r4]
 4576              	.L420:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4577              		.loc 1 4758 0
 4578 0044 124B     		ldr	r3, .L426
 4579 0046 1B68     		ldr	r3, [r3]
 4580 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4581 004c DBB2     		uxtb	r3, r3
 4582 004e 022B     		cmp	r3, #2
 4583 0050 16D0     		beq	.L425
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4584              		.loc 1 4761 0
 4585 0052 0024     		movs	r4, #0
 4586              	.LVL370:
 4587              	.L421:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4588              		.loc 1 4771 0
 4589 0054 0E4B     		ldr	r3, .L426
 4590 0056 1B68     		ldr	r3, [r3]
 4591 0058 0022     		movs	r2, #0
 4592 005a 83F85820 		strb	r2, [r3, #88]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4593              		.loc 1 4773 0
 4594 005e FFF7FEFF 		bl	vPortExitCritical
 4595              	.LVL371:
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4596              		.loc 1 4776 0
 4597 0062 2046     		mov	r0, r4
 4598 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4599              	.LVL372:
 4600              	.L424:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4601              		.loc 1 4722 0
 4602 0066 1146     		mov	r1, r2
 4603 0068 3046     		mov	r0, r6
 4604 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4605              	.LVL373:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4606              		.loc 1 4729 0
 4607 006e 094B     		ldr	r3, .L426+4
 4608 0070 4FF08052 		mov	r2, #268435456
 4609 0074 1A60     		str	r2, [r3]
 4610              		.syntax unified
 4611              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4612 0076 BFF34F8F 		dsb
 4613              	@ 0 "" 2
 4614              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4615 007a BFF36F8F 		isb
 4616              	@ 0 "" 2
 4617              		.thumb
 4618              		.syntax unified
 4619 007e D8E7     		b	.L419
 4620              	.L425:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 187


4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4621              		.loc 1 4767 0
 4622 0080 034B     		ldr	r3, .L426
 4623 0082 1A68     		ldr	r2, [r3]
 4624 0084 536D     		ldr	r3, [r2, #84]
 4625 0086 23EA0505 		bic	r5, r3, r5
 4626              	.LVL374:
 4627 008a 5565     		str	r5, [r2, #84]
 4628              	.LVL375:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4629              		.loc 1 4768 0
 4630 008c 0124     		movs	r4, #1
 4631              	.LVL376:
 4632 008e E1E7     		b	.L421
 4633              	.L427:
 4634              		.align	2
 4635              	.L426:
 4636 0090 00000000 		.word	.LANCHOR10
 4637 0094 04ED00E0 		.word	-536810236
 4638              		.cfi_endproc
 4639              	.LFE53:
 4641              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4642              		.align	1
 4643              		.global	xTaskGenericNotify
 4644              		.syntax unified
 4645              		.thumb
 4646              		.thumb_func
 4647              		.fpu fpv4-sp-d16
 4649              	xTaskGenericNotify:
 4650              	.LFB54:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4651              		.loc 1 4784 0
 4652              		.cfi_startproc
 4653              		@ args = 0, pretend = 0, frame = 0
 4654              		@ frame_needed = 0, uses_anonymous_args = 0
 4655              	.LVL377:
 4656 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4657              	.LCFI47:
 4658              		.cfi_def_cfa_offset 24
 4659              		.cfi_offset 3, -24
 4660              		.cfi_offset 4, -20
 4661              		.cfi_offset 5, -16
 4662              		.cfi_offset 6, -12
 4663              		.cfi_offset 7, -8
 4664              		.cfi_offset 14, -4
 4665              	.LVL378:
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4666              		.loc 1 4789 0
 4667 0002 40B9     		cbnz	r0, .L429
 4668              	.LBB202:
 4669              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4670              		.loc 2 195 0
 4671              		.syntax unified
 4672              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4673 0004 4FF05003 			mov r3, #80												
 4674 0008 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 188


 4675 000c BFF36F8F 		isb														
 4676 0010 BFF34F8F 		dsb														
 4677              	
 4678              	@ 0 "" 2
 4679              	.LVL379:
 4680              		.thumb
 4681              		.syntax unified
 4682              	.L430:
 4683 0014 FEE7     		b	.L430
 4684              	.LVL380:
 4685              	.L429:
 4686 0016 0446     		mov	r4, r0
 4687 0018 1F46     		mov	r7, r3
 4688 001a 1646     		mov	r6, r2
 4689 001c 0D46     		mov	r5, r1
 4690              	.LVL381:
 4691              	.LBE203:
 4692              	.LBE202:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4693              		.loc 1 4792 0
 4694 001e FFF7FEFF 		bl	vPortEnterCritical
 4695              	.LVL382:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4696              		.loc 1 4794 0
 4697 0022 0FB1     		cbz	r7, .L431
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4698              		.loc 1 4796 0
 4699 0024 636D     		ldr	r3, [r4, #84]
 4700 0026 3B60     		str	r3, [r7]
 4701              	.L431:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4702              		.loc 1 4799 0
 4703 0028 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 4704 002c DBB2     		uxtb	r3, r3
 4705              	.LVL383:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4706              		.loc 1 4801 0
 4707 002e 0222     		movs	r2, #2
 4708 0030 84F85820 		strb	r2, [r4, #88]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4709              		.loc 1 4803 0
 4710 0034 042E     		cmp	r6, #4
 4711 0036 1BD8     		bhi	.L432
 4712 0038 DFE806F0 		tbb	[pc, r6]
 4713              	.L434:
 4714 003c 27       		.byte	(.L443-.L434)/2
 4715 003d 03       		.byte	(.L435-.L434)/2
 4716 003e 0D       		.byte	(.L436-.L434)/2
 4717 003f 12       		.byte	(.L437-.L434)/2
 4718 0040 15       		.byte	(.L438-.L434)/2
 4719 0041 00       		.p2align 1
 4720              	.L435:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4721              		.loc 1 4806 0
 4722 0042 626D     		ldr	r2, [r4, #84]
 4723 0044 1543     		orrs	r5, r5, r2
 4724              	.LVL384:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 189


 4725 0046 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4726              		.loc 1 4786 0
 4727 0048 0125     		movs	r5, #1
 4728              	.L433:
 4729              	.LVL385:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4730              		.loc 1 4847 0
 4731 004a 012B     		cmp	r3, #1
 4732 004c 23D0     		beq	.L447
 4733              	.LVL386:
 4734              	.L440:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4735              		.loc 1 4887 0
 4736 004e FFF7FEFF 		bl	vPortExitCritical
 4737              	.LVL387:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4738              		.loc 1 4890 0
 4739 0052 2846     		mov	r0, r5
 4740 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4741              	.LVL388:
 4742              	.L436:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4743              		.loc 1 4810 0
 4744 0056 626D     		ldr	r2, [r4, #84]
 4745 0058 0132     		adds	r2, r2, #1
 4746 005a 6265     		str	r2, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4747              		.loc 1 4786 0
 4748 005c 0125     		movs	r5, #1
 4749              	.LVL389:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4750              		.loc 1 4811 0
 4751 005e F4E7     		b	.L433
 4752              	.LVL390:
 4753              	.L437:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4754              		.loc 1 4814 0
 4755 0060 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4756              		.loc 1 4786 0
 4757 0062 0125     		movs	r5, #1
 4758              	.LVL391:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4759              		.loc 1 4815 0
 4760 0064 F1E7     		b	.L433
 4761              	.LVL392:
 4762              	.L438:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4763              		.loc 1 4818 0
 4764 0066 022B     		cmp	r3, #2
 4765 0068 11D0     		beq	.L444
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4766              		.loc 1 4820 0
 4767 006a 6565     		str	r5, [r4, #84]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4768              		.loc 1 4786 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 190


 4769 006c 0125     		movs	r5, #1
 4770              	.LVL393:
 4771 006e ECE7     		b	.L433
 4772              	.LVL394:
 4773              	.L432:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4774              		.loc 1 4838 0
 4775 0070 626D     		ldr	r2, [r4, #84]
 4776 0072 B2F1FF3F 		cmp	r2, #-1
 4777 0076 0CD0     		beq	.L445
 4778              	.LBB204:
 4779              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4780              		.loc 2 195 0
 4781              		.syntax unified
 4782              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4783 0078 4FF05003 			mov r3, #80												
 4784 007c 83F31188 		msr basepri, r3											
 4785 0080 BFF36F8F 		isb														
 4786 0084 BFF34F8F 		dsb														
 4787              	
 4788              	@ 0 "" 2
 4789              	.LVL395:
 4790              		.thumb
 4791              		.syntax unified
 4792              	.L439:
 4793 0088 FEE7     		b	.L439
 4794              	.LVL396:
 4795              	.L443:
 4796              	.LBE205:
 4797              	.LBE204:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4798              		.loc 1 4786 0
 4799 008a 0125     		movs	r5, #1
 4800              	.LVL397:
 4801 008c DDE7     		b	.L433
 4802              	.LVL398:
 4803              	.L444:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4804              		.loc 1 4825 0
 4805 008e 0025     		movs	r5, #0
 4806              	.LVL399:
 4807 0090 DBE7     		b	.L433
 4808              	.LVL400:
 4809              	.L445:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4810              		.loc 1 4786 0
 4811 0092 0125     		movs	r5, #1
 4812              	.LVL401:
 4813 0094 D9E7     		b	.L433
 4814              	.LVL402:
 4815              	.L447:
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4816              		.loc 1 4849 0
 4817 0096 261D     		adds	r6, r4, #4
 4818 0098 3046     		mov	r0, r6
 4819 009a FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 191


 4820              	.LVL403:
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4821              		.loc 1 4850 0
 4822 009e E26A     		ldr	r2, [r4, #44]
 4823 00a0 0123     		movs	r3, #1
 4824 00a2 9340     		lsls	r3, r3, r2
 4825 00a4 1249     		ldr	r1, .L448
 4826 00a6 0868     		ldr	r0, [r1]
 4827 00a8 0343     		orrs	r3, r3, r0
 4828 00aa 0B60     		str	r3, [r1]
 4829 00ac 3146     		mov	r1, r6
 4830 00ae 114B     		ldr	r3, .L448+4
 4831 00b0 1420     		movs	r0, #20
 4832 00b2 00FB0230 		mla	r0, r0, r2, r3
 4833 00b6 FFF7FEFF 		bl	vListInsertEnd
 4834              	.LVL404:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4835              		.loc 1 4853 0
 4836 00ba A36A     		ldr	r3, [r4, #40]
 4837 00bc 43B1     		cbz	r3, .L441
 4838              	.LBB206:
 4839              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4840              		.loc 2 195 0
 4841              		.syntax unified
 4842              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4843 00be 4FF05003 			mov r3, #80												
 4844 00c2 83F31188 		msr basepri, r3											
 4845 00c6 BFF36F8F 		isb														
 4846 00ca BFF34F8F 		dsb														
 4847              	
 4848              	@ 0 "" 2
 4849              	.LVL405:
 4850              		.thumb
 4851              		.syntax unified
 4852              	.L442:
 4853 00ce FEE7     		b	.L442
 4854              	.L441:
 4855              	.LBE207:
 4856              	.LBE206:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4857              		.loc 1 4871 0
 4858 00d0 E26A     		ldr	r2, [r4, #44]
 4859 00d2 094B     		ldr	r3, .L448+8
 4860 00d4 1B68     		ldr	r3, [r3]
 4861 00d6 DB6A     		ldr	r3, [r3, #44]
 4862 00d8 9A42     		cmp	r2, r3
 4863 00da B8D9     		bls	.L440
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4864              		.loc 1 4875 0
 4865 00dc 074B     		ldr	r3, .L448+12
 4866 00de 4FF08052 		mov	r2, #268435456
 4867 00e2 1A60     		str	r2, [r3]
 4868              		.syntax unified
 4869              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4870 00e4 BFF34F8F 		dsb
 4871              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 192


 4872              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4873 00e8 BFF36F8F 		isb
 4874              	@ 0 "" 2
 4875              		.thumb
 4876              		.syntax unified
 4877 00ec AFE7     		b	.L440
 4878              	.L449:
 4879 00ee 00BF     		.align	2
 4880              	.L448:
 4881 00f0 00000000 		.word	.LANCHOR13
 4882 00f4 00000000 		.word	.LANCHOR4
 4883 00f8 00000000 		.word	.LANCHOR10
 4884 00fc 04ED00E0 		.word	-536810236
 4885              		.cfi_endproc
 4886              	.LFE54:
 4888              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4889              		.align	1
 4890              		.global	xTaskGenericNotifyFromISR
 4891              		.syntax unified
 4892              		.thumb
 4893              		.thumb_func
 4894              		.fpu fpv4-sp-d16
 4896              	xTaskGenericNotifyFromISR:
 4897              	.LFB55:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4898              		.loc 1 4898 0
 4899              		.cfi_startproc
 4900              		@ args = 4, pretend = 0, frame = 0
 4901              		@ frame_needed = 0, uses_anonymous_args = 0
 4902              	.LVL406:
 4903 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4904              	.LCFI48:
 4905              		.cfi_def_cfa_offset 32
 4906              		.cfi_offset 3, -32
 4907              		.cfi_offset 4, -28
 4908              		.cfi_offset 5, -24
 4909              		.cfi_offset 6, -20
 4910              		.cfi_offset 7, -16
 4911              		.cfi_offset 8, -12
 4912              		.cfi_offset 9, -8
 4913              		.cfi_offset 14, -4
 4914 0004 089E     		ldr	r6, [sp, #32]
 4915              	.LVL407:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4916              		.loc 1 4904 0
 4917 0006 40B9     		cbnz	r0, .L451
 4918              	.LBB208:
 4919              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4920              		.loc 2 195 0
 4921              		.syntax unified
 4922              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4923 0008 4FF05003 			mov r3, #80												
 4924 000c 83F31188 		msr basepri, r3											
 4925 0010 BFF36F8F 		isb														
 4926 0014 BFF34F8F 		dsb														
 4927              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 193


 4928              	@ 0 "" 2
 4929              	.LVL408:
 4930              		.thumb
 4931              		.syntax unified
 4932              	.L452:
 4933 0018 FEE7     		b	.L452
 4934              	.LVL409:
 4935              	.L451:
 4936 001a 0446     		mov	r4, r0
 4937 001c 9946     		mov	r9, r3
 4938 001e 9046     		mov	r8, r2
 4939 0020 0D46     		mov	r5, r1
 4940              	.LBE209:
 4941              	.LBE208:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4942              		.loc 1 4922 0
 4943 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4944              	.LVL410:
 4945              	.LBB210:
 4946              	.LBB211:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4947              		.loc 2 211 0
 4948              		.syntax unified
 4949              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4950 0026 EFF31187 			mrs r7, basepri											
 4951 002a 4FF05003 		mov r3, #80												
 4952 002e 83F31188 		msr basepri, r3											
 4953 0032 BFF36F8F 		isb														
 4954 0036 BFF34F8F 		dsb														
 4955              	
 4956              	@ 0 "" 2
 4957              		.thumb
 4958              		.syntax unified
 4959              	.LBE211:
 4960              	.LBE210:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4961              		.loc 1 4928 0
 4962 003a B9F1000F 		cmp	r9, #0
 4963 003e 02D0     		beq	.L453
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4964              		.loc 1 4930 0
 4965 0040 636D     		ldr	r3, [r4, #84]
 4966 0042 C9F80030 		str	r3, [r9]
 4967              	.L453:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4968              		.loc 1 4933 0
 4969 0046 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 4970 004a DBB2     		uxtb	r3, r3
 4971              	.LVL411:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4972              		.loc 1 4934 0
 4973 004c 0222     		movs	r2, #2
 4974 004e 84F85820 		strb	r2, [r4, #88]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4975              		.loc 1 4936 0
 4976 0052 B8F1040F 		cmp	r8, #4
 4977 0056 1CD8     		bhi	.L454
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 194


 4978 0058 DFE808F0 		tbb	[pc, r8]
 4979              	.L456:
 4980 005c 28       		.byte	(.L468-.L456)/2
 4981 005d 03       		.byte	(.L457-.L456)/2
 4982 005e 0E       		.byte	(.L458-.L456)/2
 4983 005f 13       		.byte	(.L459-.L456)/2
 4984 0060 16       		.byte	(.L460-.L456)/2
 4985 0061 00       		.p2align 1
 4986              	.L457:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4987              		.loc 1 4939 0
 4988 0062 626D     		ldr	r2, [r4, #84]
 4989 0064 1543     		orrs	r5, r5, r2
 4990              	.LVL412:
 4991 0066 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4992              		.loc 1 4901 0
 4993 0068 0125     		movs	r5, #1
 4994              	.L455:
 4995              	.LVL413:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4996              		.loc 1 4979 0
 4997 006a 012B     		cmp	r3, #1
 4998 006c 24D0     		beq	.L472
 4999              	.LVL414:
 5000              	.L462:
 5001              	.LBB212:
 5002              	.LBB213:
 5003              		.loc 2 229 0
 5004              		.syntax unified
 5005              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5006 006e 87F31188 			msr basepri, r7	
 5007              	@ 0 "" 2
 5008              	.LVL415:
 5009              		.thumb
 5010              		.syntax unified
 5011              	.LBE213:
 5012              	.LBE212:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5013              		.loc 1 5019 0
 5014 0072 2846     		mov	r0, r5
 5015 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5016              	.LVL416:
 5017              	.L458:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5018              		.loc 1 4943 0
 5019 0078 626D     		ldr	r2, [r4, #84]
 5020 007a 0132     		adds	r2, r2, #1
 5021 007c 6265     		str	r2, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5022              		.loc 1 4901 0
 5023 007e 0125     		movs	r5, #1
 5024              	.LVL417:
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5025              		.loc 1 4944 0
 5026 0080 F3E7     		b	.L455
 5027              	.LVL418:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 195


 5028              	.L459:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5029              		.loc 1 4947 0
 5030 0082 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5031              		.loc 1 4901 0
 5032 0084 0125     		movs	r5, #1
 5033              	.LVL419:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5034              		.loc 1 4948 0
 5035 0086 F0E7     		b	.L455
 5036              	.LVL420:
 5037              	.L460:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5038              		.loc 1 4951 0
 5039 0088 022B     		cmp	r3, #2
 5040 008a 11D0     		beq	.L469
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5041              		.loc 1 4953 0
 5042 008c 6565     		str	r5, [r4, #84]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5043              		.loc 1 4901 0
 5044 008e 0125     		movs	r5, #1
 5045              	.LVL421:
 5046 0090 EBE7     		b	.L455
 5047              	.LVL422:
 5048              	.L454:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5049              		.loc 1 4971 0
 5050 0092 626D     		ldr	r2, [r4, #84]
 5051 0094 B2F1FF3F 		cmp	r2, #-1
 5052 0098 0CD0     		beq	.L470
 5053              	.LBB214:
 5054              	.LBB215:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5055              		.loc 2 195 0
 5056              		.syntax unified
 5057              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5058 009a 4FF05003 			mov r3, #80												
 5059 009e 83F31188 		msr basepri, r3											
 5060 00a2 BFF36F8F 		isb														
 5061 00a6 BFF34F8F 		dsb														
 5062              	
 5063              	@ 0 "" 2
 5064              	.LVL423:
 5065              		.thumb
 5066              		.syntax unified
 5067              	.L461:
 5068 00aa FEE7     		b	.L461
 5069              	.LVL424:
 5070              	.L468:
 5071              	.LBE215:
 5072              	.LBE214:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5073              		.loc 1 4901 0
 5074 00ac 0125     		movs	r5, #1
 5075              	.LVL425:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 196


 5076 00ae DCE7     		b	.L455
 5077              	.LVL426:
 5078              	.L469:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5079              		.loc 1 4958 0
 5080 00b0 0025     		movs	r5, #0
 5081              	.LVL427:
 5082 00b2 DAE7     		b	.L455
 5083              	.LVL428:
 5084              	.L470:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5085              		.loc 1 4901 0
 5086 00b4 0125     		movs	r5, #1
 5087              	.LVL429:
 5088 00b6 D8E7     		b	.L455
 5089              	.LVL430:
 5090              	.L472:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5091              		.loc 1 4982 0
 5092 00b8 A36A     		ldr	r3, [r4, #40]
 5093              	.LVL431:
 5094 00ba 43B1     		cbz	r3, .L463
 5095              	.LBB216:
 5096              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5097              		.loc 2 195 0
 5098              		.syntax unified
 5099              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5100 00bc 4FF05003 			mov r3, #80												
 5101 00c0 83F31188 		msr basepri, r3											
 5102 00c4 BFF36F8F 		isb														
 5103 00c8 BFF34F8F 		dsb														
 5104              	
 5105              	@ 0 "" 2
 5106              	.LVL432:
 5107              		.thumb
 5108              		.syntax unified
 5109              	.L464:
 5110 00cc FEE7     		b	.L464
 5111              	.L463:
 5112              	.LBE217:
 5113              	.LBE216:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5114              		.loc 1 4984 0
 5115 00ce 144B     		ldr	r3, .L473
 5116 00d0 1B68     		ldr	r3, [r3]
 5117 00d2 FBB9     		cbnz	r3, .L465
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5118              		.loc 1 4986 0
 5119 00d4 04F10408 		add	r8, r4, #4
 5120 00d8 4046     		mov	r0, r8
 5121 00da FFF7FEFF 		bl	uxListRemove
 5122              	.LVL433:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5123              		.loc 1 4987 0
 5124 00de E26A     		ldr	r2, [r4, #44]
 5125 00e0 0123     		movs	r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 197


 5126 00e2 9340     		lsls	r3, r3, r2
 5127 00e4 0F49     		ldr	r1, .L473+4
 5128 00e6 0868     		ldr	r0, [r1]
 5129 00e8 0343     		orrs	r3, r3, r0
 5130 00ea 0B60     		str	r3, [r1]
 5131 00ec 4146     		mov	r1, r8
 5132 00ee 0E4B     		ldr	r3, .L473+8
 5133 00f0 1420     		movs	r0, #20
 5134 00f2 00FB0230 		mla	r0, r0, r2, r3
 5135 00f6 FFF7FEFF 		bl	vListInsertEnd
 5136              	.LVL434:
 5137              	.L466:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5138              		.loc 1 4996 0
 5139 00fa E26A     		ldr	r2, [r4, #44]
 5140 00fc 0B4B     		ldr	r3, .L473+12
 5141 00fe 1B68     		ldr	r3, [r3]
 5142 0100 DB6A     		ldr	r3, [r3, #44]
 5143 0102 9A42     		cmp	r2, r3
 5144 0104 B3D9     		bls	.L462
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5145              		.loc 1 5000 0
 5146 0106 0EB1     		cbz	r6, .L467
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5147              		.loc 1 5002 0
 5148 0108 0123     		movs	r3, #1
 5149 010a 3360     		str	r3, [r6]
 5150              	.L467:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5151              		.loc 1 5008 0
 5152 010c 084B     		ldr	r3, .L473+16
 5153 010e 0122     		movs	r2, #1
 5154 0110 1A60     		str	r2, [r3]
 5155 0112 ACE7     		b	.L462
 5156              	.L465:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5157              		.loc 1 4993 0
 5158 0114 04F11801 		add	r1, r4, #24
 5159 0118 0648     		ldr	r0, .L473+20
 5160 011a FFF7FEFF 		bl	vListInsertEnd
 5161              	.LVL435:
 5162 011e ECE7     		b	.L466
 5163              	.L474:
 5164              		.align	2
 5165              	.L473:
 5166 0120 00000000 		.word	.LANCHOR16
 5167 0124 00000000 		.word	.LANCHOR13
 5168 0128 00000000 		.word	.LANCHOR4
 5169 012c 00000000 		.word	.LANCHOR10
 5170 0130 00000000 		.word	.LANCHOR18
 5171 0134 00000000 		.word	.LANCHOR1
 5172              		.cfi_endproc
 5173              	.LFE55:
 5175              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5176              		.align	1
 5177              		.global	vTaskNotifyGiveFromISR
 5178              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 198


 5179              		.thumb
 5180              		.thumb_func
 5181              		.fpu fpv4-sp-d16
 5183              	vTaskNotifyGiveFromISR:
 5184              	.LFB56:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5185              		.loc 1 5027 0
 5186              		.cfi_startproc
 5187              		@ args = 0, pretend = 0, frame = 0
 5188              		@ frame_needed = 0, uses_anonymous_args = 0
 5189              	.LVL436:
 5190 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5191              	.LCFI49:
 5192              		.cfi_def_cfa_offset 24
 5193              		.cfi_offset 3, -24
 5194              		.cfi_offset 4, -20
 5195              		.cfi_offset 5, -16
 5196              		.cfi_offset 6, -12
 5197              		.cfi_offset 7, -8
 5198              		.cfi_offset 14, -4
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5199              		.loc 1 5032 0
 5200 0002 40B9     		cbnz	r0, .L476
 5201              	.LBB218:
 5202              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5203              		.loc 2 195 0
 5204              		.syntax unified
 5205              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5206 0004 4FF05003 			mov r3, #80												
 5207 0008 83F31188 		msr basepri, r3											
 5208 000c BFF36F8F 		isb														
 5209 0010 BFF34F8F 		dsb														
 5210              	
 5211              	@ 0 "" 2
 5212              	.LVL437:
 5213              		.thumb
 5214              		.syntax unified
 5215              	.L477:
 5216 0014 FEE7     		b	.L477
 5217              	.L476:
 5218 0016 0446     		mov	r4, r0
 5219 0018 0D46     		mov	r5, r1
 5220              	.LBE219:
 5221              	.LBE218:
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5222              		.loc 1 5050 0
 5223 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5224              	.LVL438:
 5225              	.LBB220:
 5226              	.LBB221:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5227              		.loc 2 211 0
 5228              		.syntax unified
 5229              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5230 001e EFF31186 			mrs r6, basepri											
 5231 0022 4FF05003 		mov r3, #80												
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 199


 5232 0026 83F31188 		msr basepri, r3											
 5233 002a BFF36F8F 		isb														
 5234 002e BFF34F8F 		dsb														
 5235              	
 5236              	@ 0 "" 2
 5237              		.thumb
 5238              		.syntax unified
 5239              	.LBE221:
 5240              	.LBE220:
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5241              		.loc 1 5056 0
 5242 0032 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5243 0036 DBB2     		uxtb	r3, r3
 5244              	.LVL439:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5245              		.loc 1 5057 0
 5246 0038 0222     		movs	r2, #2
 5247 003a 84F85820 		strb	r2, [r4, #88]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5248              		.loc 1 5061 0
 5249 003e 626D     		ldr	r2, [r4, #84]
 5250 0040 0132     		adds	r2, r2, #1
 5251 0042 6265     		str	r2, [r4, #84]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5252              		.loc 1 5067 0
 5253 0044 012B     		cmp	r3, #1
 5254 0046 02D0     		beq	.L485
 5255              	.LVL440:
 5256              	.L478:
 5257              	.LBB222:
 5258              	.LBB223:
 5259              		.loc 2 229 0
 5260              		.syntax unified
 5261              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5262 0048 86F31188 			msr basepri, r6	
 5263              	@ 0 "" 2
 5264              	.LVL441:
 5265              		.thumb
 5266              		.syntax unified
 5267              	.LBE223:
 5268              	.LBE222:
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5269              		.loc 1 5105 0
 5270 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5271              	.LVL442:
 5272              	.L485:
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5273              		.loc 1 5070 0
 5274 004e A36A     		ldr	r3, [r4, #40]
 5275              	.LVL443:
 5276 0050 43B1     		cbz	r3, .L479
 5277              	.LBB224:
 5278              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5279              		.loc 2 195 0
 5280              		.syntax unified
 5281              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 200


 5282 0052 4FF05003 			mov r3, #80												
 5283 0056 83F31188 		msr basepri, r3											
 5284 005a BFF36F8F 		isb														
 5285 005e BFF34F8F 		dsb														
 5286              	
 5287              	@ 0 "" 2
 5288              	.LVL444:
 5289              		.thumb
 5290              		.syntax unified
 5291              	.L480:
 5292 0062 FEE7     		b	.L480
 5293              	.L479:
 5294              	.LBE225:
 5295              	.LBE224:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5296              		.loc 1 5072 0
 5297 0064 134B     		ldr	r3, .L486
 5298 0066 1B68     		ldr	r3, [r3]
 5299 0068 F3B9     		cbnz	r3, .L481
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5300              		.loc 1 5074 0
 5301 006a 271D     		adds	r7, r4, #4
 5302 006c 3846     		mov	r0, r7
 5303 006e FFF7FEFF 		bl	uxListRemove
 5304              	.LVL445:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5305              		.loc 1 5075 0
 5306 0072 E26A     		ldr	r2, [r4, #44]
 5307 0074 0123     		movs	r3, #1
 5308 0076 9340     		lsls	r3, r3, r2
 5309 0078 0F49     		ldr	r1, .L486+4
 5310 007a 0868     		ldr	r0, [r1]
 5311 007c 0343     		orrs	r3, r3, r0
 5312 007e 0B60     		str	r3, [r1]
 5313 0080 3946     		mov	r1, r7
 5314 0082 0E4B     		ldr	r3, .L486+8
 5315 0084 1420     		movs	r0, #20
 5316 0086 00FB0230 		mla	r0, r0, r2, r3
 5317 008a FFF7FEFF 		bl	vListInsertEnd
 5318              	.LVL446:
 5319              	.L482:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5320              		.loc 1 5084 0
 5321 008e E26A     		ldr	r2, [r4, #44]
 5322 0090 0B4B     		ldr	r3, .L486+12
 5323 0092 1B68     		ldr	r3, [r3]
 5324 0094 DB6A     		ldr	r3, [r3, #44]
 5325 0096 9A42     		cmp	r2, r3
 5326 0098 D6D9     		bls	.L478
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5327              		.loc 1 5088 0
 5328 009a 0DB1     		cbz	r5, .L483
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5329              		.loc 1 5090 0
 5330 009c 0123     		movs	r3, #1
 5331 009e 2B60     		str	r3, [r5]
 5332              	.L483:
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 201


5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5333              		.loc 1 5096 0
 5334 00a0 084B     		ldr	r3, .L486+16
 5335 00a2 0122     		movs	r2, #1
 5336 00a4 1A60     		str	r2, [r3]
 5337 00a6 CFE7     		b	.L478
 5338              	.L481:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5339              		.loc 1 5081 0
 5340 00a8 04F11801 		add	r1, r4, #24
 5341 00ac 0648     		ldr	r0, .L486+20
 5342 00ae FFF7FEFF 		bl	vListInsertEnd
 5343              	.LVL447:
 5344 00b2 ECE7     		b	.L482
 5345              	.L487:
 5346              		.align	2
 5347              	.L486:
 5348 00b4 00000000 		.word	.LANCHOR16
 5349 00b8 00000000 		.word	.LANCHOR13
 5350 00bc 00000000 		.word	.LANCHOR4
 5351 00c0 00000000 		.word	.LANCHOR10
 5352 00c4 00000000 		.word	.LANCHOR18
 5353 00c8 00000000 		.word	.LANCHOR1
 5354              		.cfi_endproc
 5355              	.LFE56:
 5357              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5358              		.align	1
 5359              		.global	xTaskNotifyStateClear
 5360              		.syntax unified
 5361              		.thumb
 5362              		.thumb_func
 5363              		.fpu fpv4-sp-d16
 5365              	xTaskNotifyStateClear:
 5366              	.LFB57:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5367              		.loc 1 5113 0
 5368              		.cfi_startproc
 5369              		@ args = 0, pretend = 0, frame = 0
 5370              		@ frame_needed = 0, uses_anonymous_args = 0
 5371              	.LVL448:
 5372 0000 10B5     		push	{r4, lr}
 5373              	.LCFI50:
 5374              		.cfi_def_cfa_offset 8
 5375              		.cfi_offset 4, -8
 5376              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5377              		.loc 1 5119 0
 5378 0002 0446     		mov	r4, r0
 5379 0004 58B1     		cbz	r0, .L493
 5380              	.LVL449:
 5381              	.L489:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5382              		.loc 1 5121 0 discriminator 4
 5383 0006 FFF7FEFF 		bl	vPortEnterCritical
 5384              	.LVL450:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5385              		.loc 1 5123 0 discriminator 4
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 202


 5386 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5387 000e DBB2     		uxtb	r3, r3
 5388 0010 022B     		cmp	r3, #2
 5389 0012 07D0     		beq	.L494
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5390              		.loc 1 5130 0
 5391 0014 0024     		movs	r4, #0
 5392              	.LVL451:
 5393              	.L490:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5394              		.loc 1 5133 0
 5395 0016 FFF7FEFF 		bl	vPortExitCritical
 5396              	.LVL452:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5397              		.loc 1 5136 0
 5398 001a 2046     		mov	r0, r4
 5399 001c 10BD     		pop	{r4, pc}
 5400              	.LVL453:
 5401              	.L493:
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5402              		.loc 1 5119 0 discriminator 1
 5403 001e 044B     		ldr	r3, .L495
 5404 0020 1C68     		ldr	r4, [r3]
 5405              	.LVL454:
 5406 0022 F0E7     		b	.L489
 5407              	.LVL455:
 5408              	.L494:
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5409              		.loc 1 5125 0
 5410 0024 0023     		movs	r3, #0
 5411 0026 84F85830 		strb	r3, [r4, #88]
 5412              	.LVL456:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5413              		.loc 1 5126 0
 5414 002a 0124     		movs	r4, #1
 5415              	.LVL457:
 5416 002c F3E7     		b	.L490
 5417              	.L496:
 5418 002e 00BF     		.align	2
 5419              	.L495:
 5420 0030 00000000 		.word	.LANCHOR10
 5421              		.cfi_endproc
 5422              	.LFE57:
 5424              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 5425              		.align	1
 5426              		.global	ulTaskNotifyValueClear
 5427              		.syntax unified
 5428              		.thumb
 5429              		.thumb_func
 5430              		.fpu fpv4-sp-d16
 5432              	ulTaskNotifyValueClear:
 5433              	.LFB58:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5434              		.loc 1 5144 0
 5435              		.cfi_startproc
 5436              		@ args = 0, pretend = 0, frame = 0
 5437              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 203


 5438              	.LVL458:
 5439 0000 70B5     		push	{r4, r5, r6, lr}
 5440              	.LCFI51:
 5441              		.cfi_def_cfa_offset 16
 5442              		.cfi_offset 4, -16
 5443              		.cfi_offset 5, -12
 5444              		.cfi_offset 6, -8
 5445              		.cfi_offset 14, -4
 5446 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5447              		.loc 1 5150 0
 5448 0004 0446     		mov	r4, r0
 5449 0006 60B1     		cbz	r0, .L500
 5450              	.LVL459:
 5451              	.L498:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5452              		.loc 1 5152 0 discriminator 4
 5453 0008 FFF7FEFF 		bl	vPortEnterCritical
 5454              	.LVL460:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 5455              		.loc 1 5156 0 discriminator 4
 5456 000c 064B     		ldr	r3, .L501
 5457 000e 1B68     		ldr	r3, [r3]
 5458 0010 5D6D     		ldr	r5, [r3, #84]
 5459              	.LVL461:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5460              		.loc 1 5157 0 discriminator 4
 5461 0012 616D     		ldr	r1, [r4, #84]
 5462 0014 21EA0601 		bic	r1, r1, r6
 5463 0018 6165     		str	r1, [r4, #84]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5464              		.loc 1 5159 0 discriminator 4
 5465 001a FFF7FEFF 		bl	vPortExitCritical
 5466              	.LVL462:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5467              		.loc 1 5162 0 discriminator 4
 5468 001e 2846     		mov	r0, r5
 5469 0020 70BD     		pop	{r4, r5, r6, pc}
 5470              	.LVL463:
 5471              	.L500:
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5472              		.loc 1 5150 0 discriminator 1
 5473 0022 014B     		ldr	r3, .L501
 5474 0024 1C68     		ldr	r4, [r3]
 5475              	.LVL464:
 5476 0026 EFE7     		b	.L498
 5477              	.L502:
 5478              		.align	2
 5479              	.L501:
 5480 0028 00000000 		.word	.LANCHOR10
 5481              		.cfi_endproc
 5482              	.LFE58:
 5484              		.global	FreeRTOS_errno
 5485              		.global	pxCurrentTCB
 5486              		.section	.bss.FreeRTOS_errno,"aw",%nobits
 5487              		.align	2
 5488              		.set	.LANCHOR20,. + 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 204


 5491              	FreeRTOS_errno:
 5492 0000 00000000 		.space	4
 5493              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5494              		.align	2
 5495              		.set	.LANCHOR10,. + 0
 5498              	pxCurrentTCB:
 5499 0000 00000000 		.space	4
 5500              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5501              		.align	2
 5502              		.set	.LANCHOR2,. + 0
 5505              	pxDelayedTaskList:
 5506 0000 00000000 		.space	4
 5507              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5508              		.align	2
 5509              		.set	.LANCHOR8,. + 0
 5512              	pxOverflowDelayedTaskList:
 5513 0000 00000000 		.space	4
 5514              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5515              		.align	2
 5516              		.set	.LANCHOR4,. + 0
 5519              	pxReadyTasksLists:
 5520 0000 00000000 		.space	140
 5520      00000000 
 5520      00000000 
 5520      00000000 
 5520      00000000 
 5521              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5522              		.align	2
 5523              		.set	.LANCHOR9,. + 0
 5526              	uxCurrentNumberOfTasks:
 5527 0000 00000000 		.space	4
 5528              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5529              		.align	2
 5530              		.set	.LANCHOR14,. + 0
 5533              	uxDeletedTasksWaitingCleanUp:
 5534 0000 00000000 		.space	4
 5535              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5536              		.align	2
 5537              		.set	.LANCHOR16,. + 0
 5540              	uxSchedulerSuspended:
 5541 0000 00000000 		.space	4
 5542              		.section	.bss.uxTaskNumber,"aw",%nobits
 5543              		.align	2
 5544              		.set	.LANCHOR12,. + 0
 5547              	uxTaskNumber:
 5548 0000 00000000 		.space	4
 5549              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5550              		.align	2
 5551              		.set	.LANCHOR13,. + 0
 5554              	uxTopReadyPriority:
 5555 0000 00000000 		.space	4
 5556              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5557              		.align	2
 5558              		.set	.LANCHOR5,. + 0
 5561              	xDelayedTaskList1:
 5562 0000 00000000 		.space	20
 5562      00000000 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 205


 5562      00000000 
 5562      00000000 
 5562      00000000 
 5563              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5564              		.align	2
 5565              		.set	.LANCHOR6,. + 0
 5568              	xDelayedTaskList2:
 5569 0000 00000000 		.space	20
 5569      00000000 
 5569      00000000 
 5569      00000000 
 5569      00000000 
 5570              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5571              		.align	2
 5572              		.set	.LANCHOR3,. + 0
 5575              	xNextTaskUnblockTime:
 5576 0000 00000000 		.space	4
 5577              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5578              		.align	2
 5579              		.set	.LANCHOR17,. + 0
 5582              	xNumOfOverflows:
 5583 0000 00000000 		.space	4
 5584              		.section	.bss.xPendedTicks,"aw",%nobits
 5585              		.align	2
 5586              		.set	.LANCHOR19,. + 0
 5589              	xPendedTicks:
 5590 0000 00000000 		.space	4
 5591              		.section	.bss.xPendingReadyList,"aw",%nobits
 5592              		.align	2
 5593              		.set	.LANCHOR1,. + 0
 5596              	xPendingReadyList:
 5597 0000 00000000 		.space	20
 5597      00000000 
 5597      00000000 
 5597      00000000 
 5597      00000000 
 5598              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5599              		.align	2
 5600              		.set	.LANCHOR11,. + 0
 5603              	xSchedulerRunning:
 5604 0000 00000000 		.space	4
 5605              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5606              		.align	2
 5607              		.set	.LANCHOR0,. + 0
 5610              	xSuspendedTaskList:
 5611 0000 00000000 		.space	20
 5611      00000000 
 5611      00000000 
 5611      00000000 
 5611      00000000 
 5612              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5613              		.align	2
 5614              		.set	.LANCHOR7,. + 0
 5617              	xTasksWaitingTermination:
 5618 0000 00000000 		.space	20
 5618      00000000 
 5618      00000000 
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 206


 5618      00000000 
 5618      00000000 
 5619              		.section	.bss.xTickCount,"aw",%nobits
 5620              		.align	2
 5621              		.set	.LANCHOR15,. + 0
 5624              	xTickCount:
 5625 0000 00000000 		.space	4
 5626              		.section	.bss.xYieldPending,"aw",%nobits
 5627              		.align	2
 5628              		.set	.LANCHOR18,. + 0
 5631              	xYieldPending:
 5632 0000 00000000 		.space	4
 5633              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5634              		.align	2
 5635              	.LC0:
 5636 0000 49444C45 		.ascii	"IDLE\000"
 5636      00
 5637              		.text
 5638              	.Letext0:
 5639              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 5640              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5641              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5642              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5643              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5644              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5645              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 5646              		.file 10 "Inc/FreeRTOSConfig.h"
 5647              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5648              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 5649              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5650              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5651              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 207


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:92     .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:98     .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:104    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:138    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:144    .text.prvInitialiseNewTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:150    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:277    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:283    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:350    .text.prvInitialiseTaskLists:00000044 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:362    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:368    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:474    .text.prvAddNewTaskToReadyList:0000008c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:485    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:491    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:544    .text.prvCheckTasksWaitingTermination:00000034 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:551    .text.prvIdleTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:557    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:597    .text.prvIdleTask:00000020 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:603    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:609    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:710    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:721    .text.xTaskCreateStatic:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:728    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:850    .text.vTaskDelete:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:857    .text.vTaskDelete:00000000 vTaskDelete
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1005   .text.vTaskDelete:000000b4 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1019   .text.uxTaskPriorityGet:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1026   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1065   .text.uxTaskPriorityGet:0000001c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1070   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1077   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1140   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1145   .text.vTaskPrioritySet:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1152   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1330   .text.vTaskPrioritySet:000000cc $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1338   .text.vTaskResume:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1345   .text.vTaskResume:00000000 vTaskResume
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1448   .text.vTaskResume:00000074 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1456   .text.xTaskResumeFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1463   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1596   .text.xTaskResumeFromISR:00000090 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1605   .text.vTaskStartScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1612   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1698   .text.vTaskStartScheduler:00000058 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1707   .text.vTaskEndScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1714   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1752   .text.vTaskEndScheduler:00000020 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1757   .text.vTaskSuspendAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1764   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1782   .text.vTaskSuspendAll:0000000c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1787   .text.xTaskGetTickCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1794   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1810   .text.xTaskGetTickCount:00000008 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 208


C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1815   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1822   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1845   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1850   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1857   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1872   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1877   .text.pcTaskGetName:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1884   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1930   .text.pcTaskGetName:00000024 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1937   .text.xTaskIncrementTick:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:1944   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2152   .text.xTaskIncrementTick:000000ec $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2167   .text.xTaskResumeAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2174   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2358   .text.xTaskResumeAll:000000d0 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2371   .text.vTaskDelay:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2378   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2451   .text.vTaskDelay:00000044 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2457   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2464   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2518   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2524   .text.vTaskSetApplicationTaskTag:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2531   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2571   .text.vTaskSetApplicationTaskTag:0000001c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2576   .text.xTaskGetApplicationTaskTag:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2583   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2622   .text.xTaskGetApplicationTaskTag:0000001c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2627   .text.xTaskGetApplicationTaskTagFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2634   .text.xTaskGetApplicationTaskTagFromISR:00000000 xTaskGetApplicationTaskTagFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2689   .text.xTaskGetApplicationTaskTagFromISR:00000028 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2694   .text.xTaskCallApplicationTaskHook:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2701   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2746   .text.xTaskCallApplicationTaskHook:0000001c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2751   .text.vTaskSwitchContext:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2758   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2896   .text.vTaskSwitchContext:00000098 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2908   .text.vTaskSuspend:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:2915   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3081   .text.vTaskSuspend:000000cc $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3093   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3100   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3153   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3158   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3165   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3253   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3259   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3266   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3369   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3379   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3386   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3490   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3501   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3508   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3563   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3569   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3576   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3597   .text.vTaskInternalSetTimeOutState:00000010 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 209


C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3603   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3610   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3742   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3749   .text.vTaskMissedYield:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3756   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3772   .text.vTaskMissedYield:00000008 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3777   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3784   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3800   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3805   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3812   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3844   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3850   .text.xTaskPriorityInherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3857   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3989   .text.xTaskPriorityInherit:000000a0 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:3996   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4003   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4157   .text.xTaskPriorityDisinherit:000000a4 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4164   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4171   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4324   .text.vTaskPriorityDisinheritAfterTimeout:000000a8 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4331   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4338   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4361   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4366   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4373   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4399   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4404   .text.ulTaskNotifyTake:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4411   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4507   .text.ulTaskNotifyTake:00000070 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4513   .text.xTaskNotifyWait:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4520   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4636   .text.xTaskNotifyWait:00000090 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4642   .text.xTaskGenericNotify:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4649   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4714   .text.xTaskGenericNotify:0000003c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4881   .text.xTaskGenericNotify:000000f0 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4889   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4896   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4980   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5166   .text.xTaskGenericNotifyFromISR:00000120 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5176   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5183   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5348   .text.vTaskNotifyGiveFromISR:000000b4 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5358   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5365   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5420   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5425   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5432   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5480   .text.ulTaskNotifyValueClear:00000028 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5491   .bss.FreeRTOS_errno:00000000 FreeRTOS_errno
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5498   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5487   .bss.FreeRTOS_errno:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5494   .bss.pxCurrentTCB:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5501   .bss.pxDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5505   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5508   .bss.pxOverflowDelayedTaskList:00000000 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\cceAHcFn.s 			page 210


C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5512   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5515   .bss.pxReadyTasksLists:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5519   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5522   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5526   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5529   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5533   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5536   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5540   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5543   .bss.uxTaskNumber:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5547   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5550   .bss.uxTopReadyPriority:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5554   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5557   .bss.xDelayedTaskList1:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5561   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5564   .bss.xDelayedTaskList2:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5568   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5571   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5575   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5578   .bss.xNumOfOverflows:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5582   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5585   .bss.xPendedTicks:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5589   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5592   .bss.xPendingReadyList:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5596   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5599   .bss.xSchedulerRunning:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5603   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5606   .bss.xSuspendedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5610   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5613   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5617   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5620   .bss.xTickCount:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5624   .bss.xTickCount:00000000 xTickCount
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5627   .bss.xYieldPending:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5631   .bss.xYieldPending:00000000 xYieldPending
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:5634   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4719   .text.xTaskGenericNotify:00000041 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4719   .text.xTaskGenericNotify:00000042 $t
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4985   .text.xTaskGenericNotifyFromISR:00000061 $d
C:\Users\82057\AppData\Local\Temp\cceAHcFn.s:4985   .text.xTaskGenericNotifyFromISR:00000062 $t

UNDEFINED SYMBOLS
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
