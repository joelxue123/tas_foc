ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB146:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * Copyright (c) 2024 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Src/main.c    ****   * in the root directory of this software component.
  14:Src/main.c    ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Src/main.c    ****   *
  16:Src/main.c    ****   ******************************************************************************
  17:Src/main.c    ****   */
  18:Src/main.c    **** /* USER CODE END Header */
  19:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "cmsis_os.h"
  22:Src/main.c    **** #include "usb_device.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PM */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* USER CODE END PM */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  45:Src/main.c    **** TIM_HandleTypeDef htim1;
  46:Src/main.c    **** 
  47:Src/main.c    **** osThreadId defaultTaskHandle;
  48:Src/main.c    **** uint32_t defaultTaskBuffer[ 2048 ];
  49:Src/main.c    **** osStaticThreadDef_t defaultTaskControlBlock;
  50:Src/main.c    **** osThreadId myTask02Handle;
  51:Src/main.c    **** uint32_t myTask02Buffer[ 2048 ];
  52:Src/main.c    **** osStaticThreadDef_t myTask02ControlBlock;
  53:Src/main.c    **** osThreadId myTask03Handle;
  54:Src/main.c    **** uint32_t myTask03Buffer[ 2048 ];
  55:Src/main.c    **** osStaticThreadDef_t myTask03ControlBlock;
  56:Src/main.c    **** osThreadId myTask04Handle;
  57:Src/main.c    **** uint32_t myTask04Buffer[ 2048 ];
  58:Src/main.c    **** osStaticThreadDef_t myTask04ControlBlock;
  59:Src/main.c    **** osMessageQId myQueue01Handle;
  60:Src/main.c    **** uint8_t myQueue01Buffer[ 16 * sizeof( uint16_t ) ];
  61:Src/main.c    **** osStaticMessageQDef_t myQueue01ControlBlock;
  62:Src/main.c    **** osMutexId myMutex01Handle;
  63:Src/main.c    **** osStaticMutexDef_t myMutex01ControlBlock;
  64:Src/main.c    **** osSemaphoreId myBinarySem01Handle;
  65:Src/main.c    **** osStaticSemaphoreDef_t myBinarySem01ControlBlock;
  66:Src/main.c    **** /* USER CODE BEGIN PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PV */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  71:Src/main.c    **** void SystemClock_Config(void);
  72:Src/main.c    **** static void MX_GPIO_Init(void);
  73:Src/main.c    **** static void MX_TIM1_Init(void);
  74:Src/main.c    **** void StartDefaultTask(void const * argument);
  75:Src/main.c    **** void StartTask02(void const * argument);
  76:Src/main.c    **** void StartTask03(void const * argument);
  77:Src/main.c    **** void StartTask04(void const * argument);
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE BEGIN PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* USER CODE END PFP */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  84:Src/main.c    **** /* USER CODE BEGIN 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE END 0 */
  87:Src/main.c    **** 
  88:Src/main.c    **** /**
  89:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 3


  90:Src/main.c    ****   * @retval int
  91:Src/main.c    ****   */
  92:Src/main.c    **** int main(void)
  93:Src/main.c    **** {
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE BEGIN 1 */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* USER CODE END 1 */
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 102:Src/main.c    ****   HAL_Init();
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE BEGIN Init */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* USER CODE END Init */
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* Configure the system clock */
 109:Src/main.c    ****   SystemClock_Config();
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END SysInit */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* Initialize all configured peripherals */
 116:Src/main.c    ****   MX_GPIO_Init();
 117:Src/main.c    ****   MX_TIM1_Init();
 118:Src/main.c    ****   /* USER CODE BEGIN 2 */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE END 2 */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Create the mutex(es) */
 123:Src/main.c    ****   /* definition and creation of myMutex01 */
 124:Src/main.c    ****   osMutexStaticDef(myMutex01, &myMutex01ControlBlock);
 125:Src/main.c    ****   myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 128:Src/main.c    ****   /* add mutexes, ... */
 129:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Create the semaphores(s) */
 132:Src/main.c    ****   /* definition and creation of myBinarySem01 */
 133:Src/main.c    ****   osSemaphoreStaticDef(myBinarySem01, &myBinarySem01ControlBlock);
 134:Src/main.c    ****   myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 137:Src/main.c    ****   /* add semaphores, ... */
 138:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 141:Src/main.c    ****   /* start timers, add new ones, ... */
 142:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 143:Src/main.c    **** 
 144:Src/main.c    ****   /* Create the queue(s) */
 145:Src/main.c    ****   /* definition and creation of myQueue01 */
 146:Src/main.c    ****   osMessageQStaticDef(myQueue01, 16, uint16_t, myQueue01Buffer, &myQueue01ControlBlock);
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 4


 147:Src/main.c    ****   myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 150:Src/main.c    ****   /* add queues, ... */
 151:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* Create the thread(s) */
 154:Src/main.c    ****   /* definition and creation of defaultTask */
 155:Src/main.c    ****   osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048, defaultTaskBuffer, &d
 156:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* definition and creation of myTask02 */
 159:Src/main.c    ****   osThreadStaticDef(myTask02, StartTask02, osPriorityIdle, 0, 2048, myTask02Buffer, &myTask02Contro
 160:Src/main.c    ****   myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* definition and creation of myTask03 */
 163:Src/main.c    ****   osThreadStaticDef(myTask03, StartTask03, osPriorityIdle, 0, 2048, myTask03Buffer, &myTask03Contro
 164:Src/main.c    ****   myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* definition and creation of myTask04 */
 167:Src/main.c    ****   osThreadStaticDef(myTask04, StartTask04, osPriorityIdle, 0, 2048, myTask04Buffer, &myTask04Contro
 168:Src/main.c    ****   myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 171:Src/main.c    ****   /* add threads, ... */
 172:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 173:Src/main.c    **** 
 174:Src/main.c    ****   /* Start scheduler */
 175:Src/main.c    ****   osKernelStart();
 176:Src/main.c    **** 
 177:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 178:Src/main.c    **** 
 179:Src/main.c    ****   /* Infinite loop */
 180:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 181:Src/main.c    ****   while (1)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     /* USER CODE END WHILE */
 184:Src/main.c    **** 
 185:Src/main.c    ****     /* USER CODE BEGIN 3 */
 186:Src/main.c    ****   }
 187:Src/main.c    ****   /* USER CODE END 3 */
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** /**
 191:Src/main.c    ****   * @brief System Clock Configuration
 192:Src/main.c    ****   * @retval None
 193:Src/main.c    ****   */
 194:Src/main.c    **** void SystemClock_Config(void)
 195:Src/main.c    **** {
 196:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 197:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 198:Src/main.c    **** 
 199:Src/main.c    ****   /** Configure the main internal regulator output voltage
 200:Src/main.c    ****   */
 201:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 202:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 203:Src/main.c    **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 5


 204:Src/main.c    ****   /** Initializes the RCC Oscillators according to the specified parameters
 205:Src/main.c    ****   * in the RCC_OscInitTypeDef structure.
 206:Src/main.c    ****   */
 207:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 208:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 214:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 215:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 216:Src/main.c    ****   {
 217:Src/main.c    ****     Error_Handler();
 218:Src/main.c    ****   }
 219:Src/main.c    **** 
 220:Src/main.c    ****   /** Initializes the CPU, AHB and APB buses clocks
 221:Src/main.c    ****   */
 222:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 223:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 224:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 225:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 226:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 227:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 228:Src/main.c    **** 
 229:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** /**
 236:Src/main.c    ****   * @brief TIM1 Initialization Function
 237:Src/main.c    ****   * @param None
 238:Src/main.c    ****   * @retval None
 239:Src/main.c    ****   */
 240:Src/main.c    **** static void MX_TIM1_Init(void)
 241:Src/main.c    **** {
 242:Src/main.c    **** 
 243:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 0 */
 244:Src/main.c    **** 
 245:Src/main.c    ****   /* USER CODE END TIM1_Init 0 */
 246:Src/main.c    **** 
 247:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 248:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 249:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 250:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 251:Src/main.c    **** 
 252:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 1 */
 253:Src/main.c    **** 
 254:Src/main.c    ****   /* USER CODE END TIM1_Init 1 */
 255:Src/main.c    ****   htim1.Instance = TIM1;
 256:Src/main.c    ****   htim1.Init.Prescaler = 0;
 257:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 258:Src/main.c    ****   htim1.Init.Period = 65535;
 259:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 260:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 6


 261:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 262:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 263:Src/main.c    ****   {
 264:Src/main.c    ****     Error_Handler();
 265:Src/main.c    ****   }
 266:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 267:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 268:Src/main.c    ****   {
 269:Src/main.c    ****     Error_Handler();
 270:Src/main.c    ****   }
 271:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 272:Src/main.c    ****   {
 273:Src/main.c    ****     Error_Handler();
 274:Src/main.c    ****   }
 275:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 276:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 277:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 278:Src/main.c    ****   {
 279:Src/main.c    ****     Error_Handler();
 280:Src/main.c    ****   }
 281:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 282:Src/main.c    ****   sConfigOC.Pulse = 0;
 283:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 284:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 285:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 286:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 287:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 288:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 289:Src/main.c    ****   {
 290:Src/main.c    ****     Error_Handler();
 291:Src/main.c    ****   }
 292:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 293:Src/main.c    ****   {
 294:Src/main.c    ****     Error_Handler();
 295:Src/main.c    ****   }
 296:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 297:Src/main.c    ****   {
 298:Src/main.c    ****     Error_Handler();
 299:Src/main.c    ****   }
 300:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 301:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     Error_Handler();
 304:Src/main.c    ****   }
 305:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 306:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 307:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 308:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 309:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 310:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 311:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 312:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 313:Src/main.c    ****   {
 314:Src/main.c    ****     Error_Handler();
 315:Src/main.c    ****   }
 316:Src/main.c    ****   /* USER CODE BEGIN TIM1_Init 2 */
 317:Src/main.c    **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 7


 318:Src/main.c    ****   /* USER CODE END TIM1_Init 2 */
 319:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 320:Src/main.c    **** 
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****   * @brief GPIO Initialization Function
 325:Src/main.c    ****   * @param None
 326:Src/main.c    ****   * @retval None
 327:Src/main.c    ****   */
 328:Src/main.c    **** static void MX_GPIO_Init(void)
 329:Src/main.c    **** {
  27              		.loc 1 329 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 84B0     		sub	sp, sp, #16
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              	.LBB4:
 330:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 331:Src/main.c    **** /* USER CODE END MX_GPIO_Init_1 */
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* GPIO Ports Clock Enable */
 334:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  36              		.loc 1 334 0
  37 0002 0022     		movs	r2, #0
  38 0004 0192     		str	r2, [sp, #4]
  39 0006 104B     		ldr	r3, .L3
  40 0008 196B     		ldr	r1, [r3, #48]
  41 000a 41F08001 		orr	r1, r1, #128
  42 000e 1963     		str	r1, [r3, #48]
  43 0010 196B     		ldr	r1, [r3, #48]
  44 0012 01F08001 		and	r1, r1, #128
  45 0016 0191     		str	r1, [sp, #4]
  46 0018 0199     		ldr	r1, [sp, #4]
  47              	.LBE4:
  48              	.LBB5:
 335:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  49              		.loc 1 335 0
  50 001a 0292     		str	r2, [sp, #8]
  51 001c 196B     		ldr	r1, [r3, #48]
  52 001e 41F00201 		orr	r1, r1, #2
  53 0022 1963     		str	r1, [r3, #48]
  54 0024 196B     		ldr	r1, [r3, #48]
  55 0026 01F00201 		and	r1, r1, #2
  56 002a 0291     		str	r1, [sp, #8]
  57 002c 0299     		ldr	r1, [sp, #8]
  58              	.LBE5:
  59              	.LBB6:
 336:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  60              		.loc 1 336 0
  61 002e 0392     		str	r2, [sp, #12]
  62 0030 1A6B     		ldr	r2, [r3, #48]
  63 0032 42F00102 		orr	r2, r2, #1
  64 0036 1A63     		str	r2, [r3, #48]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 8


  65 0038 1B6B     		ldr	r3, [r3, #48]
  66 003a 03F00103 		and	r3, r3, #1
  67 003e 0393     		str	r3, [sp, #12]
  68 0040 039B     		ldr	r3, [sp, #12]
  69              	.LBE6:
 337:Src/main.c    **** 
 338:Src/main.c    **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 339:Src/main.c    **** /* USER CODE END MX_GPIO_Init_2 */
 340:Src/main.c    **** }
  70              		.loc 1 340 0
  71 0042 04B0     		add	sp, sp, #16
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 0
  74              		@ sp needed
  75 0044 7047     		bx	lr
  76              	.L4:
  77 0046 00BF     		.align	2
  78              	.L3:
  79 0048 00380240 		.word	1073887232
  80              		.cfi_endproc
  81              	.LFE146:
  83              		.section	.text.StartDefaultTask,"ax",%progbits
  84              		.align	1
  85              		.global	StartDefaultTask
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	StartDefaultTask:
  92              	.LFB147:
 341:Src/main.c    **** 
 342:Src/main.c    **** /* USER CODE BEGIN 4 */
 343:Src/main.c    **** 
 344:Src/main.c    **** /* USER CODE END 4 */
 345:Src/main.c    **** 
 346:Src/main.c    **** /* USER CODE BEGIN Header_StartDefaultTask */
 347:Src/main.c    **** /**
 348:Src/main.c    ****   * @brief  Function implementing the defaultTask thread.
 349:Src/main.c    ****   * @param  argument: Not used
 350:Src/main.c    ****   * @retval None
 351:Src/main.c    ****   */
 352:Src/main.c    **** /* USER CODE END Header_StartDefaultTask */
 353:Src/main.c    **** void StartDefaultTask(void const * argument)
 354:Src/main.c    **** {
  93              		.loc 1 354 0
  94              		.cfi_startproc
  95              		@ Volatile: function does not return.
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL0:
  99 0000 08B5     		push	{r3, lr}
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 3, -8
 103              		.cfi_offset 14, -4
 355:Src/main.c    ****   /* init code for USB_DEVICE */
 356:Src/main.c    ****   MX_USB_DEVICE_Init();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 9


 104              		.loc 1 356 0
 105 0002 FFF7FEFF 		bl	MX_USB_DEVICE_Init
 106              	.LVL1:
 107              	.L6:
 357:Src/main.c    ****   /* USER CODE BEGIN 5 */
 358:Src/main.c    ****   /* Infinite loop */
 359:Src/main.c    ****   for(;;)
 360:Src/main.c    ****   {
 361:Src/main.c    ****     osDelay(1);
 108              		.loc 1 361 0 discriminator 1
 109 0006 0120     		movs	r0, #1
 110 0008 FFF7FEFF 		bl	osDelay
 111              	.LVL2:
 112 000c FBE7     		b	.L6
 113              		.cfi_endproc
 114              	.LFE147:
 116              		.section	.text.StartTask02,"ax",%progbits
 117              		.align	1
 118              		.global	StartTask02
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	StartTask02:
 125              	.LFB148:
 362:Src/main.c    ****   }
 363:Src/main.c    ****   /* USER CODE END 5 */
 364:Src/main.c    **** }
 365:Src/main.c    **** 
 366:Src/main.c    **** /* USER CODE BEGIN Header_StartTask02 */
 367:Src/main.c    **** /**
 368:Src/main.c    **** * @brief Function implementing the myTask02 thread.
 369:Src/main.c    **** * @param argument: Not used
 370:Src/main.c    **** * @retval None
 371:Src/main.c    **** */
 372:Src/main.c    **** /* USER CODE END Header_StartTask02 */
 373:Src/main.c    **** void StartTask02(void const * argument)
 374:Src/main.c    **** {
 126              		.loc 1 374 0
 127              		.cfi_startproc
 128              		@ Volatile: function does not return.
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              	.LVL3:
 132 0000 08B5     		push	{r3, lr}
 133              	.LCFI3:
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 3, -8
 136              		.cfi_offset 14, -4
 137              	.LVL4:
 138              	.L9:
 375:Src/main.c    ****   /* USER CODE BEGIN StartTask02 */
 376:Src/main.c    ****   /* Infinite loop */
 377:Src/main.c    ****   for(;;)
 378:Src/main.c    ****   {
 379:Src/main.c    ****     osDelay(1);
 139              		.loc 1 379 0 discriminator 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 10


 140 0002 0120     		movs	r0, #1
 141 0004 FFF7FEFF 		bl	osDelay
 142              	.LVL5:
 143 0008 FBE7     		b	.L9
 144              		.cfi_endproc
 145              	.LFE148:
 147              		.section	.text.StartTask03,"ax",%progbits
 148              		.align	1
 149              		.global	StartTask03
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	StartTask03:
 156              	.LFB149:
 380:Src/main.c    ****   }
 381:Src/main.c    ****   /* USER CODE END StartTask02 */
 382:Src/main.c    **** }
 383:Src/main.c    **** 
 384:Src/main.c    **** /* USER CODE BEGIN Header_StartTask03 */
 385:Src/main.c    **** /**
 386:Src/main.c    **** * @brief Function implementing the myTask03 thread.
 387:Src/main.c    **** * @param argument: Not used
 388:Src/main.c    **** * @retval None
 389:Src/main.c    **** */
 390:Src/main.c    **** /* USER CODE END Header_StartTask03 */
 391:Src/main.c    **** void StartTask03(void const * argument)
 392:Src/main.c    **** {
 157              		.loc 1 392 0
 158              		.cfi_startproc
 159              		@ Volatile: function does not return.
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              	.LVL6:
 163 0000 08B5     		push	{r3, lr}
 164              	.LCFI4:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 3, -8
 167              		.cfi_offset 14, -4
 168              	.LVL7:
 169              	.L12:
 393:Src/main.c    ****   /* USER CODE BEGIN StartTask03 */
 394:Src/main.c    ****   /* Infinite loop */
 395:Src/main.c    ****   for(;;)
 396:Src/main.c    ****   {
 397:Src/main.c    ****     osDelay(1);
 170              		.loc 1 397 0 discriminator 1
 171 0002 0120     		movs	r0, #1
 172 0004 FFF7FEFF 		bl	osDelay
 173              	.LVL8:
 174 0008 FBE7     		b	.L12
 175              		.cfi_endproc
 176              	.LFE149:
 178              		.section	.text.StartTask04,"ax",%progbits
 179              		.align	1
 180              		.global	StartTask04
 181              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 11


 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv4-sp-d16
 186              	StartTask04:
 187              	.LFB150:
 398:Src/main.c    ****   }
 399:Src/main.c    ****   /* USER CODE END StartTask03 */
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** /* USER CODE BEGIN Header_StartTask04 */
 403:Src/main.c    **** /**
 404:Src/main.c    **** * @brief Function implementing the myTask04 thread.
 405:Src/main.c    **** * @param argument: Not used
 406:Src/main.c    **** * @retval None
 407:Src/main.c    **** */
 408:Src/main.c    **** /* USER CODE END Header_StartTask04 */
 409:Src/main.c    **** void StartTask04(void const * argument)
 410:Src/main.c    **** {
 188              		.loc 1 410 0
 189              		.cfi_startproc
 190              		@ Volatile: function does not return.
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 0, uses_anonymous_args = 0
 193              	.LVL9:
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI5:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 199              	.LVL10:
 200              	.L15:
 411:Src/main.c    ****   /* USER CODE BEGIN StartTask04 */
 412:Src/main.c    ****   /* Infinite loop */
 413:Src/main.c    ****   for(;;)
 414:Src/main.c    ****   {
 415:Src/main.c    ****     osDelay(1);
 201              		.loc 1 415 0 discriminator 1
 202 0002 0120     		movs	r0, #1
 203 0004 FFF7FEFF 		bl	osDelay
 204              	.LVL11:
 205 0008 FBE7     		b	.L15
 206              		.cfi_endproc
 207              	.LFE150:
 209              		.section	.text.Error_Handler,"ax",%progbits
 210              		.align	1
 211              		.global	Error_Handler
 212              		.syntax unified
 213              		.thumb
 214              		.thumb_func
 215              		.fpu fpv4-sp-d16
 217              	Error_Handler:
 218              	.LFB151:
 416:Src/main.c    ****   }
 417:Src/main.c    ****   /* USER CODE END StartTask04 */
 418:Src/main.c    **** }
 419:Src/main.c    **** 
 420:Src/main.c    **** /**
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 12


 421:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 422:Src/main.c    ****   * @retval None
 423:Src/main.c    ****   */
 424:Src/main.c    **** void Error_Handler(void)
 425:Src/main.c    **** {
 219              		.loc 1 425 0
 220              		.cfi_startproc
 221              		@ Volatile: function does not return.
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225              	.LBB7:
 226              	.LBB8:
 227              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 13


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 14


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 15


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 16


 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 17


 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 18


 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 19


 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 20


 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 21


 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 22


 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 23


 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 24


 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 25


 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 26


 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 27


 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 28


 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 29


 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 228              		.loc 2 962 0
 229              		.syntax unified
 230              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 231 0000 72B6     		cpsid i
 232              	@ 0 "" 2
 233              		.thumb
 234              		.syntax unified
 235              	.L18:
 236 0002 FEE7     		b	.L18
 237              	.LBE8:
 238              	.LBE7:
 239              		.cfi_endproc
 240              	.LFE151:
 242              		.section	.text.MX_TIM1_Init,"ax",%progbits
 243              		.align	1
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	MX_TIM1_Init:
 250              	.LFB145:
 241:Src/main.c    **** 
 251              		.loc 1 241 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 88
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255 0000 10B5     		push	{r4, lr}
 256              	.LCFI6:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 260 0002 96B0     		sub	sp, sp, #88
 261              	.LCFI7:
 262              		.cfi_def_cfa_offset 96
 247:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 263              		.loc 1 247 0
 264 0004 0024     		movs	r4, #0
 265 0006 1294     		str	r4, [sp, #72]
 266 0008 1394     		str	r4, [sp, #76]
 267 000a 1494     		str	r4, [sp, #80]
 268 000c 1594     		str	r4, [sp, #84]
 248:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 269              		.loc 1 248 0
 270 000e 1094     		str	r4, [sp, #64]
 271 0010 1194     		str	r4, [sp, #68]
 249:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 272              		.loc 1 249 0
 273 0012 0994     		str	r4, [sp, #36]
 274 0014 0A94     		str	r4, [sp, #40]
 275 0016 0B94     		str	r4, [sp, #44]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 30


 276 0018 0C94     		str	r4, [sp, #48]
 277 001a 0D94     		str	r4, [sp, #52]
 278 001c 0E94     		str	r4, [sp, #56]
 279 001e 0F94     		str	r4, [sp, #60]
 250:Src/main.c    **** 
 280              		.loc 1 250 0
 281 0020 2022     		movs	r2, #32
 282 0022 2146     		mov	r1, r4
 283 0024 01A8     		add	r0, sp, #4
 284 0026 FFF7FEFF 		bl	memset
 285              	.LVL12:
 255:Src/main.c    ****   htim1.Init.Prescaler = 0;
 286              		.loc 1 255 0
 287 002a 3948     		ldr	r0, .L39
 288 002c 394B     		ldr	r3, .L39+4
 289 002e 0360     		str	r3, [r0]
 256:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 290              		.loc 1 256 0
 291 0030 4460     		str	r4, [r0, #4]
 257:Src/main.c    ****   htim1.Init.Period = 65535;
 292              		.loc 1 257 0
 293 0032 8460     		str	r4, [r0, #8]
 258:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 294              		.loc 1 258 0
 295 0034 4FF6FF73 		movw	r3, #65535
 296 0038 C360     		str	r3, [r0, #12]
 259:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 297              		.loc 1 259 0
 298 003a 0461     		str	r4, [r0, #16]
 260:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 299              		.loc 1 260 0
 300 003c 4461     		str	r4, [r0, #20]
 261:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 301              		.loc 1 261 0
 302 003e 8461     		str	r4, [r0, #24]
 262:Src/main.c    ****   {
 303              		.loc 1 262 0
 304 0040 FFF7FEFF 		bl	HAL_TIM_Base_Init
 305              	.LVL13:
 306 0044 0028     		cmp	r0, #0
 307 0046 50D1     		bne	.L30
 266:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 308              		.loc 1 266 0
 309 0048 16A9     		add	r1, sp, #88
 310 004a 4FF48053 		mov	r3, #4096
 311 004e 41F8103D 		str	r3, [r1, #-16]!
 267:Src/main.c    ****   {
 312              		.loc 1 267 0
 313 0052 2F48     		ldr	r0, .L39
 314 0054 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 315              	.LVL14:
 316 0058 0028     		cmp	r0, #0
 317 005a 48D1     		bne	.L31
 271:Src/main.c    ****   {
 318              		.loc 1 271 0
 319 005c 2C48     		ldr	r0, .L39
 320 005e FFF7FEFF 		bl	HAL_TIM_PWM_Init
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 31


 321              	.LVL15:
 322 0062 0028     		cmp	r0, #0
 323 0064 45D1     		bne	.L32
 275:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 324              		.loc 1 275 0
 325 0066 7023     		movs	r3, #112
 326 0068 1093     		str	r3, [sp, #64]
 276:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 327              		.loc 1 276 0
 328 006a 0023     		movs	r3, #0
 329 006c 1193     		str	r3, [sp, #68]
 277:Src/main.c    ****   {
 330              		.loc 1 277 0
 331 006e 10A9     		add	r1, sp, #64
 332 0070 2748     		ldr	r0, .L39
 333 0072 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 334              	.LVL16:
 335 0076 0028     		cmp	r0, #0
 336 0078 3DD1     		bne	.L33
 281:Src/main.c    ****   sConfigOC.Pulse = 0;
 337              		.loc 1 281 0
 338 007a 6023     		movs	r3, #96
 339 007c 0993     		str	r3, [sp, #36]
 282:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 340              		.loc 1 282 0
 341 007e 0022     		movs	r2, #0
 342 0080 0A92     		str	r2, [sp, #40]
 283:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 343              		.loc 1 283 0
 344 0082 0B92     		str	r2, [sp, #44]
 284:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 345              		.loc 1 284 0
 346 0084 0C92     		str	r2, [sp, #48]
 285:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 347              		.loc 1 285 0
 348 0086 0D92     		str	r2, [sp, #52]
 286:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 349              		.loc 1 286 0
 350 0088 0E92     		str	r2, [sp, #56]
 287:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 351              		.loc 1 287 0
 352 008a 0F92     		str	r2, [sp, #60]
 288:Src/main.c    ****   {
 353              		.loc 1 288 0
 354 008c 09A9     		add	r1, sp, #36
 355 008e 2048     		ldr	r0, .L39
 356 0090 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 357              	.LVL17:
 358 0094 0028     		cmp	r0, #0
 359 0096 30D1     		bne	.L34
 292:Src/main.c    ****   {
 360              		.loc 1 292 0
 361 0098 0422     		movs	r2, #4
 362 009a 09A9     		add	r1, sp, #36
 363 009c 1C48     		ldr	r0, .L39
 364 009e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 365              	.LVL18:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 32


 366 00a2 60BB     		cbnz	r0, .L35
 296:Src/main.c    ****   {
 367              		.loc 1 296 0
 368 00a4 0822     		movs	r2, #8
 369 00a6 09A9     		add	r1, sp, #36
 370 00a8 1948     		ldr	r0, .L39
 371 00aa FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 372              	.LVL19:
 373 00ae 40BB     		cbnz	r0, .L36
 300:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 374              		.loc 1 300 0
 375 00b0 16A9     		add	r1, sp, #88
 376 00b2 7023     		movs	r3, #112
 377 00b4 41F8343D 		str	r3, [r1, #-52]!
 301:Src/main.c    ****   {
 378              		.loc 1 301 0
 379 00b8 0C22     		movs	r2, #12
 380 00ba 1548     		ldr	r0, .L39
 381 00bc FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 382              	.LVL20:
 383 00c0 08BB     		cbnz	r0, .L37
 305:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 384              		.loc 1 305 0
 385 00c2 0023     		movs	r3, #0
 386 00c4 0193     		str	r3, [sp, #4]
 306:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 387              		.loc 1 306 0
 388 00c6 0293     		str	r3, [sp, #8]
 307:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 389              		.loc 1 307 0
 390 00c8 0393     		str	r3, [sp, #12]
 308:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 391              		.loc 1 308 0
 392 00ca 0493     		str	r3, [sp, #16]
 309:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 393              		.loc 1 309 0
 394 00cc 0593     		str	r3, [sp, #20]
 310:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 395              		.loc 1 310 0
 396 00ce 4FF40052 		mov	r2, #8192
 397 00d2 0692     		str	r2, [sp, #24]
 311:Src/main.c    ****   if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 398              		.loc 1 311 0
 399 00d4 0893     		str	r3, [sp, #32]
 312:Src/main.c    ****   {
 400              		.loc 1 312 0
 401 00d6 01A9     		add	r1, sp, #4
 402 00d8 0D48     		ldr	r0, .L39
 403 00da FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 404              	.LVL21:
 405 00de A0B9     		cbnz	r0, .L38
 319:Src/main.c    **** 
 406              		.loc 1 319 0
 407 00e0 0B48     		ldr	r0, .L39
 408 00e2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 409              	.LVL22:
 321:Src/main.c    **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 33


 410              		.loc 1 321 0
 411 00e6 16B0     		add	sp, sp, #88
 412              	.LCFI8:
 413              		.cfi_remember_state
 414              		.cfi_def_cfa_offset 8
 415              		@ sp needed
 416 00e8 10BD     		pop	{r4, pc}
 417              	.L30:
 418              	.LCFI9:
 419              		.cfi_restore_state
 264:Src/main.c    ****   }
 420              		.loc 1 264 0
 421 00ea FFF7FEFF 		bl	Error_Handler
 422              	.LVL23:
 423              	.L31:
 269:Src/main.c    ****   }
 424              		.loc 1 269 0
 425 00ee FFF7FEFF 		bl	Error_Handler
 426              	.LVL24:
 427              	.L32:
 273:Src/main.c    ****   }
 428              		.loc 1 273 0
 429 00f2 FFF7FEFF 		bl	Error_Handler
 430              	.LVL25:
 431              	.L33:
 279:Src/main.c    ****   }
 432              		.loc 1 279 0
 433 00f6 FFF7FEFF 		bl	Error_Handler
 434              	.LVL26:
 435              	.L34:
 290:Src/main.c    ****   }
 436              		.loc 1 290 0
 437 00fa FFF7FEFF 		bl	Error_Handler
 438              	.LVL27:
 439              	.L35:
 294:Src/main.c    ****   }
 440              		.loc 1 294 0
 441 00fe FFF7FEFF 		bl	Error_Handler
 442              	.LVL28:
 443              	.L36:
 298:Src/main.c    ****   }
 444              		.loc 1 298 0
 445 0102 FFF7FEFF 		bl	Error_Handler
 446              	.LVL29:
 447              	.L37:
 303:Src/main.c    ****   }
 448              		.loc 1 303 0
 449 0106 FFF7FEFF 		bl	Error_Handler
 450              	.LVL30:
 451              	.L38:
 314:Src/main.c    ****   }
 452              		.loc 1 314 0
 453 010a FFF7FEFF 		bl	Error_Handler
 454              	.LVL31:
 455              	.L40:
 456 010e 00BF     		.align	2
 457              	.L39:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 34


 458 0110 00000000 		.word	htim1
 459 0114 00000140 		.word	1073807360
 460              		.cfi_endproc
 461              	.LFE145:
 463              		.section	.text.SystemClock_Config,"ax",%progbits
 464              		.align	1
 465              		.global	SystemClock_Config
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	SystemClock_Config:
 472              	.LFB144:
 195:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 473              		.loc 1 195 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 80
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477 0000 00B5     		push	{lr}
 478              	.LCFI10:
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 14, -4
 481 0002 95B0     		sub	sp, sp, #84
 482              	.LCFI11:
 483              		.cfi_def_cfa_offset 88
 196:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 484              		.loc 1 196 0
 485 0004 3022     		movs	r2, #48
 486 0006 0021     		movs	r1, #0
 487 0008 08A8     		add	r0, sp, #32
 488 000a FFF7FEFF 		bl	memset
 489              	.LVL32:
 197:Src/main.c    **** 
 490              		.loc 1 197 0
 491 000e 0023     		movs	r3, #0
 492 0010 0393     		str	r3, [sp, #12]
 493 0012 0493     		str	r3, [sp, #16]
 494 0014 0593     		str	r3, [sp, #20]
 495 0016 0693     		str	r3, [sp, #24]
 496 0018 0793     		str	r3, [sp, #28]
 497              	.LBB9:
 201:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 498              		.loc 1 201 0
 499 001a 0193     		str	r3, [sp, #4]
 500 001c 204A     		ldr	r2, .L47
 501 001e 116C     		ldr	r1, [r2, #64]
 502 0020 41F08051 		orr	r1, r1, #268435456
 503 0024 1164     		str	r1, [r2, #64]
 504 0026 126C     		ldr	r2, [r2, #64]
 505 0028 02F08052 		and	r2, r2, #268435456
 506 002c 0192     		str	r2, [sp, #4]
 507 002e 019A     		ldr	r2, [sp, #4]
 508              	.LBE9:
 509              	.LBB10:
 202:Src/main.c    **** 
 510              		.loc 1 202 0
 511 0030 0293     		str	r3, [sp, #8]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 35


 512 0032 1C4B     		ldr	r3, .L47+4
 513 0034 1A68     		ldr	r2, [r3]
 514 0036 42F48042 		orr	r2, r2, #16384
 515 003a 1A60     		str	r2, [r3]
 516 003c 1B68     		ldr	r3, [r3]
 517 003e 03F48043 		and	r3, r3, #16384
 518 0042 0293     		str	r3, [sp, #8]
 519 0044 029B     		ldr	r3, [sp, #8]
 520              	.LBE10:
 207:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 521              		.loc 1 207 0
 522 0046 0123     		movs	r3, #1
 523 0048 0893     		str	r3, [sp, #32]
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 524              		.loc 1 208 0
 525 004a 4FF48033 		mov	r3, #65536
 526 004e 0993     		str	r3, [sp, #36]
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 527              		.loc 1 209 0
 528 0050 0223     		movs	r3, #2
 529 0052 0E93     		str	r3, [sp, #56]
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 4;
 530              		.loc 1 210 0
 531 0054 4FF48002 		mov	r2, #4194304
 532 0058 0F92     		str	r2, [sp, #60]
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 168;
 533              		.loc 1 211 0
 534 005a 0422     		movs	r2, #4
 535 005c 1092     		str	r2, [sp, #64]
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 536              		.loc 1 212 0
 537 005e A822     		movs	r2, #168
 538 0060 1192     		str	r2, [sp, #68]
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 539              		.loc 1 213 0
 540 0062 1293     		str	r3, [sp, #72]
 214:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 541              		.loc 1 214 0
 542 0064 0723     		movs	r3, #7
 543 0066 1393     		str	r3, [sp, #76]
 215:Src/main.c    ****   {
 544              		.loc 1 215 0
 545 0068 08A8     		add	r0, sp, #32
 546 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 547              	.LVL33:
 548 006e 98B9     		cbnz	r0, .L45
 222:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 549              		.loc 1 222 0
 550 0070 0F23     		movs	r3, #15
 551 0072 0393     		str	r3, [sp, #12]
 224:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 552              		.loc 1 224 0
 553 0074 0223     		movs	r3, #2
 554 0076 0493     		str	r3, [sp, #16]
 225:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 555              		.loc 1 225 0
 556 0078 0023     		movs	r3, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 36


 557 007a 0593     		str	r3, [sp, #20]
 226:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 558              		.loc 1 226 0
 559 007c 4FF4A053 		mov	r3, #5120
 560 0080 0693     		str	r3, [sp, #24]
 227:Src/main.c    **** 
 561              		.loc 1 227 0
 562 0082 4FF48053 		mov	r3, #4096
 563 0086 0793     		str	r3, [sp, #28]
 229:Src/main.c    ****   {
 564              		.loc 1 229 0
 565 0088 0521     		movs	r1, #5
 566 008a 03A8     		add	r0, sp, #12
 567 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 568              	.LVL34:
 569 0090 20B9     		cbnz	r0, .L46
 233:Src/main.c    **** 
 570              		.loc 1 233 0
 571 0092 15B0     		add	sp, sp, #84
 572              	.LCFI12:
 573              		.cfi_remember_state
 574              		.cfi_def_cfa_offset 4
 575              		@ sp needed
 576 0094 5DF804FB 		ldr	pc, [sp], #4
 577              	.L45:
 578              	.LCFI13:
 579              		.cfi_restore_state
 217:Src/main.c    ****   }
 580              		.loc 1 217 0
 581 0098 FFF7FEFF 		bl	Error_Handler
 582              	.LVL35:
 583              	.L46:
 231:Src/main.c    ****   }
 584              		.loc 1 231 0
 585 009c FFF7FEFF 		bl	Error_Handler
 586              	.LVL36:
 587              	.L48:
 588              		.align	2
 589              	.L47:
 590 00a0 00380240 		.word	1073887232
 591 00a4 00700040 		.word	1073770496
 592              		.cfi_endproc
 593              	.LFE144:
 595              		.section	.text.main,"ax",%progbits
 596              		.align	1
 597              		.global	main
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	main:
 604              	.LFB143:
  93:Src/main.c    **** 
 605              		.loc 1 93 0
 606              		.cfi_startproc
 607              		@ Volatile: function does not return.
 608              		@ args = 0, pretend = 0, frame = 144
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 37


 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610 0000 80B5     		push	{r7, lr}
 611              	.LCFI14:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 A4B0     		sub	sp, sp, #144
 616              	.LCFI15:
 617              		.cfi_def_cfa_offset 152
 102:Src/main.c    **** 
 618              		.loc 1 102 0
 619 0004 FFF7FEFF 		bl	HAL_Init
 620              	.LVL37:
 109:Src/main.c    **** 
 621              		.loc 1 109 0
 622 0008 FFF7FEFF 		bl	SystemClock_Config
 623              	.LVL38:
 116:Src/main.c    ****   MX_TIM1_Init();
 624              		.loc 1 116 0
 625 000c FFF7FEFF 		bl	MX_GPIO_Init
 626              	.LVL39:
 117:Src/main.c    ****   /* USER CODE BEGIN 2 */
 627              		.loc 1 117 0
 628 0010 FFF7FEFF 		bl	MX_TIM1_Init
 629              	.LVL40:
 124:Src/main.c    ****   myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 630              		.loc 1 124 0
 631 0014 0027     		movs	r7, #0
 632 0016 2297     		str	r7, [sp, #136]
 633 0018 2C4B     		ldr	r3, .L52
 634 001a 2393     		str	r3, [sp, #140]
 125:Src/main.c    **** 
 635              		.loc 1 125 0
 636 001c 22A8     		add	r0, sp, #136
 637 001e FFF7FEFF 		bl	osMutexCreate
 638              	.LVL41:
 639 0022 2B4B     		ldr	r3, .L52+4
 640 0024 1860     		str	r0, [r3]
 133:Src/main.c    ****   myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 641              		.loc 1 133 0
 642 0026 2097     		str	r7, [sp, #128]
 643 0028 2A4B     		ldr	r3, .L52+8
 644 002a 2193     		str	r3, [sp, #132]
 134:Src/main.c    **** 
 645              		.loc 1 134 0
 646 002c 0121     		movs	r1, #1
 647 002e 20A8     		add	r0, sp, #128
 648 0030 FFF7FEFF 		bl	osSemaphoreCreate
 649              	.LVL42:
 650 0034 284B     		ldr	r3, .L52+12
 651 0036 1860     		str	r0, [r3]
 146:Src/main.c    ****   myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 652              		.loc 1 146 0
 653 0038 284C     		ldr	r4, .L52+16
 654 003a 1CAD     		add	r5, sp, #112
 655 003c 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 656 0040 85E80F00 		stm	r5, {r0, r1, r2, r3}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 38


 147:Src/main.c    **** 
 657              		.loc 1 147 0
 658 0044 3946     		mov	r1, r7
 659 0046 2846     		mov	r0, r5
 660 0048 FFF7FEFF 		bl	osMessageCreate
 661              	.LVL43:
 662 004c 244B     		ldr	r3, .L52+20
 663 004e 1860     		str	r0, [r3]
 155:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 664              		.loc 1 155 0
 665 0050 15AD     		add	r5, sp, #84
 666 0052 04F11006 		add	r6, r4, #16
 667 0056 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 668 0058 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 669 005a 96E80700 		ldm	r6, {r0, r1, r2}
 670 005e 85E80700 		stm	r5, {r0, r1, r2}
 156:Src/main.c    **** 
 671              		.loc 1 156 0
 672 0062 3946     		mov	r1, r7
 673 0064 15A8     		add	r0, sp, #84
 674 0066 FFF7FEFF 		bl	osThreadCreate
 675              	.LVL44:
 676 006a 1E4B     		ldr	r3, .L52+24
 677 006c 1860     		str	r0, [r3]
 159:Src/main.c    ****   myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 678              		.loc 1 159 0
 679 006e 0EAD     		add	r5, sp, #56
 680 0070 04F12C06 		add	r6, r4, #44
 681 0074 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 682 0076 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 683 0078 96E80700 		ldm	r6, {r0, r1, r2}
 684 007c 85E80700 		stm	r5, {r0, r1, r2}
 160:Src/main.c    **** 
 685              		.loc 1 160 0
 686 0080 3946     		mov	r1, r7
 687 0082 0EA8     		add	r0, sp, #56
 688 0084 FFF7FEFF 		bl	osThreadCreate
 689              	.LVL45:
 690 0088 174B     		ldr	r3, .L52+28
 691 008a 1860     		str	r0, [r3]
 163:Src/main.c    ****   myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 692              		.loc 1 163 0
 693 008c 07AD     		add	r5, sp, #28
 694 008e 04F14806 		add	r6, r4, #72
 695 0092 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 696 0094 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 697 0096 96E80700 		ldm	r6, {r0, r1, r2}
 698 009a 85E80700 		stm	r5, {r0, r1, r2}
 164:Src/main.c    **** 
 699              		.loc 1 164 0
 700 009e 3946     		mov	r1, r7
 701 00a0 07A8     		add	r0, sp, #28
 702 00a2 FFF7FEFF 		bl	osThreadCreate
 703              	.LVL46:
 704 00a6 114B     		ldr	r3, .L52+32
 705 00a8 1860     		str	r0, [r3]
 167:Src/main.c    ****   myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 39


 706              		.loc 1 167 0
 707 00aa 6D46     		mov	r5, sp
 708 00ac 6434     		adds	r4, r4, #100
 709 00ae 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 710 00b0 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 711 00b2 94E80700 		ldm	r4, {r0, r1, r2}
 712 00b6 85E80700 		stm	r5, {r0, r1, r2}
 168:Src/main.c    **** 
 713              		.loc 1 168 0
 714 00ba 3946     		mov	r1, r7
 715 00bc 6846     		mov	r0, sp
 716 00be FFF7FEFF 		bl	osThreadCreate
 717              	.LVL47:
 718 00c2 0B4B     		ldr	r3, .L52+36
 719 00c4 1860     		str	r0, [r3]
 175:Src/main.c    **** 
 720              		.loc 1 175 0
 721 00c6 FFF7FEFF 		bl	osKernelStart
 722              	.LVL48:
 723              	.L50:
 724 00ca FEE7     		b	.L50
 725              	.L53:
 726              		.align	2
 727              	.L52:
 728 00cc 00000000 		.word	myMutex01ControlBlock
 729 00d0 00000000 		.word	myMutex01Handle
 730 00d4 00000000 		.word	myBinarySem01ControlBlock
 731 00d8 00000000 		.word	myBinarySem01Handle
 732 00dc 00000000 		.word	.LANCHOR0
 733 00e0 00000000 		.word	myQueue01Handle
 734 00e4 00000000 		.word	defaultTaskHandle
 735 00e8 00000000 		.word	myTask02Handle
 736 00ec 00000000 		.word	myTask03Handle
 737 00f0 00000000 		.word	myTask04Handle
 738              		.cfi_endproc
 739              	.LFE143:
 741              		.comm	myBinarySem01ControlBlock,72,4
 742              		.comm	myBinarySem01Handle,4,4
 743              		.comm	myMutex01ControlBlock,72,4
 744              		.comm	myMutex01Handle,4,4
 745              		.comm	myQueue01ControlBlock,72,4
 746              		.comm	myQueue01Buffer,32,4
 747              		.comm	myQueue01Handle,4,4
 748              		.comm	myTask04ControlBlock,96,4
 749              		.comm	myTask04Buffer,8192,4
 750              		.comm	myTask04Handle,4,4
 751              		.comm	myTask03ControlBlock,96,4
 752              		.comm	myTask03Buffer,8192,4
 753              		.comm	myTask03Handle,4,4
 754              		.comm	myTask02ControlBlock,96,4
 755              		.comm	myTask02Buffer,8192,4
 756              		.comm	myTask02Handle,4,4
 757              		.comm	defaultTaskControlBlock,96,4
 758              		.comm	defaultTaskBuffer,8192,4
 759              		.comm	defaultTaskHandle,4,4
 760              		.comm	htim1,72,4
 761              		.section	.rodata
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 40


 762              		.align	2
 763              		.set	.LANCHOR0,. + 0
 764              	.LC9:
 765 0000 10000000 		.word	16
 766 0004 02000000 		.word	2
 767 0008 00000000 		.word	myQueue01Buffer
 768 000c 00000000 		.word	myQueue01ControlBlock
 769              	.LC10:
 770 0010 24000000 		.word	.LC1
 771 0014 00000000 		.word	StartDefaultTask
 772 0018 0000     		.short	0
 773 001a 0000     		.space	2
 774 001c 00000000 		.word	0
 775 0020 00080000 		.word	2048
 776 0024 00000000 		.word	defaultTaskBuffer
 777 0028 00000000 		.word	defaultTaskControlBlock
 778              	.LC11:
 779 002c 18000000 		.word	.LC3
 780 0030 00000000 		.word	StartTask02
 781 0034 FDFF     		.short	-3
 782 0036 0000     		.space	2
 783 0038 00000000 		.word	0
 784 003c 00080000 		.word	2048
 785 0040 00000000 		.word	myTask02Buffer
 786 0044 00000000 		.word	myTask02ControlBlock
 787              	.LC12:
 788 0048 0C000000 		.word	.LC5
 789 004c 00000000 		.word	StartTask03
 790 0050 FDFF     		.short	-3
 791 0052 0000     		.space	2
 792 0054 00000000 		.word	0
 793 0058 00080000 		.word	2048
 794 005c 00000000 		.word	myTask03Buffer
 795 0060 00000000 		.word	myTask03ControlBlock
 796              	.LC13:
 797 0064 00000000 		.word	.LC7
 798 0068 00000000 		.word	StartTask04
 799 006c FDFF     		.short	-3
 800 006e 0000     		.space	2
 801 0070 00000000 		.word	0
 802 0074 00080000 		.word	2048
 803 0078 00000000 		.word	myTask04Buffer
 804 007c 00000000 		.word	myTask04ControlBlock
 805              		.section	.rodata.str1.4,"aMS",%progbits,1
 806              		.align	2
 807              	.LC7:
 808 0000 6D795461 		.ascii	"myTask04\000"
 808      736B3034 
 808      00
 809 0009 000000   		.space	3
 810              	.LC5:
 811 000c 6D795461 		.ascii	"myTask03\000"
 811      736B3033 
 811      00
 812 0015 000000   		.space	3
 813              	.LC3:
 814 0018 6D795461 		.ascii	"myTask02\000"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 41


 814      736B3032 
 814      00
 815 0021 000000   		.space	3
 816              	.LC1:
 817 0024 64656661 		.ascii	"defaultTask\000"
 817      756C7454 
 817      61736B00 
 818              		.text
 819              	.Letext0:
 820              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 821              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 822              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 823              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 824              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 825              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 826              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 827              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 828              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 829              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 830              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 831              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 832              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 833              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 834              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/include/queue.h"
 835              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/semphr.h"
 836              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 837              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 838              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 839              		.file 22 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-ea
 840              		.file 23 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 841              		.file 24 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 842              		.file 25 "Inc/usb_device.h"
 843              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 844              		.file 27 "Inc/main.h"
 845              		.file 28 "<built-in>"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 42


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:18     .text.MX_GPIO_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:79     .text.MX_GPIO_Init:00000048 $d
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:84     .text.StartDefaultTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:91     .text.StartDefaultTask:00000000 StartDefaultTask
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:117    .text.StartTask02:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:124    .text.StartTask02:00000000 StartTask02
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:148    .text.StartTask03:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:155    .text.StartTask03:00000000 StartTask03
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:179    .text.StartTask04:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:186    .text.StartTask04:00000000 StartTask04
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:210    .text.Error_Handler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:217    .text.Error_Handler:00000000 Error_Handler
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:243    .text.MX_TIM1_Init:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:249    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:458    .text.MX_TIM1_Init:00000110 $d
                            *COM*:00000048 htim1
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:464    .text.SystemClock_Config:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:471    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:590    .text.SystemClock_Config:000000a0 $d
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:596    .text.main:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:603    .text.main:00000000 main
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:728    .text.main:000000cc $d
                            *COM*:00000048 myMutex01ControlBlock
                            *COM*:00000004 myMutex01Handle
                            *COM*:00000048 myBinarySem01ControlBlock
                            *COM*:00000004 myBinarySem01Handle
                            *COM*:00000004 myQueue01Handle
                            *COM*:00000004 defaultTaskHandle
                            *COM*:00000004 myTask02Handle
                            *COM*:00000004 myTask03Handle
                            *COM*:00000004 myTask04Handle
                            *COM*:00000048 myQueue01ControlBlock
                            *COM*:00000020 myQueue01Buffer
                            *COM*:00000060 myTask04ControlBlock
                            *COM*:00002000 myTask04Buffer
                            *COM*:00000060 myTask03ControlBlock
                            *COM*:00002000 myTask03Buffer
                            *COM*:00000060 myTask02ControlBlock
                            *COM*:00002000 myTask02Buffer
                            *COM*:00000060 defaultTaskControlBlock
                            *COM*:00002000 defaultTaskBuffer
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:762    .rodata:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s:806    .rodata.str1.4:00000000 $d

UNDEFINED SYMBOLS
MX_USB_DEVICE_Init
osDelay
memset
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccgL0fBU.s 			page 43


HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
osMutexCreate
osSemaphoreCreate
osMessageCreate
osThreadCreate
osKernelStart
